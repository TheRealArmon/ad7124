
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008398  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f98  080084a8  080084a8  000184a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009440  08009440  00020608  2**0
                  CONTENTS
  4 .ARM          00000000  08009440  08009440  00020608  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009440  08009440  00020608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000608  20000000  08009448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000608  08009a50  00020608  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c38  08009a50  00020c38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020608  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152a2  00000000  00000000  00020631  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032f1  00000000  00000000  000358d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001230  00000000  00000000  00038bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  00039df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017bd5  00000000  00000000  0003ae58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eea4  00000000  00000000  00052a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a32f  00000000  00000000  000618d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbc00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b4  00000000  00000000  000dbc7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000608 	.word	0x20000608
 800012c:	00000000 	.word	0x00000000
 8000130:	08008490 	.word	0x08008490

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000060c 	.word	0x2000060c
 800014c:	08008490 	.word	0x08008490

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <ad7124_no_check_read_register>:
 *
 * @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t ad7124_no_check_read_register(struct ad7124_dev *dev,
				      struct ad7124_st_reg* p_reg)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
	uint8_t buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
	uint8_t i = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t check8 = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t msg_buf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
	int32_t add_status_length = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]

	if(!dev || !p_reg)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <ad7124_no_check_read_register+0x3e>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <ad7124_no_check_read_register+0x44>
		return INVALID_VAL;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e0b5      	b.n	8001194 <ad7124_no_check_read_register+0x1b0>

	/* Build the Command word */
	buffer[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD |
		    AD7124_COMM_REG_RA(p_reg->addr);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001032:	b25b      	sxtb	r3, r3
	buffer[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD |
 8001034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	753b      	strb	r3, [r7, #20]

	/*
	 * If this is an AD7124_DATA register read, and the DATA_STATUS bit is set
	 * in ADC_CONTROL, need to read 4, not 3 bytes for DATA with STATUS
	 */
	if ((p_reg->addr == AD7124_DATA_REG) &&
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d109      	bne.n	800105a <ad7124_no_check_read_register+0x76>
	    (dev->regs[AD7124_ADC_Control].value & AD7124_ADC_CTRL_REG_DATA_STATUS)) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	3310      	adds	r3, #16
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	if ((p_reg->addr == AD7124_DATA_REG) &&
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <ad7124_no_check_read_register+0x76>
		add_status_length = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	623b      	str	r3, [r7, #32]
	}

	/* Read data from the device */
	ret = spi_write_and_read(dev->spi_desc,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6818      	ldr	r0, [r3, #0]
				 buffer,
				 ((dev->use_crc != AD7124_DISABLE_CRC) ? p_reg->size + 1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	ret = spi_write_and_read(dev->spi_desc,
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <ad7124_no_check_read_register+0x90>
				 ((dev->use_crc != AD7124_DISABLE_CRC) ? p_reg->size + 1
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
				  : p_reg->size) + 1 + add_status_length);
 800106c:	b2db      	uxtb	r3, r3
	ret = spi_write_and_read(dev->spi_desc,
 800106e:	3302      	adds	r3, #2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	e004      	b.n	800107e <ad7124_no_check_read_register+0x9a>
				  : p_reg->size) + 1 + add_status_length);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	b2db      	uxtb	r3, r3
	ret = spi_write_and_read(dev->spi_desc,
 800107a:	3301      	adds	r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	6a3a      	ldr	r2, [r7, #32]
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	4413      	add	r3, r2
 8001084:	b2da      	uxtb	r2, r3
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	f001 fb82 	bl	8002794 <spi_write_and_read>
 8001090:	61f8      	str	r0, [r7, #28]
	if(ret < 0)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	2b00      	cmp	r3, #0
 8001096:	da01      	bge.n	800109c <ad7124_no_check_read_register+0xb8>
		return ret;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	e07b      	b.n	8001194 <ad7124_no_check_read_register+0x1b0>

	/* Check the CRC */
	if(dev->use_crc == AD7124_USE_CRC) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d13c      	bne.n	8001120 <ad7124_no_check_read_register+0x13c>
		msg_buf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD |
			     AD7124_COMM_REG_RA(p_reg->addr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b0:	b25b      	sxtb	r3, r3
		msg_buf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD |
 80010b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	733b      	strb	r3, [r7, #12]
		for(i = 1; i < p_reg->size + 2 + add_status_length; ++i) {
 80010bc:	2301      	movs	r3, #1
 80010be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010c2:	e012      	b.n	80010ea <ad7124_no_check_read_register+0x106>
			msg_buf[i] = buffer[i];
 80010c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010d0:	440a      	add	r2, r1
 80010d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80010d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010da:	440b      	add	r3, r1
 80010dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(i = 1; i < p_reg->size + 2 + add_status_length; ++i) {
 80010e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e4:	3301      	adds	r3, #1
 80010e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	1c99      	adds	r1, r3, #2
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	440b      	add	r3, r1
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbe3      	blt.n	80010c4 <ad7124_no_check_read_register+0xe0>
		}
		check8 = ad7124_compute_crc8(msg_buf, p_reg->size + 2 + add_status_length);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4413      	add	r3, r2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	3302      	adds	r3, #2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fa0a 	bl	800152e <ad7124_compute_crc8>
 800111a:	4603      	mov	r3, r0
 800111c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	if(check8 != 0) {
 8001120:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <ad7124_no_check_read_register+0x14a>
		/* ReadRegister checksum failed. */
		return COMM_ERR;
 8001128:	f06f 0301 	mvn.w	r3, #1
 800112c:	e032      	b.n	8001194 <ad7124_no_check_read_register+0x1b0>

	/*
	 * if reading Data with 4 bytes, need to copy the status byte to the STATUS
	 * register struct value member
	 */
	if (add_status_length) {
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00a      	beq.n	800114a <ad7124_no_check_read_register+0x166>
		dev->regs[AD7124_Status].value = buffer[p_reg->size + 1];
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	3301      	adds	r3, #1
 800113a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800113e:	4413      	add	r3, r2
 8001140:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	605a      	str	r2, [r3, #4]
	}

	/* Build the result */
	p_reg->value = 0;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
	for(i = 1; i < p_reg->size + 1; i++) {
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001156:	e015      	b.n	8001184 <ad7124_no_check_read_register+0x1a0>
		p_reg->value <<= 8;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	021a      	lsls	r2, r3, #8
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	605a      	str	r2, [r3, #4]
		p_reg->value += buffer[i];
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800116a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800116e:	440a      	add	r2, r1
 8001170:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001174:	441a      	add	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	605a      	str	r2, [r3, #4]
	for(i = 1; i < p_reg->size + 1; i++) {
 800117a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800117e:	3301      	adds	r3, #1
 8001180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001184:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	3301      	adds	r3, #1
 800118e:	429a      	cmp	r2, r3
 8001190:	dbe2      	blt.n	8001158 <ad7124_no_check_read_register+0x174>
	}

	return ret;
 8001192:	69fb      	ldr	r3, [r7, #28]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <ad7124_no_check_write_register>:
 *
 * @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t ad7124_no_check_write_register(struct ad7124_dev *dev,
				       struct ad7124_st_reg reg)
{
 800119c:	b084      	sub	sp, #16
 800119e:	b580      	push	{r7, lr}
 80011a0:	b088      	sub	sp, #32
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80011aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
	int32_t reg_value = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
	uint8_t wr_buf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
	uint8_t i = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	76fb      	strb	r3, [r7, #27]
	uint8_t crc8 = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	74fb      	strb	r3, [r7, #19]

	if(!dev)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <ad7124_no_check_write_register+0x38>
		return INVALID_VAL;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e04e      	b.n	8001272 <ad7124_no_check_write_register+0xd6>

	/* Build the Command word */
	wr_buf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_WR |
		    AD7124_COMM_REG_RA(reg.addr);
 80011d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	wr_buf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_WR |
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	723b      	strb	r3, [r7, #8]

	/* Fill the write buffer */
	reg_value = reg.value;
 80011e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e2:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < reg.size; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	76fb      	strb	r3, [r7, #27]
 80011e8:	e00f      	b.n	800120a <ad7124_no_check_write_register+0x6e>
		wr_buf[reg.size - i] = reg_value & 0xFF;
 80011ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011ec:	7efb      	ldrb	r3, [r7, #27]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f107 0120 	add.w	r1, r7, #32
 80011f8:	440b      	add	r3, r1
 80011fa:	f803 2c18 	strb.w	r2, [r3, #-24]
		reg_value >>= 8;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	121b      	asrs	r3, r3, #8
 8001202:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < reg.size; i++) {
 8001204:	7efb      	ldrb	r3, [r7, #27]
 8001206:	3301      	adds	r3, #1
 8001208:	76fb      	strb	r3, [r7, #27]
 800120a:	7efa      	ldrb	r2, [r7, #27]
 800120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120e:	429a      	cmp	r2, r3
 8001210:	dbeb      	blt.n	80011ea <ad7124_no_check_write_register+0x4e>
	}

	/* Compute the CRC */
	if(dev->use_crc != AD7124_DISABLE_CRC) {
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d013      	beq.n	8001244 <ad7124_no_check_write_register+0xa8>
		crc8 = ad7124_compute_crc8(wr_buf, reg.size + 1);
 800121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3301      	adds	r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f97f 	bl	800152e <ad7124_compute_crc8>
 8001230:	4603      	mov	r3, r0
 8001232:	74fb      	strb	r3, [r7, #19]
		wr_buf[reg.size + 1] = crc8;
 8001234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001236:	3301      	adds	r3, #1
 8001238:	f107 0220 	add.w	r2, r7, #32
 800123c:	4413      	add	r3, r2
 800123e:	7cfa      	ldrb	r2, [r7, #19]
 8001240:	f803 2c18 	strb.w	r2, [r3, #-24]
	}

	/* Write data to the device */
	ret = spi_write_and_read(dev->spi_desc,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6818      	ldr	r0, [r3, #0]
				 wr_buf,
				 (dev->use_crc != AD7124_DISABLE_CRC) ? reg.size + 2
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	ret = spi_write_and_read(dev->spi_desc,
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <ad7124_no_check_write_register+0xc0>
				 (dev->use_crc != AD7124_DISABLE_CRC) ? reg.size + 2
 8001252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001254:	b2db      	uxtb	r3, r3
	ret = spi_write_and_read(dev->spi_desc,
 8001256:	3302      	adds	r3, #2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	e003      	b.n	8001264 <ad7124_no_check_write_register+0xc8>
				 : reg.size + 1);
 800125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125e:	b2db      	uxtb	r3, r3
	ret = spi_write_and_read(dev->spi_desc,
 8001260:	3301      	adds	r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f107 0108 	add.w	r1, r7, #8
 8001268:	461a      	mov	r2, r3
 800126a:	f001 fa93 	bl	8002794 <spi_write_and_read>
 800126e:	6178      	str	r0, [r7, #20]

	return ret;
 8001270:	697b      	ldr	r3, [r7, #20]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800127c:	b004      	add	sp, #16
 800127e:	4770      	bx	lr

08001280 <ad7124_read_register>:
 *
 * @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t ad7124_read_register(struct ad7124_dev *dev,
			     struct ad7124_st_reg* p_reg)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	int32_t ret;

	if (p_reg->addr != AD7124_ERR_REG && dev->check_ready) {
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b06      	cmp	r3, #6
 8001290:	d011      	beq.n	80012b6 <ad7124_read_register+0x36>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00c      	beq.n	80012b6 <ad7124_read_register+0x36>
		ret = ad7124_wait_for_spi_ready(dev,
						dev->spi_rdy_poll_cnt);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		ret = ad7124_wait_for_spi_ready(dev,
 80012a2:	4619      	mov	r1, r3
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f86f 	bl	8001388 <ad7124_wait_for_spi_ready>
 80012aa:	60f8      	str	r0, [r7, #12]
		if (ret < 0)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da01      	bge.n	80012b6 <ad7124_read_register+0x36>
			return ret;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	e005      	b.n	80012c2 <ad7124_read_register+0x42>
	}
	ret = ad7124_no_check_read_register(dev,
 80012b6:	6839      	ldr	r1, [r7, #0]
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fe93 	bl	8000fe4 <ad7124_no_check_read_register>
 80012be:	60f8      	str	r0, [r7, #12]
					    p_reg);

	return ret;
 80012c0:	68fb      	ldr	r3, [r7, #12]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <ad7124_write_register>:
 *
 * @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t ad7124_write_register(struct ad7124_dev *dev,
			      struct ad7124_st_reg p_reg)
{
 80012ca:	b084      	sub	sp, #16
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	f107 001c 	add.w	r0, r7, #28
 80012d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret;

	if (dev->check_ready) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00c      	beq.n	8001300 <ad7124_write_register+0x36>
		ret = ad7124_wait_for_spi_ready(dev,
						dev->spi_rdy_poll_cnt);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		ret = ad7124_wait_for_spi_ready(dev,
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f84a 	bl	8001388 <ad7124_wait_for_spi_ready>
 80012f4:	60f8      	str	r0, [r7, #12]
		if (ret < 0)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	da01      	bge.n	8001300 <ad7124_write_register+0x36>
			return ret;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	e009      	b.n	8001314 <ad7124_write_register+0x4a>
	}
	ret = ad7124_no_check_write_register(dev,
 8001300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ff46 	bl	800119c <ad7124_no_check_write_register>
 8001310:	60f8      	str	r0, [r7, #12]
					     p_reg);

	return ret;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800131e:	b004      	add	sp, #16
 8001320:	4770      	bx	lr
	...

08001324 <ad7124_reset>:
 * @param dev - The handler of the instance of the driver.
 *
 * @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t ad7124_reset(struct ad7124_dev *dev)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
	uint8_t wr_buf[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <ad7124_reset+0x60>)
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800133a:	e883 0003 	stmia.w	r3, {r0, r1}

	if(!dev)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <ad7124_reset+0x26>
		return INVALID_VAL;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	e017      	b.n	800137a <ad7124_reset+0x56>

	ret = spi_write_and_read(dev->spi_desc,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	2208      	movs	r2, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fa1d 	bl	8002794 <spi_write_and_read>
 800135a:	6178      	str	r0, [r7, #20]
				 wr_buf,
				 8);

	/* This is to ensure the CRC is disabled after reset */
	dev->use_crc = AD7124_DISABLE_CRC;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	811a      	strh	r2, [r3, #8]

	/* Wait for the reset to complete */
	ret = ad7124_wait_to_power_on(dev,
				      dev->spi_rdy_poll_cnt);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	ret = ad7124_wait_to_power_on(dev,
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f849 	bl	8001402 <ad7124_wait_to_power_on>
 8001370:	6178      	str	r0, [r7, #20]

	mdelay(AD7124_POST_RESET_DELAY);
 8001372:	2004      	movs	r0, #4
 8001374:	f001 fa44 	bl	8002800 <mdelay>

	return ret;
 8001378:	697b      	ldr	r3, [r7, #20]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	080084a8 	.word	0x080084a8

08001388 <ad7124_wait_for_spi_ready>:
 *
 * @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t ad7124_wait_for_spi_ready(struct ad7124_dev *dev,
				  uint32_t timeout)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	struct ad7124_st_reg *regs;
	int32_t ret;
	int8_t ready = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	75fb      	strb	r3, [r7, #23]

	if(!dev)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <ad7124_wait_for_spi_ready+0x1a>
		return INVALID_VAL;
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	e02b      	b.n	80013fa <ad7124_wait_for_spi_ready+0x72>

	regs = dev->regs;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	613b      	str	r3, [r7, #16]

	while(!ready && --timeout) {
 80013a8:	e016      	b.n	80013d8 <ad7124_wait_for_spi_ready+0x50>
		/* Read the value of the Error Register */
		ret = ad7124_read_register(dev, &regs[AD7124_Error]);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	3360      	adds	r3, #96	; 0x60
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff65 	bl	8001280 <ad7124_read_register>
 80013b6:	60f8      	str	r0, [r7, #12]
		if(ret < 0)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da01      	bge.n	80013c2 <ad7124_wait_for_spi_ready+0x3a>
			return ret;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	e01b      	b.n	80013fa <ad7124_wait_for_spi_ready+0x72>

		/* Check the SPI IGNORE Error bit in the Error Register */
		ready = (regs[AD7124_Error].value &
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	3360      	adds	r3, #96	; 0x60
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
			 AD7124_ERR_REG_SPI_IGNORE_ERR) == 0;
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf0c      	ite	eq
 80013d0:	2301      	moveq	r3, #1
 80013d2:	2300      	movne	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
		ready = (regs[AD7124_Error].value &
 80013d6:	75fb      	strb	r3, [r7, #23]
	while(!ready && --timeout) {
 80013d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <ad7124_wait_for_spi_ready+0x64>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1de      	bne.n	80013aa <ad7124_wait_for_spi_ready+0x22>
	}
	return timeout ? 0 : TIMEOUT;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <ad7124_wait_for_spi_ready+0x6e>
 80013f2:	2300      	movs	r3, #0
 80013f4:	e001      	b.n	80013fa <ad7124_wait_for_spi_ready+0x72>
 80013f6:	f06f 0302 	mvn.w	r3, #2
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <ad7124_wait_to_power_on>:
 * @return Returns 0 for success or negative error code.
*******************************************************************************/

int32_t ad7124_wait_to_power_on(struct ad7124_dev *dev,
				uint32_t timeout)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
	struct ad7124_st_reg *regs;
	int32_t ret;
	int8_t powered_on = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	75fb      	strb	r3, [r7, #23]

	if(!dev)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <ad7124_wait_to_power_on+0x1a>
		return INVALID_VAL;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e02b      	b.n	8001474 <ad7124_wait_to_power_on+0x72>

	regs = dev->regs;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	613b      	str	r3, [r7, #16]

	while(!powered_on && timeout--) {
 8001422:	e013      	b.n	800144c <ad7124_wait_to_power_on+0x4a>
		ret = ad7124_read_register(dev,
 8001424:	6939      	ldr	r1, [r7, #16]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ff2a 	bl	8001280 <ad7124_read_register>
 800142c:	60f8      	str	r0, [r7, #12]
					   &regs[AD7124_Status]);
		if(ret < 0)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	da01      	bge.n	8001438 <ad7124_wait_to_power_on+0x36>
			return ret;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	e01d      	b.n	8001474 <ad7124_wait_to_power_on+0x72>

		/* Check the POR_FLAG bit in the Status Register */
		powered_on = (regs[AD7124_Status].value &
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0310 	and.w	r3, r3, #16
			      AD7124_STATUS_REG_POR_FLAG) == 0;
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf0c      	ite	eq
 8001444:	2301      	moveq	r3, #1
 8001446:	2300      	movne	r3, #0
 8001448:	b2db      	uxtb	r3, r3
		powered_on = (regs[AD7124_Status].value &
 800144a:	75fb      	strb	r3, [r7, #23]
	while(!powered_on && timeout--) {
 800144c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d104      	bne.n	800145e <ad7124_wait_to_power_on+0x5c>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	603a      	str	r2, [r7, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1e2      	bne.n	8001424 <ad7124_wait_to_power_on+0x22>
	}
	return (timeout || powered_on) ? 0 : TIMEOUT;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d103      	bne.n	800146c <ad7124_wait_to_power_on+0x6a>
 8001464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <ad7124_wait_to_power_on+0x6e>
 800146c:	2300      	movs	r3, #0
 800146e:	e001      	b.n	8001474 <ad7124_wait_to_power_on+0x72>
 8001470:	f06f 0302 	mvn.w	r3, #2
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <ad7124_wait_for_conv_ready>:
 *
 * @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t ad7124_wait_for_conv_ready(struct ad7124_dev *dev,
				   uint32_t timeout)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	struct ad7124_st_reg *regs;
	int32_t ret;
	int8_t ready = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]

	if(!dev)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <ad7124_wait_for_conv_ready+0x1a>
		return INVALID_VAL;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	e028      	b.n	80014e8 <ad7124_wait_for_conv_ready+0x6c>

	regs = dev->regs;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	613b      	str	r3, [r7, #16]

	while(!ready && --timeout) {
 800149c:	e013      	b.n	80014c6 <ad7124_wait_for_conv_ready+0x4a>
		/* Read the value of the Status Register */
		ret = ad7124_read_register(dev, &regs[AD7124_Status]);
 800149e:	6939      	ldr	r1, [r7, #16]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff feed 	bl	8001280 <ad7124_read_register>
 80014a6:	60f8      	str	r0, [r7, #12]
		if(ret < 0)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da01      	bge.n	80014b2 <ad7124_wait_for_conv_ready+0x36>
			return ret;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	e01a      	b.n	80014e8 <ad7124_wait_for_conv_ready+0x6c>

		/* Check the RDY bit in the Status Register */
		ready = (regs[AD7124_Status].value &
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
			 AD7124_STATUS_REG_RDY) == 0;
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf0c      	ite	eq
 80014be:	2301      	moveq	r3, #1
 80014c0:	2300      	movne	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
		ready = (regs[AD7124_Status].value &
 80014c4:	75fb      	strb	r3, [r7, #23]
	while(!ready && --timeout) {
 80014c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <ad7124_wait_for_conv_ready+0x5e>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1e1      	bne.n	800149e <ad7124_wait_for_conv_ready+0x22>
	}

	return timeout ? 0 : TIMEOUT;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <ad7124_wait_for_conv_ready+0x68>
 80014e0:	2300      	movs	r3, #0
 80014e2:	e001      	b.n	80014e8 <ad7124_wait_for_conv_ready+0x6c>
 80014e4:	f06f 0302 	mvn.w	r3, #2
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <ad7124_read_data>:
 *
 * @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t ad7124_read_data(struct ad7124_dev *dev,
			 int32_t* p_data)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	struct ad7124_st_reg *regs;
	int32_t ret;

	if(!dev)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <ad7124_read_data+0x16>
		return INVALID_VAL;
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	e00f      	b.n	8001526 <ad7124_read_data+0x36>

	regs = dev->regs;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	60fb      	str	r3, [r7, #12]

	/* Read the value of the Status Register */
	ret = ad7124_read_register(dev, &regs[AD7124_Data]);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3320      	adds	r3, #32
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff feb4 	bl	8001280 <ad7124_read_register>
 8001518:	60b8      	str	r0, [r7, #8]

	/* Get the read result */
	*p_data = regs[AD7124_Data].value;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3320      	adds	r3, #32
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	601a      	str	r2, [r3, #0]

	return ret;
 8001524:	68bb      	ldr	r3, [r7, #8]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <ad7124_compute_crc8>:
 * @param buf_size - Data buffer size in bytes
 *
 * @return Returns the computed CRC checksum.
*******************************************************************************/
uint8_t ad7124_compute_crc8(uint8_t * p_buf, uint8_t buf_size)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
	uint8_t crc = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	73bb      	strb	r3, [r7, #14]

	while(buf_size) {
 8001542:	e02c      	b.n	800159e <ad7124_compute_crc8+0x70>
		for(i = 0x80; i != 0; i >>= 1) {
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e020      	b.n	800158c <ad7124_compute_crc8+0x5e>
			if(((crc & 0x80) != 0) != ((*p_buf & i) != 0)) { /* MSB of CRC register XOR input Bit from Data */
 800154a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	09db      	lsrs	r3, r3, #7
 8001552:	b2da      	uxtb	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7819      	ldrb	r1, [r3, #0]
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	400b      	ands	r3, r1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4053      	eors	r3, r2
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <ad7124_compute_crc8+0x52>
				crc <<= 1;
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	73bb      	strb	r3, [r7, #14]
				crc ^= AD7124_CRC8_POLYNOMIAL_REPRESENTATION;
 8001576:	7bbb      	ldrb	r3, [r7, #14]
 8001578:	f083 0307 	eor.w	r3, r3, #7
 800157c:	73bb      	strb	r3, [r7, #14]
 800157e:	e002      	b.n	8001586 <ad7124_compute_crc8+0x58>
			} else {
				crc <<= 1;
 8001580:	7bbb      	ldrb	r3, [r7, #14]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	73bb      	strb	r3, [r7, #14]
		for(i = 0x80; i != 0; i >>= 1) {
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1db      	bne.n	800154a <ad7124_compute_crc8+0x1c>
			}
		}
		p_buf++;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3301      	adds	r3, #1
 8001596:	607b      	str	r3, [r7, #4]
		buf_size--;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	3b01      	subs	r3, #1
 800159c:	70fb      	strb	r3, [r7, #3]
	while(buf_size) {
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1cf      	bne.n	8001544 <ad7124_compute_crc8+0x16>
	}
	return crc;
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <ad7124_update_crcsetting>:
 * @param dev - The handler of the instance of the driver.
 *
 * @return None.
*******************************************************************************/
void ad7124_update_crcsetting(struct ad7124_dev *dev)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	struct ad7124_st_reg *regs;

	if(!dev)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d011      	beq.n	80015e2 <ad7124_update_crcsetting+0x32>
		return;

	regs = dev->regs;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	60fb      	str	r3, [r7, #12]

	/* Get CRC State. */
	if (regs[AD7124_Error_En].value & AD7124_ERREN_REG_SPI_CRC_ERR_EN) {
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3370      	adds	r3, #112	; 0x70
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <ad7124_update_crcsetting+0x2a>
		dev->use_crc = AD7124_USE_CRC;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	811a      	strh	r2, [r3, #8]
 80015d8:	e004      	b.n	80015e4 <ad7124_update_crcsetting+0x34>
	} else {
		dev->use_crc = AD7124_DISABLE_CRC;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	811a      	strh	r2, [r3, #8]
 80015e0:	e000      	b.n	80015e4 <ad7124_update_crcsetting+0x34>
		return;
 80015e2:	bf00      	nop
	}
}
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <ad7124_update_dev_spi_settings>:
 * @param dev - The handler of the instance of the driver.
 *
 * @return None.
*******************************************************************************/
void ad7124_update_dev_spi_settings(struct ad7124_dev *dev)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	struct ad7124_st_reg *regs;

	if(!dev)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d011      	beq.n	800161e <ad7124_update_dev_spi_settings+0x32>
		return;

	regs = dev->regs;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]

	if (regs[AD7124_Error_En].value & AD7124_ERREN_REG_SPI_IGNORE_ERR_EN) {
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3370      	adds	r3, #112	; 0x70
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <ad7124_update_dev_spi_settings+0x2a>
		dev->check_ready = 1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	815a      	strh	r2, [r3, #10]
 8001614:	e004      	b.n	8001620 <ad7124_update_dev_spi_settings+0x34>
	} else {
		dev->check_ready = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	815a      	strh	r2, [r3, #10]
 800161c:	e000      	b.n	8001620 <ad7124_update_dev_spi_settings+0x34>
		return;
 800161e:	bf00      	nop
	}
}
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <ad7124_setup>:
 *
 * @return Returns 0 for success or negative error code.
*******************************************************************************/
int32_t ad7124_setup(struct ad7124_dev **device,
		     struct ad7124_init_param init_param)
{
 8001628:	b084      	sub	sp, #16
 800162a:	b580      	push	{r7, lr}
 800162c:	b088      	sub	sp, #32
 800162e:	af02      	add	r7, sp, #8
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret;
	enum ad7124_registers reg_nr;
	struct ad7124_dev *dev;

	dev = (struct ad7124_dev *)malloc(sizeof(*dev));
 800163a:	2010      	movs	r0, #16
 800163c:	f004 fa2c 	bl	8005a98 <malloc>
 8001640:	4603      	mov	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]
	if (!dev)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <ad7124_setup+0x28>
		return INVALID_VAL;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e051      	b.n	80016f4 <ad7124_setup+0xcc>

	dev->regs = init_param.regs;
 8001650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	605a      	str	r2, [r3, #4]
	dev->spi_rdy_poll_cnt = init_param.spi_rdy_poll_cnt;
 8001656:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	819a      	strh	r2, [r3, #12]

	/* Initialize the SPI communication. */
	ret = spi_init(&dev->spi_desc, &init_param.spi_init);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f001 f87e 	bl	8002768 <spi_init>
 800166c:	6178      	str	r0, [r7, #20]
	if (ret < 0)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da01      	bge.n	8001678 <ad7124_setup+0x50>
		return ret;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	e03d      	b.n	80016f4 <ad7124_setup+0xcc>

	/*  Reset the device interface.*/
	ret = ad7124_reset(dev);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff fe53 	bl	8001324 <ad7124_reset>
 800167e:	6178      	str	r0, [r7, #20]
	if (ret < 0)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	da01      	bge.n	800168a <ad7124_setup+0x62>
		return ret;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	e034      	b.n	80016f4 <ad7124_setup+0xcc>

	/* Update the device structure with power-on/reset settings */
	dev->check_ready = 1;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	815a      	strh	r2, [r3, #10]

	/* Initialize registers AD7124_ADC_Control through AD7124_Filter_7. */
	for(reg_nr = AD7124_Status; (reg_nr < AD7124_Offset_0) && !(ret < 0);
 8001690:	2300      	movs	r3, #0
 8001692:	74fb      	strb	r3, [r7, #19]
 8001694:	e022      	b.n	80016dc <ad7124_setup+0xb4>
	    reg_nr++) {
		if (dev->regs[reg_nr].rw == AD7124_RW) {
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	7cfb      	ldrb	r3, [r7, #19]
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4413      	add	r3, r2
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d10e      	bne.n	80016c4 <ad7124_setup+0x9c>
			ret = ad7124_write_register(dev, dev->regs[reg_nr]);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	7cfb      	ldrb	r3, [r7, #19]
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	9200      	str	r2, [sp, #0]
 80016b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7ff fe07 	bl	80012ca <ad7124_write_register>
 80016bc:	6178      	str	r0, [r7, #20]
			if (ret < 0)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db12      	blt.n	80016ea <ad7124_setup+0xc2>
				break;
		}

		/* Get CRC State and device SPI interface settings */
		if (reg_nr == AD7124_Error_En) {
 80016c4:	7cfb      	ldrb	r3, [r7, #19]
 80016c6:	2b07      	cmp	r3, #7
 80016c8:	d105      	bne.n	80016d6 <ad7124_setup+0xae>
			ad7124_update_crcsetting(dev);
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f7ff ff70 	bl	80015b0 <ad7124_update_crcsetting>
			ad7124_update_dev_spi_settings(dev);
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff ff8b 	bl	80015ec <ad7124_update_dev_spi_settings>
	    reg_nr++) {
 80016d6:	7cfb      	ldrb	r3, [r7, #19]
 80016d8:	3301      	adds	r3, #1
 80016da:	74fb      	strb	r3, [r7, #19]
	for(reg_nr = AD7124_Status; (reg_nr < AD7124_Offset_0) && !(ret < 0);
 80016dc:	7cfb      	ldrb	r3, [r7, #19]
 80016de:	2b28      	cmp	r3, #40	; 0x28
 80016e0:	d804      	bhi.n	80016ec <ad7124_setup+0xc4>
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	dad6      	bge.n	8001696 <ad7124_setup+0x6e>
 80016e8:	e000      	b.n	80016ec <ad7124_setup+0xc4>
				break;
 80016ea:	bf00      	nop
		}
	}

	*device = dev;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	601a      	str	r2, [r3, #0]

	return ret;
 80016f2:	697b      	ldr	r3, [r7, #20]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016fe:	b004      	add	sp, #16
 8001700:	4770      	bx	lr

08001702 <ad7124_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad7124_remove(struct ad7124_dev *dev)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f001 f835 	bl	800277e <spi_remove>
 8001714:	60f8      	str	r0, [r7, #12]

	free(dev);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f004 f9c6 	bl	8005aa8 <free>

	return ret;
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <ad7124_app_initialize>:
 * @details    This resets and then writes the default register map value to
 *  		   the device.  A call to init the SPI port is made, but may not
 *  		   actually do very much, depending on the platform
 */
int32_t ad7124_app_initialize(uint8_t configID)
{
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af04      	add	r7, sp, #16
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	/*
	 * Copy one of the default/user configs to the live register memory map
	 * Requirement, not checked here, is that all the configs are the same size
	 */
	switch(configID) {
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <ad7124_app_initialize+0x16>
 8001738:	2b01      	cmp	r3, #1
 800173a:	d00a      	beq.n	8001752 <ad7124_app_initialize+0x2a>
 800173c:	e013      	b.n	8001766 <ad7124_app_initialize+0x3e>
		case AD7124_CONFIG_A:
		{
			memcpy(ad7124_register_map, ad7124_regs_config_a, sizeof(ad7124_register_map));
 800173e:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <ad7124_app_initialize+0x7c>)
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <ad7124_app_initialize+0x80>)
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 7364 	mov.w	r3, #912	; 0x390
 800174a:	461a      	mov	r2, r3
 800174c:	f004 f9c6 	bl	8005adc <memcpy>
			break;
 8001750:	e00c      	b.n	800176c <ad7124_app_initialize+0x44>
		}
		case AD7124_CONFIG_B:
		{
			memcpy(ad7124_register_map, ad7124_regs_config_b, sizeof(ad7124_register_map));
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <ad7124_app_initialize+0x7c>)
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <ad7124_app_initialize+0x84>)
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 7364 	mov.w	r3, #912	; 0x390
 800175e:	461a      	mov	r2, r3
 8001760:	f004 f9bc 	bl	8005adc <memcpy>
			break;
 8001764:	e002      	b.n	800176c <ad7124_app_initialize+0x44>
		}
		default:
			// Not a defined configID
			return(FAILURE);
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e017      	b.n	800179c <ad7124_app_initialize+0x74>
	}

	// Used to create the ad7124 device
    struct	ad7124_init_param sAd7124_init =
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <ad7124_app_initialize+0x88>)
 800176e:	f107 0408 	add.w	r4, r7, #8
 8001772:	461d      	mov	r5, r3
 8001774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001778:	e895 0003 	ldmia.w	r5, {r0, r1}
 800177c:	e884 0003 	stmia.w	r4, {r0, r1}
  		ad7124_register_map,

  		10000				// Retry count for polling
  	};

  return(ad7124_setup(&pAd7124_dev, sAd7124_init));
 8001780:	466c      	mov	r4, sp
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800178a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <ad7124_app_initialize+0x8c>)
 8001796:	f7ff ff47 	bl	8001628 <ad7124_setup>
 800179a:	4603      	mov	r3, r0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	20000624 	.word	0x20000624
 80017a8:	08008a48 	.word	0x08008a48
 80017ac:	08008dd8 	.word	0x08008dd8
 80017b0:	080084b0 	.word	0x080084b0
 80017b4:	200009b4 	.word	0x200009b4

080017b8 <was_escape_key_pressed>:
 * @brief      determines if the Escape key was pressed
 *
 * @details
 */
static bool was_escape_key_pressed(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	char rxChar;
	bool wasPressed = false;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	// Check for Escape key pressed
	if ((rxChar = getchar_nonblocking()) > 0) {
 80017c2:	f001 f841 	bl	8002848 <getchar_nonblocking>
 80017c6:	4603      	mov	r3, r0
 80017c8:	71bb      	strb	r3, [r7, #6]
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <was_escape_key_pressed+0x22>
		if (rxChar == ESCAPE_KEY_CODE) {
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	2b1b      	cmp	r3, #27
 80017d4:	d101      	bne.n	80017da <was_escape_key_pressed+0x22>
			wasPressed = true;
 80017d6:	2301      	movs	r3, #1
 80017d8:	71fb      	strb	r3, [r7, #7]
		}
	}
	return (wasPressed);
 80017da:	79fb      	ldrb	r3, [r7, #7]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <read_status_register>:
 * @brief      reads and displays the status register on the AD7124
 *
 * @details
 */
static void read_status_register(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	if (ad7124_read_register(pAd7124_dev, &ad7124_register_map[AD7124_Status]) < 0) {
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <read_status_register+0x38>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	490c      	ldr	r1, [pc, #48]	; (8001820 <read_status_register+0x3c>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fd45 	bl	8001280 <ad7124_read_register>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da03      	bge.n	8001804 <read_status_register+0x20>
	   printf("\r\nError Encountered reading Status register\r\n");
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <read_status_register+0x40>)
 80017fe:	f004 feff 	bl	8006600 <puts>
	} else {
	    uint32_t status_value = (uint32_t)ad7124_register_map[AD7124_Status].value;
        printf("\r\nRead Status Register = 0x%02lx\r\n", status_value);
	}
}
 8001802:	e006      	b.n	8001812 <read_status_register+0x2e>
	    uint32_t status_value = (uint32_t)ad7124_register_map[AD7124_Status].value;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <read_status_register+0x3c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	607b      	str	r3, [r7, #4]
        printf("\r\nRead Status Register = 0x%02lx\r\n", status_value);
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4806      	ldr	r0, [pc, #24]	; (8001828 <read_status_register+0x44>)
 800180e:	f004 fe6f 	bl	80064f0 <iprintf>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200009b4 	.word	0x200009b4
 8001820:	20000624 	.word	0x20000624
 8001824:	080084c8 	.word	0x080084c8
 8001828:	080084f8 	.word	0x080084f8

0800182c <dislay_channel_samples>:
 *
 * @param showOnlyEnabledChannels  only channels that are enabled are displayed
 *
 */
static void dislay_channel_samples(bool showOnlyEnabledChannels, uint8_t console_mode)
{
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	b087      	sub	sp, #28
 8001830:	af02      	add	r7, sp, #8
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
	switch(console_mode) {
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <dislay_channel_samples+0x1c>
 8001842:	2b01      	cmp	r3, #1
 8001844:	d040      	beq.n	80018c8 <dislay_channel_samples+0x9c>
		default:
		{
			// ASSERT(false);
		}
	}
}
 8001846:	e07c      	b.n	8001942 <dislay_channel_samples+0x116>
			printf("\tCh\tValue\t\tCount\t\tVoltage\r\n");
 8001848:	4840      	ldr	r0, [pc, #256]	; (800194c <dislay_channel_samples+0x120>)
 800184a:	f004 fed9 	bl	8006600 <puts>
			for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e035      	b.n	80018c0 <dislay_channel_samples+0x94>
				if ((showOnlyEnabledChannels == false) || (ad7124_register_map[AD7124_Channel_0 + i].value & AD7124_CH_MAP_REG_CH_ENABLE) ) {
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f083 0301 	eor.w	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10a      	bne.n	8001876 <dislay_channel_samples+0x4a>
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	3309      	adds	r3, #9
 8001864:	4a3a      	ldr	r2, [pc, #232]	; (8001950 <dislay_channel_samples+0x124>)
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	3304      	adds	r3, #4
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d021      	beq.n	80018ba <dislay_channel_samples+0x8e>
				   printf("\t%-2d\t%-10ld\t%ld\t\t% .6f\r\n", \
 8001876:	7bfd      	ldrb	r5, [r7, #15]
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	4a36      	ldr	r2, [pc, #216]	; (8001954 <dislay_channel_samples+0x128>)
 800187c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	4a35      	ldr	r2, [pc, #212]	; (8001958 <dislay_channel_samples+0x12c>)
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	603b      	str	r3, [r7, #0]
							ad7124_convert_sample_to_voltage(pAd7124_dev, i, channel_samples[i]) );
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <dislay_channel_samples+0x130>)
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	4a30      	ldr	r2, [pc, #192]	; (8001954 <dislay_channel_samples+0x128>)
 8001892:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	4619      	mov	r1, r3
 800189a:	f000 fbad 	bl	8001ff8 <ad7124_convert_sample_to_voltage>
 800189e:	4603      	mov	r3, r0
				   printf("\t%-2d\t%-10ld\t%ld\t\t% .6f\r\n", \
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fdc1 	bl	8000428 <__aeabi_f2d>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	e9cd 3400 	strd	r3, r4, [sp]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	4632      	mov	r2, r6
 80018b2:	4629      	mov	r1, r5
 80018b4:	482a      	ldr	r0, [pc, #168]	; (8001960 <dislay_channel_samples+0x134>)
 80018b6:	f004 fe1b 	bl	80064f0 <iprintf>
			for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	3301      	adds	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	d9c6      	bls.n	8001854 <dislay_channel_samples+0x28>
			break;
 80018c6:	e03c      	b.n	8001942 <dislay_channel_samples+0x116>
			bool channel_printed = false;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73bb      	strb	r3, [r7, #14]
			for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	737b      	strb	r3, [r7, #13]
 80018d0:	e030      	b.n	8001934 <dislay_channel_samples+0x108>
				if ((showOnlyEnabledChannels == false) || (ad7124_register_map[AD7124_Channel_0 + i].value & AD7124_CH_MAP_REG_CH_ENABLE) ) {
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f083 0301 	eor.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <dislay_channel_samples+0xc8>
 80018de:	7b7b      	ldrb	r3, [r7, #13]
 80018e0:	3309      	adds	r3, #9
 80018e2:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <dislay_channel_samples+0x124>)
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	4413      	add	r3, r2
 80018e8:	3304      	adds	r3, #4
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01c      	beq.n	800192e <dislay_channel_samples+0x102>
				   if (channel_printed) {
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <dislay_channel_samples+0xd4>
					   printf(", ");
 80018fa:	481a      	ldr	r0, [pc, #104]	; (8001964 <dislay_channel_samples+0x138>)
 80018fc:	f004 fdf8 	bl	80064f0 <iprintf>
							ad7124_convert_sample_to_voltage(pAd7124_dev, i, channel_samples[i]) );
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <dislay_channel_samples+0x130>)
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	7b7b      	ldrb	r3, [r7, #13]
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <dislay_channel_samples+0x128>)
 8001908:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800190c:	7b7b      	ldrb	r3, [r7, #13]
 800190e:	4619      	mov	r1, r3
 8001910:	f000 fb72 	bl	8001ff8 <ad7124_convert_sample_to_voltage>
 8001914:	4603      	mov	r3, r0
					printf("%.6f", \
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd86 	bl	8000428 <__aeabi_f2d>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	4810      	ldr	r0, [pc, #64]	; (8001968 <dislay_channel_samples+0x13c>)
 8001926:	f004 fde3 	bl	80064f0 <iprintf>
					channel_printed = true;
 800192a:	2301      	movs	r3, #1
 800192c:	73bb      	strb	r3, [r7, #14]
			for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 800192e:	7b7b      	ldrb	r3, [r7, #13]
 8001930:	3301      	adds	r3, #1
 8001932:	737b      	strb	r3, [r7, #13]
 8001934:	7b7b      	ldrb	r3, [r7, #13]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	d9cb      	bls.n	80018d2 <dislay_channel_samples+0xa6>
			printf("\r\n");
 800193a:	480c      	ldr	r0, [pc, #48]	; (800196c <dislay_channel_samples+0x140>)
 800193c:	f004 fe60 	bl	8006600 <puts>
			break;
 8001940:	bf00      	nop
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194a:	bf00      	nop
 800194c:	0800851c 	.word	0x0800851c
 8001950:	20000624 	.word	0x20000624
 8001954:	200009b8 	.word	0x200009b8
 8001958:	200009f8 	.word	0x200009f8
 800195c:	200009b4 	.word	0x200009b4
 8001960:	08008538 	.word	0x08008538
 8001964:	08008554 	.word	0x08008554
 8001968:	08008558 	.word	0x08008558
 800196c:	08008560 	.word	0x08008560

08001970 <clear_channel_samples>:
 * @brief      resets the channelSampleCounts to zero
 *
 * @details
 */
static void clear_channel_samples(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 8001976:	2300      	movs	r3, #0
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	e00c      	b.n	8001996 <clear_channel_samples+0x26>
    	channel_samples[i] = 0;
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <clear_channel_samples+0x38>)
 8001980:	2100      	movs	r1, #0
 8001982:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	channel_samples_count[i] = 0;
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4a08      	ldr	r2, [pc, #32]	; (80019ac <clear_channel_samples+0x3c>)
 800198a:	2100      	movs	r1, #0
 800198c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	3301      	adds	r3, #1
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d9ef      	bls.n	800197c <clear_channel_samples+0xc>
    }
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200009b8 	.word	0x200009b8
 80019ac:	200009f8 	.word	0x200009f8

080019b0 <do_continuous_conversion>:
 * @details   The ADC is run in continuous mode, and all samples are acquired
 *            and assigned to the channel they come from. Escape key an be used
 *            to exit the loop
 */
static int32_t do_continuous_conversion(uint8_t display_mode)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	int32_t error_code;
	int32_t sample_data;

	// Clear the ADC CTRL MODE bits, has the effect of selecting continuous mode
    ad7124_register_map[AD7124_ADC_Control].value &= ~(AD7124_ADC_CTRL_REG_MODE(0xf));
 80019ba:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <do_continuous_conversion+0x164>)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 80019c2:	4a54      	ldr	r2, [pc, #336]	; (8001b14 <do_continuous_conversion+0x164>)
 80019c4:	6153      	str	r3, [r2, #20]
	if ( (error_code = ad7124_write_register(pAd7124_dev, ad7124_register_map[AD7124_ADC_Control]) ) < 0) {
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <do_continuous_conversion+0x168>)
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <do_continuous_conversion+0x164>)
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	9200      	str	r2, [sp, #0]
 80019d0:	3310      	adds	r3, #16
 80019d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d4:	f7ff fc79 	bl	80012ca <ad7124_write_register>
 80019d8:	6138      	str	r0, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da07      	bge.n	80019f0 <do_continuous_conversion+0x40>
		printf("Error (%ld) setting AD7124 Continuous conversion mode.\r\n", error_code);
 80019e0:	6939      	ldr	r1, [r7, #16]
 80019e2:	484e      	ldr	r0, [pc, #312]	; (8001b1c <do_continuous_conversion+0x16c>)
 80019e4:	f004 fd84 	bl	80064f0 <iprintf>
		adi_press_any_key_to_continue();
 80019e8:	f000 fc84 	bl	80022f4 <adi_press_any_key_to_continue>
		return(MENU_CONTINUE);
 80019ec:	2300      	movs	r3, #0
 80019ee:	e08d      	b.n	8001b0c <do_continuous_conversion+0x15c>
	}

	clear_channel_samples();
 80019f0:	f7ff ffbe 	bl	8001970 <clear_channel_samples>

	/*
	 *  If displaying data in stream form, want to output a channel header
	 */
	if (display_mode == DISPLAY_DATA_STREAM)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d173      	bne.n	8001ae2 <do_continuous_conversion+0x132>
	{
		bool channel_printed = false;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]

		for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 80019fe:	2300      	movs	r3, #0
 8001a00:	75bb      	strb	r3, [r7, #22]
 8001a02:	e01a      	b.n	8001a3a <do_continuous_conversion+0x8a>
		   // if showing all channels, or channel is enabled
			if (ad7124_register_map[AD7124_Channel_0 + i].value & AD7124_CH_MAP_REG_CH_ENABLE) {
 8001a04:	7dbb      	ldrb	r3, [r7, #22]
 8001a06:	3309      	adds	r3, #9
 8001a08:	4a42      	ldr	r2, [pc, #264]	; (8001b14 <do_continuous_conversion+0x164>)
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3304      	adds	r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <do_continuous_conversion+0x80>
				/*
				 *  add the comma before we output the next channel but
				 *  only if at least one channel has been printed
				 */
			   if (channel_printed) {
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <do_continuous_conversion+0x76>
				   printf(", ");
 8001a20:	483f      	ldr	r0, [pc, #252]	; (8001b20 <do_continuous_conversion+0x170>)
 8001a22:	f004 fd65 	bl	80064f0 <iprintf>
			   }
				printf("%d", i);
 8001a26:	7dbb      	ldrb	r3, [r7, #22]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	483e      	ldr	r0, [pc, #248]	; (8001b24 <do_continuous_conversion+0x174>)
 8001a2c:	f004 fd60 	bl	80064f0 <iprintf>
			}
			channel_printed = true;
 8001a30:	2301      	movs	r3, #1
 8001a32:	75fb      	strb	r3, [r7, #23]
		for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 8001a34:	7dbb      	ldrb	r3, [r7, #22]
 8001a36:	3301      	adds	r3, #1
 8001a38:	75bb      	strb	r3, [r7, #22]
 8001a3a:	7dbb      	ldrb	r3, [r7, #22]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d9e1      	bls.n	8001a04 <do_continuous_conversion+0x54>
		}
		printf("\r\n");
 8001a40:	4839      	ldr	r0, [pc, #228]	; (8001b28 <do_continuous_conversion+0x178>)
 8001a42:	f004 fddd 	bl	8006600 <puts>
	}

	// Continuously read the channels, and store sample values
    while (was_escape_key_pressed() != true) {
 8001a46:	e04c      	b.n	8001ae2 <do_continuous_conversion+0x132>
    	toggle_activity_led();
 8001a48:	f000 ff16 	bl	8002878 <toggle_activity_led>

    	if (display_mode == DISPLAY_DATA_TABULAR) {
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d104      	bne.n	8001a5c <do_continuous_conversion+0xac>
    		adi_clear_console();
 8001a52:	f000 fc45 	bl	80022e0 <adi_clear_console>
    		printf("Running continuous conversion mode...\r\nPress Escape to stop\r\n\r\n");
 8001a56:	4835      	ldr	r0, [pc, #212]	; (8001b2c <do_continuous_conversion+0x17c>)
 8001a58:	f004 fdd2 	bl	8006600 <puts>
		 *  Generally, no need to read STATUS separately, but for faster sampling
		 *  enabling the DATA_STATUS bit means that status is appended to ADC data read
		 *  so the channel being sampled is read back (and updated) as part of the same frame
		 */

    	if ( (error_code = ad7124_wait_for_conv_ready(pAd7124_dev, 10000)) < 0) {
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <do_continuous_conversion+0x168>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f242 7110 	movw	r1, #10000	; 0x2710
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fd09 	bl	800147c <ad7124_wait_for_conv_ready>
 8001a6a:	6138      	str	r0, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da04      	bge.n	8001a7c <do_continuous_conversion+0xcc>
    		printf("Error/Timeout waiting for conversion ready %ld\r\n", error_code);
 8001a72:	6939      	ldr	r1, [r7, #16]
 8001a74:	482e      	ldr	r0, [pc, #184]	; (8001b30 <do_continuous_conversion+0x180>)
 8001a76:	f004 fd3b 	bl	80064f0 <iprintf>
    		continue;
 8001a7a:	e032      	b.n	8001ae2 <do_continuous_conversion+0x132>
    	}

    	if ( (error_code = ad7124_read_data(pAd7124_dev, &sample_data)) < 0) {
 8001a7c:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <do_continuous_conversion+0x168>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f107 0208 	add.w	r2, r7, #8
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fd32 	bl	80014f0 <ad7124_read_data>
 8001a8c:	6138      	str	r0, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da04      	bge.n	8001a9e <do_continuous_conversion+0xee>
			printf("Error reading ADC Data (%ld).\r\n", error_code);
 8001a94:	6939      	ldr	r1, [r7, #16]
 8001a96:	4827      	ldr	r0, [pc, #156]	; (8001b34 <do_continuous_conversion+0x184>)
 8001a98:	f004 fd2a 	bl	80064f0 <iprintf>
			continue;
 8001a9c:	e021      	b.n	8001ae2 <do_continuous_conversion+0x132>
		}

		/*
		 * No error, need to process the sample, what channel has been read? update that channelSample
		 */
		uint8_t channel_read = ad7124_register_map[AD7124_Status].value & 0x0000000F;
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <do_continuous_conversion+0x164>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	73fb      	strb	r3, [r7, #15]

		if (channel_read < AD7124_CHANNEL_COUNT) {
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80e      	bhi.n	8001ace <do_continuous_conversion+0x11e>
			channel_samples[channel_read] = sample_data;
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <do_continuous_conversion+0x188>)
 8001ab8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			channel_samples_count[channel_read]++;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <do_continuous_conversion+0x18c>)
 8001ac0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ac4:	3201      	adds	r2, #1
 8001ac6:	491d      	ldr	r1, [pc, #116]	; (8001b3c <do_continuous_conversion+0x18c>)
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001acc:	e004      	b.n	8001ad8 <do_continuous_conversion+0x128>
		} else {
			printf("Channel Read was %d, which is not < AD7124_CHANNEL_COUNT\r\n", channel_read);
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481b      	ldr	r0, [pc, #108]	; (8001b40 <do_continuous_conversion+0x190>)
 8001ad4:	f004 fd0c 	bl	80064f0 <iprintf>
		}

		dislay_channel_samples(SHOW_ENABLED_CHANNELS, display_mode);
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	4619      	mov	r1, r3
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff fea5 	bl	800182c <dislay_channel_samples>
    while (was_escape_key_pressed() != true) {
 8001ae2:	f7ff fe69 	bl	80017b8 <was_escape_key_pressed>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1aa      	bne.n	8001a48 <do_continuous_conversion+0x98>
    }

    // All done, ADC put into standby mode
    ad7124_register_map[AD7124_ADC_Control].value &= ~(AD7124_ADC_CTRL_REG_MODE(0xf));
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <do_continuous_conversion+0x164>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8001afa:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <do_continuous_conversion+0x164>)
 8001afc:	6153      	str	r3, [r2, #20]
    // 2 = sleep/standby mode
    ad7124_register_map[AD7124_ADC_Control].value |= AD7124_ADC_CTRL_REG_MODE(2);
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <do_continuous_conversion+0x164>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <do_continuous_conversion+0x164>)
 8001b08:	6153      	str	r3, [r2, #20]

	return(MENU_CONTINUE);
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000624 	.word	0x20000624
 8001b18:	200009b4 	.word	0x200009b4
 8001b1c:	08008564 	.word	0x08008564
 8001b20:	08008554 	.word	0x08008554
 8001b24:	080085a0 	.word	0x080085a0
 8001b28:	08008560 	.word	0x08008560
 8001b2c:	080085a4 	.word	0x080085a4
 8001b30:	080085e4 	.word	0x080085e4
 8001b34:	08008618 	.word	0x08008618
 8001b38:	200009b8 	.word	0x200009b8
 8001b3c:	200009f8 	.word	0x200009f8
 8001b40:	08008638 	.word	0x08008638

08001b44 <menu_continuous_conversion_tabular>:
 * @brief      Samples all enabled channels and displays in tabular form
 *
 * @details
 */
static int32_t menu_continuous_conversion_tabular(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	do_continuous_conversion(DISPLAY_DATA_TABULAR);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff ff31 	bl	80019b0 <do_continuous_conversion>

	adi_clear_console();
 8001b4e:	f000 fbc7 	bl	80022e0 <adi_clear_console>
	printf("Continuous Conversion completed...\r\n\r\n");
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <menu_continuous_conversion_tabular+0x28>)
 8001b54:	f004 fd54 	bl	8006600 <puts>
	dislay_channel_samples(SHOW_ALL_CHANNELS, DISPLAY_DATA_TABULAR);
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff fe66 	bl	800182c <dislay_channel_samples>
	adi_press_any_key_to_continue();
 8001b60:	f000 fbc8 	bl	80022f4 <adi_press_any_key_to_continue>

	return(MENU_CONTINUE);
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	08008674 	.word	0x08008674

08001b70 <menu_continuous_conversion_stream>:
 * @brief      Samples all enabled channels and displays on the console
 *
 * @details
 */
static int32_t menu_continuous_conversion_stream(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	do_continuous_conversion(DISPLAY_DATA_STREAM);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff ff1b 	bl	80019b0 <do_continuous_conversion>
	printf("Continuous Conversion completed...\r\n\r\n");
 8001b7a:	4804      	ldr	r0, [pc, #16]	; (8001b8c <menu_continuous_conversion_stream+0x1c>)
 8001b7c:	f004 fd40 	bl	8006600 <puts>
	adi_press_any_key_to_continue();
 8001b80:	f000 fbb8 	bl	80022f4 <adi_press_any_key_to_continue>
	return(MENU_CONTINUE);
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	08008674 	.word	0x08008674

08001b90 <menu_single_conversion>:
 *             of data at a time. After capture, that channel is disabled, and
 *             single conversion run again, until no channels are enabled.
 *             The original enable state of each channel is then restored.
 */
static int32_t menu_single_conversion(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af02      	add	r7, sp, #8
	int32_t    error_code;
	uint16_t   channel_enable_mask = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	82fb      	strh	r3, [r7, #22]
	uint8_t    channel_count = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	757b      	strb	r3, [r7, #21]
	int32_t    sample_data;

	// Need to store which channels are enabled in this config so it can be restored
	for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	753b      	strb	r3, [r7, #20]
 8001ba2:	e01a      	b.n	8001bda <menu_single_conversion+0x4a>
		if (ad7124_register_map[AD7124_Channel_0 + i].value & AD7124_CH_MAP_REG_CH_ENABLE) {
 8001ba4:	7d3b      	ldrb	r3, [r7, #20]
 8001ba6:	3309      	adds	r3, #9
 8001ba8:	4a88      	ldr	r2, [pc, #544]	; (8001dcc <menu_single_conversion+0x23c>)
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00c      	beq.n	8001bd4 <menu_single_conversion+0x44>
			channel_enable_mask |= (1 << i);
 8001bba:	7d3b      	ldrb	r3, [r7, #20]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	82fb      	strh	r3, [r7, #22]
			channel_count++;
 8001bce:	7d7b      	ldrb	r3, [r7, #21]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	757b      	strb	r3, [r7, #21]
	for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 8001bd4:	7d3b      	ldrb	r3, [r7, #20]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	753b      	strb	r3, [r7, #20]
 8001bda:	7d3b      	ldrb	r3, [r7, #20]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d9e1      	bls.n	8001ba4 <menu_single_conversion+0x14>
		}
	}

	clear_channel_samples();
 8001be0:	f7ff fec6 	bl	8001970 <clear_channel_samples>
	adi_clear_console();
 8001be4:	f000 fb7c 	bl	80022e0 <adi_clear_console>
	printf("Running Single conversion mode...\r\nPress Escape to stop\r\n\r\n");
 8001be8:	4879      	ldr	r0, [pc, #484]	; (8001dd0 <menu_single_conversion+0x240>)
 8001bea:	f004 fd09 	bl	8006600 <puts>

	// Clear the ADC CTRL MODE bits, selecting continuous mode
    ad7124_register_map[AD7124_ADC_Control].value &= ~(AD7124_ADC_CTRL_REG_MODE(0xf));
 8001bee:	4b77      	ldr	r3, [pc, #476]	; (8001dcc <menu_single_conversion+0x23c>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8001bf6:	4a75      	ldr	r2, [pc, #468]	; (8001dcc <menu_single_conversion+0x23c>)
 8001bf8:	6153      	str	r3, [r2, #20]

	// read the channels, and store sample values
    for (uint8_t loopCount = 0; ((was_escape_key_pressed()!= true ) && (loopCount < channel_count)) ; loopCount++) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	74fb      	strb	r3, [r7, #19]
 8001bfe:	e083      	b.n	8001d08 <menu_single_conversion+0x178>
    	toggle_activity_led();
 8001c00:	f000 fe3a 	bl	8002878 <toggle_activity_led>

    	// 1 = single conversion mode
        ad7124_register_map[AD7124_ADC_Control].value |= AD7124_ADC_CTRL_REG_MODE(1);
 8001c04:	4b71      	ldr	r3, [pc, #452]	; (8001dcc <menu_single_conversion+0x23c>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	4a6f      	ldr	r2, [pc, #444]	; (8001dcc <menu_single_conversion+0x23c>)
 8001c0e:	6153      	str	r3, [r2, #20]

    	if ( (error_code = ad7124_write_register(pAd7124_dev, ad7124_register_map[AD7124_ADC_Control]) ) < 0) {
 8001c10:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <menu_single_conversion+0x244>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <menu_single_conversion+0x23c>)
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	9200      	str	r2, [sp, #0]
 8001c1a:	3310      	adds	r3, #16
 8001c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c1e:	f7ff fb54 	bl	80012ca <ad7124_write_register>
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da06      	bge.n	8001c38 <menu_single_conversion+0xa8>
    		printf("Error (%ld) setting AD7124 Single conversion mode.\r\n", error_code);
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	486a      	ldr	r0, [pc, #424]	; (8001dd8 <menu_single_conversion+0x248>)
 8001c2e:	f004 fc5f 	bl	80064f0 <iprintf>
    		adi_press_any_key_to_continue();
 8001c32:	f000 fb5f 	bl	80022f4 <adi_press_any_key_to_continue>
    		continue;
 8001c36:	e064      	b.n	8001d02 <menu_single_conversion+0x172>
        /*
         *  this polls the status register READY/ bit to determine when conversion is done
         *  this also ensures the STATUS register value is up to date and contains the
         *  channel that was sampled as well. No need to read STATUS separately
         */
    	if ( (error_code = ad7124_wait_for_conv_ready(pAd7124_dev, 10000)) < 0) {
 8001c38:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <menu_single_conversion+0x244>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fc1b 	bl	800147c <ad7124_wait_for_conv_ready>
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da04      	bge.n	8001c58 <menu_single_conversion+0xc8>
    		printf("Error/Timeout waiting for conversion ready %ld\r\n", error_code);
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	4862      	ldr	r0, [pc, #392]	; (8001ddc <menu_single_conversion+0x24c>)
 8001c52:	f004 fc4d 	bl	80064f0 <iprintf>
    		continue;
 8001c56:	e054      	b.n	8001d02 <menu_single_conversion+0x172>
    	}

    	if ( (error_code = ad7124_read_data(pAd7124_dev, &sample_data)) < 0) {
 8001c58:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <menu_single_conversion+0x244>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1d3a      	adds	r2, r7, #4
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fc45 	bl	80014f0 <ad7124_read_data>
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da04      	bge.n	8001c78 <menu_single_conversion+0xe8>
			printf("Error reading ADC Data (%ld).\r\n", error_code);
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	485b      	ldr	r0, [pc, #364]	; (8001de0 <menu_single_conversion+0x250>)
 8001c72:	f004 fc3d 	bl	80064f0 <iprintf>
			continue;
 8001c76:	e044      	b.n	8001d02 <menu_single_conversion+0x172>
		}
    	/*
		 * No error, need to process the sample, what channel has been read? update that channelSample
		 */
		uint8_t channelRead = ad7124_register_map[AD7124_Status].value & 0x0000000F;
 8001c78:	4b54      	ldr	r3, [pc, #336]	; (8001dcc <menu_single_conversion+0x23c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	72fb      	strb	r3, [r7, #11]

		if (channelRead < AD7124_CHANNEL_COUNT) {
 8001c84:	7afb      	ldrb	r3, [r7, #11]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	d836      	bhi.n	8001cf8 <menu_single_conversion+0x168>
			channel_samples[channelRead] = sample_data;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4a54      	ldr	r2, [pc, #336]	; (8001de4 <menu_single_conversion+0x254>)
 8001c92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			channel_samples_count[channelRead]++;
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	4a53      	ldr	r2, [pc, #332]	; (8001de8 <menu_single_conversion+0x258>)
 8001c9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c9e:	3201      	adds	r2, #1
 8001ca0:	4951      	ldr	r1, [pc, #324]	; (8001de8 <menu_single_conversion+0x258>)
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			/* also need to clear the channel enable bit so the next single conversion cycle will sample the next channel */
			ad7124_register_map[AD7124_Channel_0 + channelRead].value &= ~AD7124_CH_MAP_REG_CH_ENABLE;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	3309      	adds	r3, #9
 8001caa:	4a48      	ldr	r2, [pc, #288]	; (8001dcc <menu_single_conversion+0x23c>)
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
 8001cb6:	3309      	adds	r3, #9
 8001cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cbc:	4943      	ldr	r1, [pc, #268]	; (8001dcc <menu_single_conversion+0x23c>)
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	601a      	str	r2, [r3, #0]
			if ( (error_code = ad7124_write_register(pAd7124_dev, ad7124_register_map[AD7124_Channel_0 + channelRead]) ) < 0) {
 8001cc6:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <menu_single_conversion+0x244>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	7afb      	ldrb	r3, [r7, #11]
 8001ccc:	3309      	adds	r3, #9
 8001cce:	4a3f      	ldr	r2, [pc, #252]	; (8001dcc <menu_single_conversion+0x23c>)
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	9200      	str	r2, [sp, #0]
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	f7ff faf6 	bl	80012ca <ad7124_write_register>
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da0d      	bge.n	8001d02 <menu_single_conversion+0x172>
				printf("Error (%ld) Clearing channel %d Enable bit.\r\n", error_code, channelRead);
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68f9      	ldr	r1, [r7, #12]
 8001cec:	483f      	ldr	r0, [pc, #252]	; (8001dec <menu_single_conversion+0x25c>)
 8001cee:	f004 fbff 	bl	80064f0 <iprintf>
				adi_press_any_key_to_continue();
 8001cf2:	f000 faff 	bl	80022f4 <adi_press_any_key_to_continue>
				continue;
 8001cf6:	e004      	b.n	8001d02 <menu_single_conversion+0x172>
			}
		} else {
			printf("Channel Read was %d, which is not < AD7124_CHANNEL_COUNT\r\n", channelRead);
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	483c      	ldr	r0, [pc, #240]	; (8001df0 <menu_single_conversion+0x260>)
 8001cfe:	f004 fbf7 	bl	80064f0 <iprintf>
    for (uint8_t loopCount = 0; ((was_escape_key_pressed()!= true ) && (loopCount < channel_count)) ; loopCount++) {
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	3301      	adds	r3, #1
 8001d06:	74fb      	strb	r3, [r7, #19]
 8001d08:	f7ff fd56 	bl	80017b8 <was_escape_key_pressed>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f083 0301 	eor.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <menu_single_conversion+0x192>
 8001d18:	7cfa      	ldrb	r2, [r7, #19]
 8001d1a:	7d7b      	ldrb	r3, [r7, #21]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	f4ff af6f 	bcc.w	8001c00 <menu_single_conversion+0x70>
		}
    }

    // All done, ADC put into standby mode
    ad7124_register_map[AD7124_ADC_Control].value &= ~(AD7124_ADC_CTRL_REG_MODE(0xf));
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <menu_single_conversion+0x23c>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8001d2a:	4a28      	ldr	r2, [pc, #160]	; (8001dcc <menu_single_conversion+0x23c>)
 8001d2c:	6153      	str	r3, [r2, #20]
    // 2 = sleep/standby mode
    ad7124_register_map[AD7124_ADC_Control].value |= AD7124_ADC_CTRL_REG_MODE(2);
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <menu_single_conversion+0x23c>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <menu_single_conversion+0x23c>)
 8001d38:	6153      	str	r3, [r2, #20]

	// Need to restore the channels that were disabled during acquisition
	for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	74bb      	strb	r3, [r7, #18]
 8001d3e:	e034      	b.n	8001daa <menu_single_conversion+0x21a>
		if (channel_enable_mask & (1 << i)) {
 8001d40:	8afa      	ldrh	r2, [r7, #22]
 8001d42:	7cbb      	ldrb	r3, [r7, #18]
 8001d44:	fa42 f303 	asr.w	r3, r2, r3
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d029      	beq.n	8001da4 <menu_single_conversion+0x214>
			ad7124_register_map[AD7124_Channel_0 + i].value |= AD7124_CH_MAP_REG_CH_ENABLE;
 8001d50:	7cbb      	ldrb	r3, [r7, #18]
 8001d52:	3309      	adds	r3, #9
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <menu_single_conversion+0x23c>)
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	7cbb      	ldrb	r3, [r7, #18]
 8001d60:	3309      	adds	r3, #9
 8001d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d66:	4919      	ldr	r1, [pc, #100]	; (8001dcc <menu_single_conversion+0x23c>)
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	601a      	str	r2, [r3, #0]
	    	if ( (error_code = ad7124_write_register(pAd7124_dev, ad7124_register_map[AD7124_Channel_0 + i]) ) < 0) {
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <menu_single_conversion+0x244>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	7cbb      	ldrb	r3, [r7, #18]
 8001d76:	3309      	adds	r3, #9
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <menu_single_conversion+0x23c>)
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	9200      	str	r2, [sp, #0]
 8001d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d84:	f7ff faa1 	bl	80012ca <ad7124_write_register>
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da09      	bge.n	8001da4 <menu_single_conversion+0x214>
	    		printf("Error (%ld) Setting channel %d Enable bit.\r\r\n", error_code, i);
 8001d90:	7cbb      	ldrb	r3, [r7, #18]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	4817      	ldr	r0, [pc, #92]	; (8001df4 <menu_single_conversion+0x264>)
 8001d98:	f004 fbaa 	bl	80064f0 <iprintf>
	    		adi_press_any_key_to_continue();
 8001d9c:	f000 faaa 	bl	80022f4 <adi_press_any_key_to_continue>
	    		return(MENU_CONTINUE);
 8001da0:	2300      	movs	r3, #0
 8001da2:	e00f      	b.n	8001dc4 <menu_single_conversion+0x234>
	for (uint8_t i = 0; i < AD7124_CHANNEL_COUNT; i++) {
 8001da4:	7cbb      	ldrb	r3, [r7, #18]
 8001da6:	3301      	adds	r3, #1
 8001da8:	74bb      	strb	r3, [r7, #18]
 8001daa:	7cbb      	ldrb	r3, [r7, #18]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d9c7      	bls.n	8001d40 <menu_single_conversion+0x1b0>
	    	}
		}
	}

	printf("Single Conversion completed...\r\n\r\n");
 8001db0:	4811      	ldr	r0, [pc, #68]	; (8001df8 <menu_single_conversion+0x268>)
 8001db2:	f004 fc25 	bl	8006600 <puts>
	dislay_channel_samples(SHOW_ENABLED_CHANNELS, DISPLAY_DATA_TABULAR);
 8001db6:	2100      	movs	r1, #0
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fd37 	bl	800182c <dislay_channel_samples>

	adi_press_any_key_to_continue();
 8001dbe:	f000 fa99 	bl	80022f4 <adi_press_any_key_to_continue>
	return(MENU_CONTINUE);
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000624 	.word	0x20000624
 8001dd0:	0800869c 	.word	0x0800869c
 8001dd4:	200009b4 	.word	0x200009b4
 8001dd8:	080086d8 	.word	0x080086d8
 8001ddc:	080085e4 	.word	0x080085e4
 8001de0:	08008618 	.word	0x08008618
 8001de4:	200009b8 	.word	0x200009b8
 8001de8:	200009f8 	.word	0x200009f8
 8001dec:	08008710 	.word	0x08008710
 8001df0:	08008638 	.word	0x08008638
 8001df4:	08008740 	.word	0x08008740
 8001df8:	08008770 	.word	0x08008770

08001dfc <menu_read_status>:
 * @brief      menu item that reads the status register the AD7124
 *
 * @details
 */
static int32_t menu_read_status(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	read_status_register();
 8001e00:	f7ff fcf0 	bl	80017e4 <read_status_register>
	adi_press_any_key_to_continue();
 8001e04:	f000 fa76 	bl	80022f4 <adi_press_any_key_to_continue>
	return(MENU_CONTINUE);
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <menu_read_id>:
 * @brief      reads the ID register on the AD7124
 *
 * @details
 */
static int32_t menu_read_id(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	if (ad7124_read_register(pAd7124_dev, &ad7124_register_map[AD7124_ID]) < 0) {
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <menu_read_id+0x34>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	490b      	ldr	r1, [pc, #44]	; (8001e48 <menu_read_id+0x38>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fa30 	bl	8001280 <ad7124_read_register>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da03      	bge.n	8001e2e <menu_read_id+0x1e>
	   printf("\r\nError Encountered reading ID register\r\n");
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <menu_read_id+0x3c>)
 8001e28:	f004 fbea 	bl	8006600 <puts>
 8001e2c:	e005      	b.n	8001e3a <menu_read_id+0x2a>
	} else {
	   printf("\r\nRead ID Register = 0x%02lx\r\n",
			   (uint32_t)ad7124_register_map[AD7124_ID].value );
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <menu_read_id+0x40>)
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
	   printf("\r\nRead ID Register = 0x%02lx\r\n",
 8001e32:	4619      	mov	r1, r3
 8001e34:	4807      	ldr	r0, [pc, #28]	; (8001e54 <menu_read_id+0x44>)
 8001e36:	f004 fb5b 	bl	80064f0 <iprintf>
	}
	adi_press_any_key_to_continue();
 8001e3a:	f000 fa5b 	bl	80022f4 <adi_press_any_key_to_continue>
	return(MENU_CONTINUE);
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200009b4 	.word	0x200009b4
 8001e48:	20000674 	.word	0x20000674
 8001e4c:	08008794 	.word	0x08008794
 8001e50:	20000624 	.word	0x20000624
 8001e54:	080087c0 	.word	0x080087c0

08001e58 <init_with_configuration>:
 * @brief      Initialize the part with a specific configuration
 *
 * @details
 */
static void init_with_configuration(uint8_t configID)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	int32_t status = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]

	do {
		if ((status = ad7124_remove(pAd7124_dev)) < 0) {
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <init_with_configuration+0x64>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fc49 	bl	8001702 <ad7124_remove>
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db07      	blt.n	8001e88 <init_with_configuration+0x30>
			break;
		}

		if ((status = ad7124_app_initialize(configID)) < 0) {
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fc54 	bl	8001728 <ad7124_app_initialize>
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	e000      	b.n	8001e8a <init_with_configuration+0x32>
			break;
 8001e88:	bf00      	nop
			break;
		}
	} while(0);

	if (status < 0) {
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	da07      	bge.n	8001ea0 <init_with_configuration+0x48>
		printf("\r\n\r\n Error setting Configuration %c \r\n\r\n", (char)(configID + 'A'));
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	3341      	adds	r3, #65	; 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	4619      	mov	r1, r3
 8001e98:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <init_with_configuration+0x68>)
 8001e9a:	f004 fb29 	bl	80064f0 <iprintf>
 8001e9e:	e006      	b.n	8001eae <init_with_configuration+0x56>
	} else {
		printf("\r\n\r\n Configuration %c Set\r\n\r\n", (char)(configID + 'A'));
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	3341      	adds	r3, #65	; 0x41
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <init_with_configuration+0x6c>)
 8001eaa:	f004 fb21 	bl	80064f0 <iprintf>
	}
	adi_press_any_key_to_continue();
 8001eae:	f000 fa21 	bl	80022f4 <adi_press_any_key_to_continue>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200009b4 	.word	0x200009b4
 8001ec0:	080087e0 	.word	0x080087e0
 8001ec4:	0800880c 	.word	0x0800880c

08001ec8 <menu_reset>:
 * @brief      Sends a reset command on the SPI to reset the AD7124
 *
 * @details
 */
static int32_t menu_reset(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	if (ad7124_reset(pAd7124_dev)  < 0)
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <menu_reset+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fa27 	bl	8001324 <ad7124_reset>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da03      	bge.n	8001ee4 <menu_reset+0x1c>
	{
		printf("\r\n\r\n Error performing Reset\r\n\r\n");
 8001edc:	480b      	ldr	r0, [pc, #44]	; (8001f0c <menu_reset+0x44>)
 8001ede:	f004 fb8f 	bl	8006600 <puts>
 8001ee2:	e00b      	b.n	8001efc <menu_reset+0x34>
	} else
	{
		// Need to set the live register map to defaults as well
		memcpy(ad7124_register_map, ad7124_regs, sizeof(ad7124_register_map));
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <menu_reset+0x48>)
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <menu_reset+0x4c>)
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f44f 7364 	mov.w	r3, #912	; 0x390
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f003 fdf3 	bl	8005adc <memcpy>
		printf("\r\n\r\n Reset Complete\r\n\r\n");
 8001ef6:	4808      	ldr	r0, [pc, #32]	; (8001f18 <menu_reset+0x50>)
 8001ef8:	f004 fb82 	bl	8006600 <puts>
	}
	adi_press_any_key_to_continue();
 8001efc:	f000 f9fa 	bl	80022f4 <adi_press_any_key_to_continue>
	return(MENU_CONTINUE);
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200009b4 	.word	0x200009b4
 8001f0c:	0800882c 	.word	0x0800882c
 8001f10:	20000624 	.word	0x20000624
 8001f14:	2000009c 	.word	0x2000009c
 8001f18:	0800884c 	.word	0x0800884c

08001f1c <menu_reset_to_configuration_a>:
 * @brief      Reset and set the ad7124 with configuration A
 *
 * @details
 */
static int32_t menu_reset_to_configuration_a(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	init_with_configuration(AD7124_CONFIG_A);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff ff99 	bl	8001e58 <init_with_configuration>
	return(MENU_CONTINUE);
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <menu_reset_to_configuration_b>:
 * @brief      Reset and the ad7124 with configuration B
 *
 * @details
 */
static int32_t menu_reset_to_configuration_b(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	init_with_configuration(AD7124_CONFIG_B);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff ff91 	bl	8001e58 <init_with_configuration>
	return(MENU_CONTINUE);
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <menu_sample_channels>:
 * @brief      displays and handles the Sample Channel menu
 *
 * @details
 */
static int32_t menu_sample_channels(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	return(adi_do_console_menu(&acquisition_menu));
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <menu_sample_channels+0x10>)
 8001f42:	f000 f94d 	bl	80021e0 <adi_do_console_menu>
 8001f46:	4603      	mov	r3, r0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000024 	.word	0x20000024

08001f50 <ad7124_get_channel_setup>:
 * @param channel ADC channel to get Setup for.
 *
 * @return value of setup field in channel configuration.
 */
uint8_t ad7124_get_channel_setup(struct ad7124_dev *dev, uint8_t channel)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
	return (dev->regs[AD7124_Channel_0 + channel].value >> 12) & 0x7;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	3309      	adds	r3, #9
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	4413      	add	r3, r2
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	131b      	asrs	r3, r3, #12
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	b2db      	uxtb	r3, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <ad7124_get_channel_pga>:
 * @param channel ADC channel to get Setup for.
 *
 * @return value of PGA field in the setup for an ADC channel.
 */
uint8_t ad7124_get_channel_pga(struct ad7124_dev *dev, uint8_t channel)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
	uint8_t setup = ad7124_get_channel_setup(dev, channel);
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffde 	bl	8001f50 <ad7124_get_channel_setup>
 8001f94:	4603      	mov	r3, r0
 8001f96:	73fb      	strb	r3, [r7, #15]

	return (dev->regs[AD7124_Config_0 + setup].value) & 0x07;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	3319      	adds	r3, #25
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	b2db      	uxtb	r3, r3
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <ad7124_get_channel_bipolar>:
 * @param channel ADC channel to get bipolar mode for.
 *
 * @return value of bipolar field in the setup for an ADC channel.
 */
bool ad7124_get_channel_bipolar(struct ad7124_dev *dev, uint8_t channel)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	70fb      	strb	r3, [r7, #3]
	uint8_t setup = ad7124_get_channel_setup(dev, channel);
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffc2 	bl	8001f50 <ad7124_get_channel_setup>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	73fb      	strb	r3, [r7, #15]

	return ((dev->regs[AD7124_Config_0 + setup].value >> 11) & 0x1) ? true : false;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	3319      	adds	r3, #25
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	12db      	asrs	r3, r3, #11
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <ad7124_convert_sample_to_voltage>:
 * @note The conversion equation is implemented for simplicity,
 *       not for accuracy or performance
 *
 */
float ad7124_convert_sample_to_voltage(struct ad7124_dev *dev, uint8_t channel, uint32_t sample)
{
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	460b      	mov	r3, r1
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	72fb      	strb	r3, [r7, #11]
	bool isBipolar = ad7124_get_channel_bipolar(dev, channel);
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	4619      	mov	r1, r3
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff ffd3 	bl	8001fb6 <ad7124_get_channel_bipolar>
 8002010:	4603      	mov	r3, r0
 8002012:	74fb      	strb	r3, [r7, #19]
	uint8_t channelPGA = ad7124_get_channel_pga(dev, channel);
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	4619      	mov	r1, r3
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7ff ffb0 	bl	8001f7e <ad7124_get_channel_pga>
 800201e:	4603      	mov	r3, r0
 8002020:	74bb      	strb	r3, [r7, #18]

	float convertedValue;

	if (isBipolar) {
 8002022:	7cfb      	ldrb	r3, [r7, #19]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d031      	beq.n	800208c <ad7124_convert_sample_to_voltage+0x94>
        convertedValue = ( ((float)sample / (1 << (AD7124_ADC_N_BITS -1))) -1 ) * \
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7fe fe33 	bl	8000c94 <__aeabi_ui2f>
 800202e:	4603      	mov	r3, r0
 8002030:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe ff39 	bl	8000eac <__aeabi_fdiv>
 800203a:	4603      	mov	r3, r0
 800203c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fd75 	bl	8000b30 <__aeabi_fsub>
 8002046:	4603      	mov	r3, r0
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f9ed 	bl	8000428 <__aeabi_f2d>
 800204e:	4604      	mov	r4, r0
 8002050:	460d      	mov	r5, r1
        		              (AD7124_REF_VOLTAGE / AD7124_PGA_GAIN(channelPGA));
 8002052:	7cbb      	ldrb	r3, [r7, #18]
 8002054:	2201      	movs	r2, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe f9d2 	bl	8000404 <__aeabi_i2d>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	f04f 0000 	mov.w	r0, #0
 8002068:	491e      	ldr	r1, [pc, #120]	; (80020e4 <ad7124_convert_sample_to_voltage+0xec>)
 800206a:	f7fe fb5f 	bl	800072c <__aeabi_ddiv>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
        convertedValue = ( ((float)sample / (1 << (AD7124_ADC_N_BITS -1))) -1 ) * \
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	f7fe fa2f 	bl	80004d8 <__aeabi_dmul>
 800207a:	4603      	mov	r3, r0
 800207c:	460c      	mov	r4, r1
 800207e:	4618      	mov	r0, r3
 8002080:	4621      	mov	r1, r4
 8002082:	f7fe fd01 	bl	8000a88 <__aeabi_d2f>
 8002086:	4603      	mov	r3, r0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e025      	b.n	80020d8 <ad7124_convert_sample_to_voltage+0xe0>
	} else {
		convertedValue = ((float)sample * AD7124_REF_VOLTAGE)/(AD7124_PGA_GAIN(channelPGA) * \
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7fe fe01 	bl	8000c94 <__aeabi_ui2f>
 8002092:	4603      	mov	r3, r0
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f9c7 	bl	8000428 <__aeabi_f2d>
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <ad7124_convert_sample_to_voltage+0xec>)
 80020a0:	f7fe fa1a 	bl	80004d8 <__aeabi_dmul>
 80020a4:	4603      	mov	r3, r0
 80020a6:	460c      	mov	r4, r1
 80020a8:	4625      	mov	r5, r4
 80020aa:	461c      	mov	r4, r3
 80020ac:	7cbb      	ldrb	r3, [r7, #18]
 80020ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe f9a4 	bl	8000404 <__aeabi_i2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4620      	mov	r0, r4
 80020c2:	4629      	mov	r1, r5
 80020c4:	f7fe fb32 	bl	800072c <__aeabi_ddiv>
 80020c8:	4603      	mov	r3, r0
 80020ca:	460c      	mov	r4, r1
 80020cc:	4618      	mov	r0, r3
 80020ce:	4621      	mov	r1, r4
 80020d0:	f7fe fcda 	bl	8000a88 <__aeabi_d2f>
 80020d4:	4603      	mov	r3, r0
 80020d6:	617b      	str	r3, [r7, #20]
								                              (1 << AD7124_ADC_N_BITS));
	}

    return (convertedValue);
 80020d8:	697b      	ldr	r3, [r7, #20]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdb0      	pop	{r4, r5, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40040000 	.word	0x40040000

080020e8 <adi_display_console_menu>:
 * @brief      displays the text of a console menu
 *
 * @details
 */
static void adi_display_console_menu(const console_menu * menu)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	adi_clear_console();
 80020f0:	f000 f8f6 	bl	80022e0 <adi_clear_console>

	/*
	 * Display the menu title and  menuItems
	 * The shortcutKey is used to display '[A]' before the dispayText
	 */
	printf("\r\n\r\n\t%s\r\n\t", menu->title);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	4833      	ldr	r0, [pc, #204]	; (80021c8 <adi_display_console_menu+0xe0>)
 80020fc:	f004 f9f8 	bl	80064f0 <iprintf>
	// show an underline to distinguish title from item
	for (uint8_t i = 0; i < strlen(menu->title); i++)
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e005      	b.n	8002112 <adi_display_console_menu+0x2a>
	{
		putchar('=');
 8002106:	203d      	movs	r0, #61	; 0x3d
 8002108:	f004 fa0a 	bl	8006520 <putchar>
	for (uint8_t i = 0; i < strlen(menu->title); i++)
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	3301      	adds	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	7bfc      	ldrb	r4, [r7, #15]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f819 	bl	8000150 <strlen>
 800211e:	4603      	mov	r3, r0
 8002120:	429c      	cmp	r4, r3
 8002122:	d3f0      	bcc.n	8002106 <adi_display_console_menu+0x1e>
	}
	// Extend underline past end of string, and then new line
	printf("==\r\n");
 8002124:	4829      	ldr	r0, [pc, #164]	; (80021cc <adi_display_console_menu+0xe4>)
 8002126:	f004 fa6b 	bl	8006600 <puts>

	// NOTE No check is made if the shortcutKey is valid or unique
	for (uint8_t i = 0; i < menu->itemCount; i ++)
 800212a:	2300      	movs	r3, #0
 800212c:	73bb      	strb	r3, [r7, #14]
 800212e:	e038      	b.n	80021a2 <adi_display_console_menu+0xba>
	{
		if (menu->items[i].shortcutKey == '\00')
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	7bba      	ldrb	r2, [r7, #14]
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	791b      	ldrb	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <adi_display_console_menu+0x66>
			{
				// No shortcut key defined, insert a blank line
				printf("\r\n");
 8002146:	4822      	ldr	r0, [pc, #136]	; (80021d0 <adi_display_console_menu+0xe8>)
 8002148:	f004 fa5a 	bl	8006600 <puts>
 800214c:	e026      	b.n	800219c <adi_display_console_menu+0xb4>
			} else {
				printf("\t[%c] %s\r\n", toupper(menu->items[i].shortcutKey),
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	7bba      	ldrb	r2, [r7, #14]
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	737b      	strb	r3, [r7, #13]
 8002162:	f003 fc8b 	bl	8005a7c <__locale_ctype_ptr>
 8002166:	4602      	mov	r2, r0
 8002168:	7b7b      	ldrb	r3, [r7, #13]
 800216a:	3301      	adds	r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d103      	bne.n	8002180 <adi_display_console_menu+0x98>
 8002178:	7b7b      	ldrb	r3, [r7, #13]
 800217a:	f1a3 0120 	sub.w	r1, r3, #32
 800217e:	e000      	b.n	8002182 <adi_display_console_menu+0x9a>
 8002180:	7b79      	ldrb	r1, [r7, #13]
									  menu->items[i].displayText);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6858      	ldr	r0, [r3, #4]
 8002186:	7bba      	ldrb	r2, [r7, #14]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4403      	add	r3, r0
				printf("\t[%c] %s\r\n", toupper(menu->items[i].shortcutKey),
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	480f      	ldr	r0, [pc, #60]	; (80021d4 <adi_display_console_menu+0xec>)
 8002198:	f004 f9aa 	bl	80064f0 <iprintf>
	for (uint8_t i = 0; i < menu->itemCount; i ++)
 800219c:	7bbb      	ldrb	r3, [r7, #14]
 800219e:	3301      	adds	r3, #1
 80021a0:	73bb      	strb	r3, [r7, #14]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7a1b      	ldrb	r3, [r3, #8]
 80021a6:	7bba      	ldrb	r2, [r7, #14]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d3c1      	bcc.n	8002130 <adi_display_console_menu+0x48>
			}
	}
	if (menu->enableEscapeKey)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7a5b      	ldrb	r3, [r3, #9]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <adi_display_console_menu+0xd2>
	{
	    printf("\r\n\t[ESC] Exit Menu\r\n");
 80021b4:	4808      	ldr	r0, [pc, #32]	; (80021d8 <adi_display_console_menu+0xf0>)
 80021b6:	f004 fa23 	bl	8006600 <puts>
	}

	printf("\r\n\tPlease make a selection.\r\n");
 80021ba:	4808      	ldr	r0, [pc, #32]	; (80021dc <adi_display_console_menu+0xf4>)
 80021bc:	f004 fa20 	bl	8006600 <puts>

}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	08008998 	.word	0x08008998
 80021cc:	080089a4 	.word	0x080089a4
 80021d0:	080089a8 	.word	0x080089a8
 80021d4:	080089ac 	.word	0x080089ac
 80021d8:	080089b8 	.word	0x080089b8
 80021dc:	080089cc 	.word	0x080089cc

080021e0 <adi_do_console_menu>:
 *
 * @details    This displays the menuItems defined by the console menu, and
 * 			    handles all user interaction for the menu.
 */
int32_t adi_do_console_menu(const console_menu * menu)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    int32_t itemSelected = MENU_ESCAPED;
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ec:	617b      	str	r3, [r7, #20]
	bool enableKeyScan = true;
 80021ee:	2301      	movs	r3, #1
 80021f0:	74fb      	strb	r3, [r7, #19]

    adi_display_console_menu(menu);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ff78 	bl	80020e8 <adi_display_console_menu>
	/*
	 *  Loop waiting for valid user input. menuItem index is returned if
	 *  user presses a valid menu option.
	 */
	do {
		char keyPressed = toupper(getchar());
 80021f8:	f003 fc0a 	bl	8005a10 <getchar>
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	f003 fc3d 	bl	8005a7c <__locale_ctype_ptr>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3301      	adds	r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d102      	bne.n	800221a <adi_do_console_menu+0x3a>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3b20      	subs	r3, #32
 8002218:	e000      	b.n	800221c <adi_do_console_menu+0x3c>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	72fb      	strb	r3, [r7, #11]

		if (menu->enableEscapeKey)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7a5b      	ldrb	r3, [r3, #9]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <adi_do_console_menu+0x58>
		{
			if (keyPressed == ESCAPE_KEY_CODE)
 8002226:	7afb      	ldrb	r3, [r7, #11]
 8002228:	2b1b      	cmp	r3, #27
 800222a:	d105      	bne.n	8002238 <adi_do_console_menu+0x58>
			{
				itemSelected = MENU_ESCAPED;
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	617b      	str	r3, [r7, #20]
				enableKeyScan = false;
 8002232:	2300      	movs	r3, #0
 8002234:	74fb      	strb	r3, [r7, #19]
				break;
 8002236:	e04e      	b.n	80022d6 <adi_do_console_menu+0xf6>
		    }
		}

		for (uint8_t i = 0; i < menu->itemCount; i ++)
 8002238:	2300      	movs	r3, #0
 800223a:	74bb      	strb	r3, [r7, #18]
 800223c:	e043      	b.n	80022c6 <adi_do_console_menu+0xe6>
		{
			if (toupper(menu->items[i].shortcutKey) == keyPressed)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	7cba      	ldrb	r2, [r7, #18]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	791b      	ldrb	r3, [r3, #4]
 8002250:	72bb      	strb	r3, [r7, #10]
 8002252:	f003 fc13 	bl	8005a7c <__locale_ctype_ptr>
 8002256:	4602      	mov	r2, r0
 8002258:	7abb      	ldrb	r3, [r7, #10]
 800225a:	3301      	adds	r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d102      	bne.n	800226e <adi_do_console_menu+0x8e>
 8002268:	7abb      	ldrb	r3, [r7, #10]
 800226a:	3b20      	subs	r3, #32
 800226c:	e000      	b.n	8002270 <adi_do_console_menu+0x90>
 800226e:	7abb      	ldrb	r3, [r7, #10]
 8002270:	7afa      	ldrb	r2, [r7, #11]
 8002272:	4293      	cmp	r3, r2
 8002274:	d124      	bne.n	80022c0 <adi_do_console_menu+0xe0>
			{
				itemSelected = i;
 8002276:	7cbb      	ldrb	r3, [r7, #18]
 8002278:	617b      	str	r3, [r7, #20]

				// If the menuAction function pointer is not NULL, call the action
				if (menu->items[i].menuAction != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	7cba      	ldrb	r2, [r7, #18]
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d015      	beq.n	80022bc <adi_do_console_menu+0xdc>
				{
					switch (menu->items[i].menuAction())
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	7cba      	ldrb	r2, [r7, #18]
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4798      	blx	r3
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <adi_do_console_menu+0xd0>
					{
						case MENU_DONE:
						{
							enableKeyScan = false;
 80022aa:	2300      	movs	r3, #0
 80022ac:	74fb      	strb	r3, [r7, #19]
							break;
 80022ae:	e006      	b.n	80022be <adi_do_console_menu+0xde>
						}
						case MENU_CONTINUE:
						default:
						{
							enableKeyScan = true;
 80022b0:	2301      	movs	r3, #1
 80022b2:	74fb      	strb	r3, [r7, #19]
							adi_display_console_menu(menu);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff17 	bl	80020e8 <adi_display_console_menu>
							break;
 80022ba:	e000      	b.n	80022be <adi_do_console_menu+0xde>
						}
					}
				}
 80022bc:	bf00      	nop
				break;
 80022be:	e007      	b.n	80022d0 <adi_do_console_menu+0xf0>
		for (uint8_t i = 0; i < menu->itemCount; i ++)
 80022c0:	7cbb      	ldrb	r3, [r7, #18]
 80022c2:	3301      	adds	r3, #1
 80022c4:	74bb      	strb	r3, [r7, #18]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7a1b      	ldrb	r3, [r3, #8]
 80022ca:	7cba      	ldrb	r2, [r7, #18]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d3b6      	bcc.n	800223e <adi_do_console_menu+0x5e>
			}
		}
    } while (enableKeyScan);
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d190      	bne.n	80021f8 <adi_do_console_menu+0x18>

	return (itemSelected);
 80022d6:	697b      	ldr	r3, [r7, #20]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <adi_clear_console>:
 *
 * @details    Clears the console terminal using VT100 escape code, or can be changed to
 *             output blank lines if serial link doesn't support VT100.
 */
void adi_clear_console(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	/*
	 * clear console and move cursor to home location, followed by move to home location.
	 *  Dedicated call to move home is because sometimes first move home doesn't work
	 *  \r\n required to flush the uart buffer.
	 */
	printf("\x1B[2J\x1B[H\r\n");
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <adi_clear_console+0x10>)
 80022e6:	f004 f98b 	bl	8006600 <puts>
	/*
	 * if Vt100 is not supported, this can be enabled instead
	 */
//    for (uint8_t = 0; i < 100; i++)
//    	printf("\r\n\r");
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	080089ec 	.word	0x080089ec

080022f4 <adi_press_any_key_to_continue>:
 * @brief      waits for any key to be pressed, and displays a prompt to the user
 *
 * @details
 */
void adi_press_any_key_to_continue(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
    printf("\r\nPress any key to continue...\r\n");
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <adi_press_any_key_to_continue+0x14>)
 80022fa:	f004 f981 	bl	8006600 <puts>
	getchar();
 80022fe:	f003 fb87 	bl	8005a10 <getchar>
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	080089f8 	.word	0x080089f8

0800230c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002312:	f000 fd2b 	bl	8002d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002316:	f000 f831 	bl	800237c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800231a:	f000 f9ab 	bl	8002674 <MX_GPIO_Init>
  MX_RTC_Init();
 800231e:	f000 f881 	bl	8002424 <MX_RTC_Init>
  MX_TIM2_Init();
 8002322:	f000 f8ff 	bl	8002524 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002326:	f000 f8c7 	bl	80024b8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800232a:	f000 f979 	bl	8002620 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800232e:	2100      	movs	r1, #0
 8002330:	480f      	ldr	r0, [pc, #60]	; (8002370 <main+0x64>)
 8002332:	f002 fc1f 	bl	8004b74 <HAL_TIM_PWM_Start>
  //encoder_init();

  /* Initialize the AD7124 application before the main loop */
  int32_t setupResult;
  if ((setupResult = ad7124_app_initialize(AD7124_CONFIG_A)) < 0 ) {
 8002336:	2000      	movs	r0, #0
 8002338:	f7ff f9f6 	bl	8001728 <ad7124_app_initialize>
 800233c:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_blink();
 800233e:	f000 faa7 	bl	8002890 <test_blink>
	  putchar('=');
 8002342:	203d      	movs	r0, #61	; 0x3d
 8002344:	f004 f8ec 	bl	8006520 <putchar>
	  printf("test");
 8002348:	480a      	ldr	r0, [pc, #40]	; (8002374 <main+0x68>)
 800234a:	f004 f8d1 	bl	80064f0 <iprintf>
	  HAL_Delay(100);
 800234e:	2064      	movs	r0, #100	; 0x64
 8002350:	f000 fd6e 	bl	8002e30 <HAL_Delay>
	  putchar(getchar());
 8002354:	f003 fb5c 	bl	8005a10 <getchar>
 8002358:	4603      	mov	r3, r0
 800235a:	4618      	mov	r0, r3
 800235c:	f004 f8e0 	bl	8006520 <putchar>
	  HAL_Delay(1000);
 8002360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002364:	f000 fd64 	bl	8002e30 <HAL_Delay>

	  //display the console menu for the AD7124 application
	  adi_do_console_menu(&ad7124_main_menu);
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <main+0x6c>)
 800236a:	f7ff ff39 	bl	80021e0 <adi_do_console_menu>
	  test_blink();
 800236e:	e7e6      	b.n	800233e <main+0x32>
 8002370:	20000bb0 	.word	0x20000bb0
 8002374:	08008a18 	.word	0x08008a18
 8002378:	20000090 	.word	0x20000090

0800237c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b094      	sub	sp, #80	; 0x50
 8002380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002386:	2228      	movs	r2, #40	; 0x28
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f003 fbb1 	bl	8005af2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80023ac:	230a      	movs	r3, #10
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b0:	2301      	movs	r3, #1
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023b4:	2310      	movs	r3, #16
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80023b8:	2301      	movs	r3, #1
 80023ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023bc:	2300      	movs	r3, #0
 80023be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 ffcf 	bl	8003368 <HAL_RCC_OscConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80023d0:	f000 f9c4 	bl	800275c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d4:	230f      	movs	r3, #15
 80023d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 fa3a 	bl	8003868 <HAL_RCC_ClockConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80023fa:	f000 f9af 	bl	800275c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023fe:	2301      	movs	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002406:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fbc8 	bl	8003ba0 <HAL_RCCEx_PeriphCLKConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002416:	f000 f9a1 	bl	800275c <Error_Handler>
  }
}
 800241a:	bf00      	nop
 800241c:	3750      	adds	r7, #80	; 0x50
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	2100      	movs	r1, #0
 800242e:	460a      	mov	r2, r1
 8002430:	801a      	strh	r2, [r3, #0]
 8002432:	460a      	mov	r2, r1
 8002434:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002436:	2300      	movs	r3, #0
 8002438:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_RTC_Init+0x8c>)
 800243c:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <MX_RTC_Init+0x90>)
 800243e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <MX_RTC_Init+0x8c>)
 8002442:	f04f 32ff 	mov.w	r2, #4294967295
 8002446:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <MX_RTC_Init+0x8c>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800244e:	4818      	ldr	r0, [pc, #96]	; (80024b0 <MX_RTC_Init+0x8c>)
 8002450:	f001 fd18 	bl	8003e84 <HAL_RTC_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800245a:	f000 f97f 	bl	800275c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800245e:	2300      	movs	r3, #0
 8002460:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002462:	2300      	movs	r3, #0
 8002464:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002466:	2300      	movs	r3, #0
 8002468:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2201      	movs	r2, #1
 800246e:	4619      	mov	r1, r3
 8002470:	480f      	ldr	r0, [pc, #60]	; (80024b0 <MX_RTC_Init+0x8c>)
 8002472:	f001 fd9d 	bl	8003fb0 <HAL_RTC_SetTime>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800247c:	f000 f96e 	bl	800275c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002480:	2301      	movs	r3, #1
 8002482:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002484:	2301      	movs	r3, #1
 8002486:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002488:	2301      	movs	r3, #1
 800248a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800248c:	2300      	movs	r3, #0
 800248e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002490:	463b      	mov	r3, r7
 8002492:	2201      	movs	r2, #1
 8002494:	4619      	mov	r1, r3
 8002496:	4806      	ldr	r0, [pc, #24]	; (80024b0 <MX_RTC_Init+0x8c>)
 8002498:	f001 fe22 	bl	80040e0 <HAL_RTC_SetDate>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80024a2:	f000 f95b 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000b44 	.word	0x20000b44
 80024b4:	40002800 	.word	0x40002800

080024b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024bc:	4b17      	ldr	r3, [pc, #92]	; (800251c <MX_SPI1_Init+0x64>)
 80024be:	4a18      	ldr	r2, [pc, #96]	; (8002520 <MX_SPI1_Init+0x68>)
 80024c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <MX_SPI1_Init+0x64>)
 80024c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <MX_SPI1_Init+0x64>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <MX_SPI1_Init+0x64>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_SPI1_Init+0x64>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <MX_SPI1_Init+0x64>)
 80024de:	2201      	movs	r2, #1
 80024e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_SPI1_Init+0x64>)
 80024e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_SPI1_Init+0x64>)
 80024ec:	2238      	movs	r2, #56	; 0x38
 80024ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <MX_SPI1_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_SPI1_Init+0x64>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <MX_SPI1_Init+0x64>)
 80024fe:	2200      	movs	r2, #0
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_SPI1_Init+0x64>)
 8002504:	220a      	movs	r2, #10
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <MX_SPI1_Init+0x64>)
 800250a:	f002 f849 	bl	80045a0 <HAL_SPI_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002514:	f000 f922 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000b58 	.word	0x20000b58
 8002520:	40013000 	.word	0x40013000

08002524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	f107 0320 	add.w	r3, r7, #32
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
 8002550:	615a      	str	r2, [r3, #20]
 8002552:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002554:	4b31      	ldr	r3, [pc, #196]	; (800261c <MX_TIM2_Init+0xf8>)
 8002556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800255a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800255c:	4b2f      	ldr	r3, [pc, #188]	; (800261c <MX_TIM2_Init+0xf8>)
 800255e:	224f      	movs	r2, #79	; 0x4f
 8002560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <MX_TIM2_Init+0xf8>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2019;
 8002568:	4b2c      	ldr	r3, [pc, #176]	; (800261c <MX_TIM2_Init+0xf8>)
 800256a:	f240 72e3 	movw	r2, #2019	; 0x7e3
 800256e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <MX_TIM2_Init+0xf8>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002576:	4b29      	ldr	r3, [pc, #164]	; (800261c <MX_TIM2_Init+0xf8>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800257c:	4827      	ldr	r0, [pc, #156]	; (800261c <MX_TIM2_Init+0xf8>)
 800257e:	f002 fa9a 	bl	8004ab6 <HAL_TIM_Base_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002588:	f000 f8e8 	bl	800275c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002596:	4619      	mov	r1, r3
 8002598:	4820      	ldr	r0, [pc, #128]	; (800261c <MX_TIM2_Init+0xf8>)
 800259a:	f002 fbe3 	bl	8004d64 <HAL_TIM_ConfigClockSource>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025a4:	f000 f8da 	bl	800275c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025a8:	481c      	ldr	r0, [pc, #112]	; (800261c <MX_TIM2_Init+0xf8>)
 80025aa:	f002 faaf 	bl	8004b0c <HAL_TIM_PWM_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025b4:	f000 f8d2 	bl	800275c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025c0:	f107 0320 	add.w	r3, r7, #32
 80025c4:	4619      	mov	r1, r3
 80025c6:	4815      	ldr	r0, [pc, #84]	; (800261c <MX_TIM2_Init+0xf8>)
 80025c8:	f002 ff28 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80025d2:	f000 f8c3 	bl	800275c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d6:	2360      	movs	r3, #96	; 0x60
 80025d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	480b      	ldr	r0, [pc, #44]	; (800261c <MX_TIM2_Init+0xf8>)
 80025ee:	f002 faf3 	bl	8004bd8 <HAL_TIM_PWM_ConfigChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80025f8:	f000 f8b0 	bl	800275c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <MX_TIM2_Init+0xf8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_TIM2_Init+0xf8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0208 	bic.w	r2, r2, #8
 800260a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800260c:	4803      	ldr	r0, [pc, #12]	; (800261c <MX_TIM2_Init+0xf8>)
 800260e:	f000 fa19 	bl	8002a44 <HAL_TIM_MspPostInit>

}
 8002612:	bf00      	nop
 8002614:	3738      	adds	r7, #56	; 0x38
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000bb0 	.word	0x20000bb0

08002620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <MX_USART2_UART_Init+0x50>)
 8002628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <MX_USART2_UART_Init+0x4c>)
 800262c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <MX_USART2_UART_Init+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002646:	220c      	movs	r2, #12
 8002648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <MX_USART2_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_USART2_UART_Init+0x4c>)
 8002658:	f002 ff24 	bl	80054a4 <HAL_UART_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002662:	f000 f87b 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000bf0 	.word	0x20000bf0
 8002670:	40004400 	.word	0x40004400

08002674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267a:	f107 0310 	add.w	r3, r7, #16
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002688:	4b28      	ldr	r3, [pc, #160]	; (800272c <MX_GPIO_Init+0xb8>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a27      	ldr	r2, [pc, #156]	; (800272c <MX_GPIO_Init+0xb8>)
 800268e:	f043 0310 	orr.w	r3, r3, #16
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <MX_GPIO_Init+0xb8>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <MX_GPIO_Init+0xb8>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <MX_GPIO_Init+0xb8>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	6193      	str	r3, [r2, #24]
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <MX_GPIO_Init+0xb8>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <MX_GPIO_Init+0xb8>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <MX_GPIO_Init+0xb8>)
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	6193      	str	r3, [r2, #24]
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <MX_GPIO_Init+0xb8>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026d0:	2200      	movs	r2, #0
 80026d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d6:	4816      	ldr	r0, [pc, #88]	; (8002730 <MX_GPIO_Init+0xbc>)
 80026d8:	f000 fe0a 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80026dc:	2200      	movs	r2, #0
 80026de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026e2:	4814      	ldr	r0, [pc, #80]	; (8002734 <MX_GPIO_Init+0xc0>)
 80026e4:	f000 fe04 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ee:	2301      	movs	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2302      	movs	r3, #2
 80026f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80026fa:	f107 0310 	add.w	r3, r7, #16
 80026fe:	4619      	mov	r1, r3
 8002700:	480b      	ldr	r0, [pc, #44]	; (8002730 <MX_GPIO_Init+0xbc>)
 8002702:	f000 fc9b 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8002706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270c:	2301      	movs	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2302      	movs	r3, #2
 8002716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	4619      	mov	r1, r3
 800271e:	4805      	ldr	r0, [pc, #20]	; (8002734 <MX_GPIO_Init+0xc0>)
 8002720:	f000 fc8c 	bl	800303c <HAL_GPIO_Init>

}
 8002724:	bf00      	nop
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	40011000 	.word	0x40011000
 8002734:	40010c00 	.word	0x40010c00

08002738 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002740:	1d39      	adds	r1, r7, #4
 8002742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002746:	2201      	movs	r2, #1
 8002748:	4803      	ldr	r0, [pc, #12]	; (8002758 <__io_putchar+0x20>)
 800274a:	f002 fef8 	bl	800553e <HAL_UART_Transmit>

  return ch;
 800274e:	687b      	ldr	r3, [r7, #4]
} //also declared in platform_support.c
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000bf0 	.word	0x20000bf0

0800275c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <spi_init>:
 * @param init_param - The structure that contains the SPI parameters.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_init(struct spi_desc **desc,
		 const struct spi_init_param *param)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
	}
	if (param->type) {
		// Unused variable - fix compiler warning
	}

	return (SUCCESS);
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <spi_remove>:
 * @brief Free the resources allocated by spi_init().
 * @param desc - The SPI descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_remove(struct spi_desc *desc)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	if (desc) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
	...

08002794 <spi_write_and_read>:
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_write_and_read(struct spi_desc *desc,
			   uint8_t *data,
			   uint8_t bytes_number)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	4613      	mov	r3, r2
 80027a0:	71fb      	strb	r3, [r7, #7]
	 * GPIO is not controlled by the SPI master.
	 * There are STM32 parts that have hardware support for
	 * Chip select but this uses software to make it more
	 * general, and flexible with pin choice.
	 */
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80027a2:	2200      	movs	r2, #0
 80027a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027a8:	4812      	ldr	r0, [pc, #72]	; (80027f4 <spi_write_and_read+0x60>)
 80027aa:	f000 fda1 	bl	80032f0 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(&hspi1, data, (uint8_t *)aSpiRxBuffer, bytes_number, 5000) != HAL_OK) {
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <spi_write_and_read+0x64>)
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	480f      	ldr	r0, [pc, #60]	; (80027fc <spi_write_and_read+0x68>)
 80027c0:	f001 ff4f 	bl	8004662 <HAL_SPI_TransmitReceive>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <spi_write_and_read+0x3c>
	    return FAILURE;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	e00c      	b.n	80027ea <spi_write_and_read+0x56>
	}
    HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027d6:	4807      	ldr	r0, [pc, #28]	; (80027f4 <spi_write_and_read+0x60>)
 80027d8:	f000 fd8a 	bl	80032f0 <HAL_GPIO_WritePin>

	/* Copy the SPI receive buffer to the supplied data buffer to return to caller*/
    memcpy(data, aSpiRxBuffer, bytes_number);
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	461a      	mov	r2, r3
 80027e0:	4905      	ldr	r1, [pc, #20]	; (80027f8 <spi_write_and_read+0x64>)
 80027e2:	68b8      	ldr	r0, [r7, #8]
 80027e4:	f003 f97a 	bl	8005adc <memcpy>

    return SUCCESS;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40010c00 	.word	0x40010c00
 80027f8:	20000a38 	.word	0x20000a38
 80027fc:	20000b58 	.word	0x20000b58

08002800 <mdelay>:
 * @brief Generate milliseconds delay.
 * @param msecs - Delay in milliseconds.
 * @return None.
 */
void mdelay(uint32_t msecs)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	if (msecs) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <mdelay+0x14>
		HAL_Delay(msecs);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fb0e 	bl	8002e30 <HAL_Delay>
	}
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <__io_getchar>:
  * @brief  Retargets the C library __io_getchar function to the USART.
  * @param  None
  * @retval character read uart
  */
int __io_getchar(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
  /* Implementation of __io_getchar */
    char rxChar;

    // This loops in case of HAL timeout, but if an ok or error occurs, we continue
    while (HAL_UART_Receive(&huart2, (uint8_t *)&rxChar, 1, 0xFFFFFFFF) == HAL_TIMEOUT);
 8002822:	bf00      	nop
 8002824:	1df9      	adds	r1, r7, #7
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
 800282a:	2201      	movs	r2, #1
 800282c:	4805      	ldr	r0, [pc, #20]	; (8002844 <__io_getchar+0x28>)
 800282e:	f002 ff1f 	bl	8005670 <HAL_UART_Receive>
 8002832:	4603      	mov	r3, r0
 8002834:	2b03      	cmp	r3, #3
 8002836:	d0f5      	beq.n	8002824 <__io_getchar+0x8>

    return rxChar;
 8002838:	79fb      	ldrb	r3, [r7, #7]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000bf0 	.word	0x20000bf0

08002848 <getchar_nonblocking>:
  * @brief  getchar, but does not block if nothing waiting to be read
  * @param  None
  * @retval character if available, -1 otherwise
  */
int16_t getchar_nonblocking()
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
	uint8_t ch;

	if (HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0x0) == HAL_OK) {
 800284e:	1df9      	adds	r1, r7, #7
 8002850:	2300      	movs	r3, #0
 8002852:	2201      	movs	r2, #1
 8002854:	4807      	ldr	r0, [pc, #28]	; (8002874 <getchar_nonblocking+0x2c>)
 8002856:	f002 ff0b 	bl	8005670 <HAL_UART_Receive>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <getchar_nonblocking+0x1e>
	    return (uint16_t)ch;
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	b21b      	sxth	r3, r3
 8002864:	e001      	b.n	800286a <getchar_nonblocking+0x22>
	} else {
		return (-1); // Indicates no character read
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000bf0 	.word	0x20000bf0

08002878 <toggle_activity_led>:
/**
  * @brief  toggles an LED to show something has happened
  * @param  None
  * @retval None
  */
void toggle_activity_led(void){
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800287c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <toggle_activity_led+0x14>)
 8002882:	f000 fd4d 	bl	8003320 <HAL_GPIO_TogglePin>
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40011000 	.word	0x40011000

08002890 <test_blink>:


#define A 	1
#define B  	0

void test_blink(){
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002898:	4803      	ldr	r0, [pc, #12]	; (80028a8 <test_blink+0x18>)
 800289a:	f000 fd41 	bl	8003320 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800289e:	2064      	movs	r0, #100	; 0x64
 80028a0:	f000 fac6 	bl	8002e30 <HAL_Delay>
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40011000 	.word	0x40011000

080028ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_MspInit+0x5c>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_MspInit+0x5c>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6193      	str	r3, [r2, #24]
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_MspInit+0x5c>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <HAL_MspInit+0x5c>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4a0e      	ldr	r2, [pc, #56]	; (8002908 <HAL_MspInit+0x5c>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	61d3      	str	r3, [r2, #28]
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <HAL_MspInit+0x5c>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_MspInit+0x60>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_MspInit+0x60>)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	40021000 	.word	0x40021000
 800290c:	40010000 	.word	0x40010000

08002910 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_RTC_MspInit+0x3c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d110      	bne.n	8002944 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002922:	f000 fd15 	bl	8003350 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_RTC_MspInit+0x40>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RTC_MspInit+0x40>)
 800292c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002930:	61d3      	str	r3, [r2, #28]
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_RTC_MspInit+0x40>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RTC_MspInit+0x44>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40002800 	.word	0x40002800
 8002950:	40021000 	.word	0x40021000
 8002954:	4242043c 	.word	0x4242043c

08002958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_SPI_MspInit+0xa4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d13d      	bne.n	80029f4 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <HAL_SPI_MspInit+0xa8>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <HAL_SPI_MspInit+0xa8>)
 800297e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_SPI_MspInit+0xa8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_SPI_MspInit+0xa8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <HAL_SPI_MspInit+0xa8>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_SPI_MspInit+0xa8>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80029a8:	2328      	movs	r3, #40	; 0x28
 80029aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	4812      	ldr	r0, [pc, #72]	; (8002a04 <HAL_SPI_MspInit+0xac>)
 80029bc:	f000 fb3e 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029c0:	2310      	movs	r3, #16
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	480c      	ldr	r0, [pc, #48]	; (8002a04 <HAL_SPI_MspInit+0xac>)
 80029d4:	f000 fb32 	bl	800303c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_SPI_MspInit+0xb0>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <HAL_SPI_MspInit+0xb0>)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40013000 	.word	0x40013000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010c00 	.word	0x40010c00
 8002a08:	40010000 	.word	0x40010000

08002a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d10b      	bne.n	8002a36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_TIM_Base_MspInit+0x34>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <HAL_TIM_Base_MspInit+0x34>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	61d3      	str	r3, [r2, #28]
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_TIM_Base_MspInit+0x34>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000

08002a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0310 	add.w	r3, r7, #16
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a62:	d117      	bne.n	8002a94 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_TIM_MspPostInit+0x58>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_TIM_MspPostInit+0x58>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6193      	str	r3, [r2, #24]
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_TIM_MspPostInit+0x58>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2302      	movs	r3, #2
 8002a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <HAL_TIM_MspPostInit+0x5c>)
 8002a90:	f000 fad4 	bl	800303c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a94:	bf00      	nop
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40010800 	.word	0x40010800

08002aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <HAL_UART_MspInit+0x88>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d12f      	bne.n	8002b24 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_UART_MspInit+0x8c>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_UART_MspInit+0x8c>)
 8002aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ace:	61d3      	str	r3, [r2, #28]
 8002ad0:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_UART_MspInit+0x8c>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_UART_MspInit+0x8c>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <HAL_UART_MspInit+0x8c>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6193      	str	r3, [r2, #24]
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_UART_MspInit+0x8c>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002af4:	2304      	movs	r3, #4
 8002af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	4619      	mov	r1, r3
 8002b06:	480b      	ldr	r0, [pc, #44]	; (8002b34 <HAL_UART_MspInit+0x90>)
 8002b08:	f000 fa98 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 0310 	add.w	r3, r7, #16
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4805      	ldr	r0, [pc, #20]	; (8002b34 <HAL_UART_MspInit+0x90>)
 8002b20:	f000 fa8c 	bl	800303c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b24:	bf00      	nop
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40004400 	.word	0x40004400
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010800 	.word	0x40010800

08002b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <HardFault_Handler+0x4>

08002b4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b4e:	e7fe      	b.n	8002b4e <MemManage_Handler+0x4>

08002b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <BusFault_Handler+0x4>

08002b56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b5a:	e7fe      	b.n	8002b5a <UsageFault_Handler+0x4>

08002b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b84:	f000 f938 	bl	8002df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e00a      	b.n	8002bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b9e:	f7ff fe3d 	bl	800281c <__io_getchar>
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	60ba      	str	r2, [r7, #8]
 8002baa:	b2ca      	uxtb	r2, r1
 8002bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dbf0      	blt.n	8002b9e <_read+0x12>
	}

return len;
 8002bbc:	687b      	ldr	r3, [r7, #4]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e009      	b.n	8002bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	60ba      	str	r2, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fda9 	bl	8002738 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3301      	adds	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dbf1      	blt.n	8002bd8 <_write+0x12>
	}
	return len;
 8002bf4:	687b      	ldr	r3, [r7, #4]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <_close>:

int _close(int file)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	return -1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c24:	605a      	str	r2, [r3, #4]
	return 0;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <_isatty>:

int _isatty(int file)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
	return 1;
 8002c3a:	2301      	movs	r3, #1
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
	return 0;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
	...

08002c60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <_sbrk+0x50>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <_sbrk+0x16>
		heap_end = &end;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <_sbrk+0x50>)
 8002c72:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <_sbrk+0x54>)
 8002c74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <_sbrk+0x50>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <_sbrk+0x50>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	466a      	mov	r2, sp
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d907      	bls.n	8002c9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c8a:	f002 febb 	bl	8005a04 <__errno>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	230c      	movs	r3, #12
 8002c92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295
 8002c98:	e006      	b.n	8002ca8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <_sbrk+0x50>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a03      	ldr	r2, [pc, #12]	; (8002cb0 <_sbrk+0x50>)
 8002ca4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000b38 	.word	0x20000b38
 8002cb4:	20000c38 	.word	0x20000c38

08002cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <SystemInit+0x5c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <SystemInit+0x5c>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <SystemInit+0x5c>)
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4911      	ldr	r1, [pc, #68]	; (8002d14 <SystemInit+0x5c>)
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <SystemInit+0x60>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <SystemInit+0x5c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <SystemInit+0x5c>)
 8002cda:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <SystemInit+0x5c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <SystemInit+0x5c>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <SystemInit+0x5c>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <SystemInit+0x5c>)
 8002cf6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002cfa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <SystemInit+0x5c>)
 8002cfe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002d02:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <SystemInit+0x64>)
 8002d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	40021000 	.word	0x40021000
 8002d18:	f8ff0000 	.word	0xf8ff0000
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d22:	e003      	b.n	8002d2c <LoopCopyDataInit>

08002d24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d2a:	3104      	adds	r1, #4

08002d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d2c:	480a      	ldr	r0, [pc, #40]	; (8002d58 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d34:	d3f6      	bcc.n	8002d24 <CopyDataInit>
  ldr r2, =_sbss
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d38:	e002      	b.n	8002d40 <LoopFillZerobss>

08002d3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d3c:	f842 3b04 	str.w	r3, [r2], #4

08002d40 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d44:	d3f9      	bcc.n	8002d3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d46:	f7ff ffb7 	bl	8002cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d4a:	f002 fe73 	bl	8005a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d4e:	f7ff fadd 	bl	800230c <main>
  bx lr
 8002d52:	4770      	bx	lr
  ldr r3, =_sidata
 8002d54:	08009448 	.word	0x08009448
  ldr r0, =_sdata
 8002d58:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d5c:	20000608 	.word	0x20000608
  ldr r2, =_sbss
 8002d60:	20000608 	.word	0x20000608
  ldr r3, = _ebss
 8002d64:	20000c38 	.word	0x20000c38

08002d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d68:	e7fe      	b.n	8002d68 <ADC1_2_IRQHandler>
	...

08002d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_Init+0x28>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <HAL_Init+0x28>)
 8002d76:	f043 0310 	orr.w	r3, r3, #16
 8002d7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	f000 f929 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f000 f808 	bl	8002d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d88:	f7ff fd90 	bl	80028ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40022000 	.word	0x40022000

08002d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_InitTick+0x54>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_InitTick+0x58>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f933 	bl	8003022 <HAL_SYSTICK_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00e      	b.n	8002de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d80a      	bhi.n	8002de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f000 f909 	bl	8002fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd8:	4a06      	ldr	r2, [pc, #24]	; (8002df4 <HAL_InitTick+0x5c>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	2000042c 	.word	0x2000042c
 8002df0:	20000434 	.word	0x20000434
 8002df4:	20000430 	.word	0x20000430

08002df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_IncTick+0x1c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_IncTick+0x20>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4413      	add	r3, r2
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <HAL_IncTick+0x20>)
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000434 	.word	0x20000434
 8002e18:	20000c30 	.word	0x20000c30

08002e1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <HAL_GetTick+0x10>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	20000c30 	.word	0x20000c30

08002e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7ff fff0 	bl	8002e1c <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d005      	beq.n	8002e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_Delay+0x40>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e56:	bf00      	nop
 8002e58:	f7ff ffe0 	bl	8002e1c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d8f7      	bhi.n	8002e58 <HAL_Delay+0x28>
  {
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000434 	.word	0x20000434

08002e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e90:	4013      	ands	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea6:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	60d3      	str	r3, [r2, #12]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	f003 0307 	and.w	r3, r3, #7
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	; (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf28      	it	cs
 8002f4a:	2304      	movcs	r3, #4
 8002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d902      	bls.n	8002f5c <NVIC_EncodePriority+0x30>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	e000      	b.n	8002f5e <NVIC_EncodePriority+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	4313      	orrs	r3, r2
         );
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa0:	d301      	bcc.n	8002fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <SysTick_Config+0x40>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fae:	210f      	movs	r1, #15
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	f7ff ff90 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <SysTick_Config+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fbe:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <SysTick_Config+0x40>)
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff49 	bl	8002e74 <__NVIC_SetPriorityGrouping>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff5e 	bl	8002ebc <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ff90 	bl	8002f2c <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff5f 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ffb0 	bl	8002f90 <SysTick_Config>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800303c:	b480      	push	{r7}
 800303e:	b08b      	sub	sp, #44	; 0x2c
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304e:	e127      	b.n	80032a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003050:	2201      	movs	r2, #1
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	429a      	cmp	r2, r3
 800306a:	f040 8116 	bne.w	800329a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b12      	cmp	r3, #18
 8003074:	d034      	beq.n	80030e0 <HAL_GPIO_Init+0xa4>
 8003076:	2b12      	cmp	r3, #18
 8003078:	d80d      	bhi.n	8003096 <HAL_GPIO_Init+0x5a>
 800307a:	2b02      	cmp	r3, #2
 800307c:	d02b      	beq.n	80030d6 <HAL_GPIO_Init+0x9a>
 800307e:	2b02      	cmp	r3, #2
 8003080:	d804      	bhi.n	800308c <HAL_GPIO_Init+0x50>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d031      	beq.n	80030ea <HAL_GPIO_Init+0xae>
 8003086:	2b01      	cmp	r3, #1
 8003088:	d01c      	beq.n	80030c4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800308a:	e048      	b.n	800311e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800308c:	2b03      	cmp	r3, #3
 800308e:	d043      	beq.n	8003118 <HAL_GPIO_Init+0xdc>
 8003090:	2b11      	cmp	r3, #17
 8003092:	d01b      	beq.n	80030cc <HAL_GPIO_Init+0x90>
          break;
 8003094:	e043      	b.n	800311e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003096:	4a89      	ldr	r2, [pc, #548]	; (80032bc <HAL_GPIO_Init+0x280>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d026      	beq.n	80030ea <HAL_GPIO_Init+0xae>
 800309c:	4a87      	ldr	r2, [pc, #540]	; (80032bc <HAL_GPIO_Init+0x280>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d806      	bhi.n	80030b0 <HAL_GPIO_Init+0x74>
 80030a2:	4a87      	ldr	r2, [pc, #540]	; (80032c0 <HAL_GPIO_Init+0x284>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d020      	beq.n	80030ea <HAL_GPIO_Init+0xae>
 80030a8:	4a86      	ldr	r2, [pc, #536]	; (80032c4 <HAL_GPIO_Init+0x288>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <HAL_GPIO_Init+0xae>
          break;
 80030ae:	e036      	b.n	800311e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030b0:	4a85      	ldr	r2, [pc, #532]	; (80032c8 <HAL_GPIO_Init+0x28c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0xae>
 80030b6:	4a85      	ldr	r2, [pc, #532]	; (80032cc <HAL_GPIO_Init+0x290>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d016      	beq.n	80030ea <HAL_GPIO_Init+0xae>
 80030bc:	4a84      	ldr	r2, [pc, #528]	; (80032d0 <HAL_GPIO_Init+0x294>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_GPIO_Init+0xae>
          break;
 80030c2:	e02c      	b.n	800311e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	623b      	str	r3, [r7, #32]
          break;
 80030ca:	e028      	b.n	800311e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	3304      	adds	r3, #4
 80030d2:	623b      	str	r3, [r7, #32]
          break;
 80030d4:	e023      	b.n	800311e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	3308      	adds	r3, #8
 80030dc:	623b      	str	r3, [r7, #32]
          break;
 80030de:	e01e      	b.n	800311e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	330c      	adds	r3, #12
 80030e6:	623b      	str	r3, [r7, #32]
          break;
 80030e8:	e019      	b.n	800311e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030f2:	2304      	movs	r3, #4
 80030f4:	623b      	str	r3, [r7, #32]
          break;
 80030f6:	e012      	b.n	800311e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003100:	2308      	movs	r3, #8
 8003102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	611a      	str	r2, [r3, #16]
          break;
 800310a:	e008      	b.n	800311e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800310c:	2308      	movs	r3, #8
 800310e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	615a      	str	r2, [r3, #20]
          break;
 8003116:	e002      	b.n	800311e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
          break;
 800311c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2bff      	cmp	r3, #255	; 0xff
 8003122:	d801      	bhi.n	8003128 <HAL_GPIO_Init+0xec>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	e001      	b.n	800312c <HAL_GPIO_Init+0xf0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2bff      	cmp	r3, #255	; 0xff
 8003132:	d802      	bhi.n	800313a <HAL_GPIO_Init+0xfe>
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	e002      	b.n	8003140 <HAL_GPIO_Init+0x104>
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	3b08      	subs	r3, #8
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	210f      	movs	r1, #15
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	401a      	ands	r2, r3
 8003152:	6a39      	ldr	r1, [r7, #32]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	431a      	orrs	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8096 	beq.w	800329a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800316e:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_GPIO_Init+0x298>)
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_GPIO_Init+0x298>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6193      	str	r3, [r2, #24]
 800317a:	4b56      	ldr	r3, [pc, #344]	; (80032d4 <HAL_GPIO_Init+0x298>)
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003186:	4a54      	ldr	r2, [pc, #336]	; (80032d8 <HAL_GPIO_Init+0x29c>)
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003192:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	220f      	movs	r2, #15
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4013      	ands	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4b      	ldr	r2, [pc, #300]	; (80032dc <HAL_GPIO_Init+0x2a0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x19e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4a      	ldr	r2, [pc, #296]	; (80032e0 <HAL_GPIO_Init+0x2a4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x19a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a49      	ldr	r2, [pc, #292]	; (80032e4 <HAL_GPIO_Init+0x2a8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x196>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a48      	ldr	r2, [pc, #288]	; (80032e8 <HAL_GPIO_Init+0x2ac>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x192>
 80031ca:	2303      	movs	r3, #3
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x1a0>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e004      	b.n	80031dc <HAL_GPIO_Init+0x1a0>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e002      	b.n	80031dc <HAL_GPIO_Init+0x1a0>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_GPIO_Init+0x1a0>
 80031da:	2300      	movs	r3, #0
 80031dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031de:	f002 0203 	and.w	r2, r2, #3
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	4093      	lsls	r3, r2
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031ec:	493a      	ldr	r1, [pc, #232]	; (80032d8 <HAL_GPIO_Init+0x29c>)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003206:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4938      	ldr	r1, [pc, #224]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
 8003212:	e006      	b.n	8003222 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003214:	4b35      	ldr	r3, [pc, #212]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	43db      	mvns	r3, r3
 800321c:	4933      	ldr	r1, [pc, #204]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 800321e:	4013      	ands	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d006      	beq.n	800323c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800322e:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	492e      	ldr	r1, [pc, #184]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
 800323a:	e006      	b.n	800324a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	43db      	mvns	r3, r3
 8003244:	4929      	ldr	r1, [pc, #164]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003246:	4013      	ands	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d006      	beq.n	8003264 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003256:	4b25      	ldr	r3, [pc, #148]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	4924      	ldr	r1, [pc, #144]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
 8003262:	e006      	b.n	8003272 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	43db      	mvns	r3, r3
 800326c:	491f      	ldr	r1, [pc, #124]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 800326e:	4013      	ands	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d006      	beq.n	800328c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	491a      	ldr	r1, [pc, #104]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	60cb      	str	r3, [r1, #12]
 800328a:	e006      	b.n	800329a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800328c:	4b17      	ldr	r3, [pc, #92]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	43db      	mvns	r3, r3
 8003294:	4915      	ldr	r1, [pc, #84]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 8003296:	4013      	ands	r3, r2
 8003298:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	3301      	adds	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f47f aed0 	bne.w	8003050 <HAL_GPIO_Init+0x14>
  }
}
 80032b0:	bf00      	nop
 80032b2:	372c      	adds	r7, #44	; 0x2c
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	10210000 	.word	0x10210000
 80032c0:	10110000 	.word	0x10110000
 80032c4:	10120000 	.word	0x10120000
 80032c8:	10310000 	.word	0x10310000
 80032cc:	10320000 	.word	0x10320000
 80032d0:	10220000 	.word	0x10220000
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40010800 	.word	0x40010800
 80032e0:	40010c00 	.word	0x40010c00
 80032e4:	40011000 	.word	0x40011000
 80032e8:	40011400 	.word	0x40011400
 80032ec:	40010400 	.word	0x40010400

080032f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
 80032fc:	4613      	mov	r3, r2
 80032fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003300:	787b      	ldrb	r3, [r7, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800330c:	e003      	b.n	8003316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	041a      	lsls	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003338:	887a      	ldrh	r2, [r7, #2]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800333e:	e002      	b.n	8003346 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003340:	887a      	ldrh	r2, [r7, #2]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	420e0020 	.word	0x420e0020

08003368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e26c      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8087 	beq.w	8003496 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003388:	4b92      	ldr	r3, [pc, #584]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b04      	cmp	r3, #4
 8003392:	d00c      	beq.n	80033ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003394:	4b8f      	ldr	r3, [pc, #572]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d112      	bne.n	80033c6 <HAL_RCC_OscConfig+0x5e>
 80033a0:	4b8c      	ldr	r3, [pc, #560]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d10b      	bne.n	80033c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ae:	4b89      	ldr	r3, [pc, #548]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d06c      	beq.n	8003494 <HAL_RCC_OscConfig+0x12c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d168      	bne.n	8003494 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e246      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ce:	d106      	bne.n	80033de <HAL_RCC_OscConfig+0x76>
 80033d0:	4b80      	ldr	r3, [pc, #512]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a7f      	ldr	r2, [pc, #508]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e02e      	b.n	800343c <HAL_RCC_OscConfig+0xd4>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x98>
 80033e6:	4b7b      	ldr	r3, [pc, #492]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a7a      	ldr	r2, [pc, #488]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b78      	ldr	r3, [pc, #480]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a77      	ldr	r2, [pc, #476]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e01d      	b.n	800343c <HAL_RCC_OscConfig+0xd4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0xbc>
 800340a:	4b72      	ldr	r3, [pc, #456]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a71      	ldr	r2, [pc, #452]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b6f      	ldr	r3, [pc, #444]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6e      	ldr	r2, [pc, #440]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0xd4>
 8003424:	4b6b      	ldr	r3, [pc, #428]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6a      	ldr	r2, [pc, #424]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 800342a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a67      	ldr	r2, [pc, #412]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7ff fcea 	bl	8002e1c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7ff fce6 	bl	8002e1c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1fa      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b5d      	ldr	r3, [pc, #372]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0xe4>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7ff fcd6 	bl	8002e1c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003474:	f7ff fcd2 	bl	8002e1c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1e6      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x10c>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d063      	beq.n	800356a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034a2:	4b4c      	ldr	r3, [pc, #304]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034ae:	4b49      	ldr	r3, [pc, #292]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x18c>
 80034ba:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d116      	bne.n	80034f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x176>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1ba      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4939      	ldr	r1, [pc, #228]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e03a      	b.n	800356a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_RCC_OscConfig+0x270>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7ff fc8b 	bl	8002e1c <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350a:	f7ff fc87 	bl	8002e1c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e19b      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4927      	ldr	r1, [pc, #156]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <HAL_RCC_OscConfig+0x270>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7ff fc6a 	bl	8002e1c <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354c:	f7ff fc66 	bl	8002e1c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e17a      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d03a      	beq.n	80035ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d019      	beq.n	80035b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357e:	4b17      	ldr	r3, [pc, #92]	; (80035dc <HAL_RCC_OscConfig+0x274>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7ff fc4a 	bl	8002e1c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358c:	f7ff fc46 	bl	8002e1c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e15a      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035aa:	2001      	movs	r0, #1
 80035ac:	f000 fada 	bl	8003b64 <RCC_Delay>
 80035b0:	e01c      	b.n	80035ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_RCC_OscConfig+0x274>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b8:	f7ff fc30 	bl	8002e1c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035be:	e00f      	b.n	80035e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c0:	f7ff fc2c 	bl	8002e1c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d908      	bls.n	80035e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e140      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	42420000 	.word	0x42420000
 80035dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	4b9e      	ldr	r3, [pc, #632]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e9      	bne.n	80035c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80a6 	beq.w	8003746 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fe:	4b97      	ldr	r3, [pc, #604]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10d      	bne.n	8003626 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	4b94      	ldr	r3, [pc, #592]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	4a93      	ldr	r2, [pc, #588]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003614:	61d3      	str	r3, [r2, #28]
 8003616:	4b91      	ldr	r3, [pc, #580]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b8e      	ldr	r3, [pc, #568]	; (8003860 <HAL_RCC_OscConfig+0x4f8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003632:	4b8b      	ldr	r3, [pc, #556]	; (8003860 <HAL_RCC_OscConfig+0x4f8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a8a      	ldr	r2, [pc, #552]	; (8003860 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7ff fbed 	bl	8002e1c <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003646:	f7ff fbe9 	bl	8002e1c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b64      	cmp	r3, #100	; 0x64
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e0fd      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCC_OscConfig+0x4f8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x312>
 800366c:	4b7b      	ldr	r3, [pc, #492]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4a7a      	ldr	r2, [pc, #488]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6213      	str	r3, [r2, #32]
 8003678:	e02d      	b.n	80036d6 <HAL_RCC_OscConfig+0x36e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x334>
 8003682:	4b76      	ldr	r3, [pc, #472]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a75      	ldr	r2, [pc, #468]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	4b73      	ldr	r3, [pc, #460]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4a72      	ldr	r2, [pc, #456]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003694:	f023 0304 	bic.w	r3, r3, #4
 8003698:	6213      	str	r3, [r2, #32]
 800369a:	e01c      	b.n	80036d6 <HAL_RCC_OscConfig+0x36e>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d10c      	bne.n	80036be <HAL_RCC_OscConfig+0x356>
 80036a4:	4b6d      	ldr	r3, [pc, #436]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4a6c      	ldr	r2, [pc, #432]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80036aa:	f043 0304 	orr.w	r3, r3, #4
 80036ae:	6213      	str	r3, [r2, #32]
 80036b0:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4a69      	ldr	r2, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6213      	str	r3, [r2, #32]
 80036bc:	e00b      	b.n	80036d6 <HAL_RCC_OscConfig+0x36e>
 80036be:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6213      	str	r3, [r2, #32]
 80036ca:	4b64      	ldr	r3, [pc, #400]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4a63      	ldr	r2, [pc, #396]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	f023 0304 	bic.w	r3, r3, #4
 80036d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d015      	beq.n	800370a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036de:	f7ff fb9d 	bl	8002e1c <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e6:	f7ff fb99 	bl	8002e1c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e0ab      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fc:	4b57      	ldr	r3, [pc, #348]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ee      	beq.n	80036e6 <HAL_RCC_OscConfig+0x37e>
 8003708:	e014      	b.n	8003734 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7ff fb87 	bl	8002e1c <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003710:	e00a      	b.n	8003728 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003712:	f7ff fb83 	bl	8002e1c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003720:	4293      	cmp	r3, r2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e095      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003728:	4b4c      	ldr	r3, [pc, #304]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ee      	bne.n	8003712 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d105      	bne.n	8003746 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373a:	4b48      	ldr	r3, [pc, #288]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	4a47      	ldr	r2, [pc, #284]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003744:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8081 	beq.w	8003852 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003750:	4b42      	ldr	r3, [pc, #264]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d061      	beq.n	8003820 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d146      	bne.n	80037f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003764:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <HAL_RCC_OscConfig+0x4fc>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376a:	f7ff fb57 	bl	8002e1c <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003772:	f7ff fb53 	bl	8002e1c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e067      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003784:	4b35      	ldr	r3, [pc, #212]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d108      	bne.n	80037ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800379a:	4b30      	ldr	r3, [pc, #192]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	492d      	ldr	r1, [pc, #180]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a19      	ldr	r1, [r3, #32]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	430b      	orrs	r3, r1
 80037be:	4927      	ldr	r1, [pc, #156]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_OscConfig+0x4fc>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7ff fb27 	bl	8002e1c <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d2:	f7ff fb23 	bl	8002e1c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e037      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x46a>
 80037f0:	e02f      	b.n	8003852 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_RCC_OscConfig+0x4fc>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7ff fb10 	bl	8002e1c <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7ff fb0c 	bl	8002e1c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e020      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x498>
 800381e:	e018      	b.n	8003852 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e013      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_OscConfig+0x4f4>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	429a      	cmp	r2, r3
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
 8003864:	42420060 	.word	0x42420060

08003868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0d0      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d910      	bls.n	80038ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 0207 	bic.w	r2, r3, #7
 8003892:	4965      	ldr	r1, [pc, #404]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0b8      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	494d      	ldr	r1, [pc, #308]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d040      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d115      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e073      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06b      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4936      	ldr	r1, [pc, #216]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7ff fa60 	bl	8002e1c <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7ff fa5c 	bl	8002e1c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e053      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2d      	ldr	r3, [pc, #180]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d210      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 0207 	bic.w	r2, r3, #7
 800399e:	4922      	ldr	r1, [pc, #136]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4916      	ldr	r1, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490e      	ldr	r1, [pc, #56]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039f6:	f000 f821 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039fa:	4601      	mov	r1, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a08:	5cd3      	ldrb	r3, [r2, r3]
 8003a0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1cc>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1d0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff f9be 	bl	8002d98 <HAL_InitTick>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08009168 	.word	0x08009168
 8003a34:	2000042c 	.word	0x2000042c
 8003a38:	20000430 	.word	0x20000430

08003a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b490      	push	{r4, r7}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a42:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a44:	1d3c      	adds	r4, r7, #4
 8003a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a4c:	4b28      	ldr	r3, [pc, #160]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x40>
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x46>
 8003a7a:	e02d      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a7e:	623b      	str	r3, [r7, #32]
      break;
 8003a80:	e02d      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	0c9b      	lsrs	r3, r3, #18
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a8e:	4413      	add	r3, r2
 8003a90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0c5b      	lsrs	r3, r3, #17
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003aae:	4413      	add	r3, r2
 8003ab0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ab4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aba:	fb02 f203 	mul.w	r2, r2, r3
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac6:	e004      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003acc:	fb02 f303 	mul.w	r3, r2, r3
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	623b      	str	r3, [r7, #32]
      break;
 8003ad6:	e002      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ada:	623b      	str	r3, [r7, #32]
      break;
 8003adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ade:	6a3b      	ldr	r3, [r7, #32]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3728      	adds	r7, #40	; 0x28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc90      	pop	{r4, r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	08008a20 	.word	0x08008a20
 8003af0:	08008a30 	.word	0x08008a30
 8003af4:	40021000 	.word	0x40021000
 8003af8:	007a1200 	.word	0x007a1200
 8003afc:	003d0900 	.word	0x003d0900

08003b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b04:	4b02      	ldr	r3, [pc, #8]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	2000042c 	.word	0x2000042c

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b18:	f7ff fff2 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4601      	mov	r1, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4a03      	ldr	r2, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	08009178 	.word	0x08009178

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b40:	f7ff ffde 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b44:	4601      	mov	r1, r0
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	0adb      	lsrs	r3, r3, #11
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b52:	5cd3      	ldrb	r3, [r2, r3]
 8003b54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08009178 	.word	0x08009178

08003b64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <RCC_Delay+0x34>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <RCC_Delay+0x38>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0a5b      	lsrs	r3, r3, #9
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b80:	bf00      	nop
  }
  while (Delay --);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1e5a      	subs	r2, r3, #1
 8003b86:	60fa      	str	r2, [r7, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f9      	bne.n	8003b80 <RCC_Delay+0x1c>
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	2000042c 	.word	0x2000042c
 8003b9c:	10624dd3 	.word	0x10624dd3

08003ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d07d      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc0:	4b4f      	ldr	r3, [pc, #316]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10d      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bcc:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	4a4b      	ldr	r2, [pc, #300]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	61d3      	str	r3, [r2, #28]
 8003bd8:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d118      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf4:	4b43      	ldr	r3, [pc, #268]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a42      	ldr	r2, [pc, #264]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c00:	f7ff f90c 	bl	8002e1c <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	e008      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7ff f908 	bl	8002e1c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e06d      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b3a      	ldr	r3, [pc, #232]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c26:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d02e      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d027      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c44:	4b2e      	ldr	r3, [pc, #184]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4e:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c54:	4b2c      	ldr	r3, [pc, #176]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c5a:	4a29      	ldr	r2, [pc, #164]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d014      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7ff f8d7 	bl	8002e1c <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7ff f8d3 	bl	8002e1c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e036      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ee      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c94:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4917      	ldr	r1, [pc, #92]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	490b      	ldr	r1, [pc, #44]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4904      	ldr	r1, [pc, #16]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40007000 	.word	0x40007000
 8003d08:	42420440 	.word	0x42420440

08003d0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b08d      	sub	sp, #52	; 0x34
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d14:	4b55      	ldr	r3, [pc, #340]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003d16:	f107 040c 	add.w	r4, r7, #12
 8003d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d20:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2e:	2300      	movs	r3, #0
 8003d30:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	2300      	movs	r3, #0
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d07f      	beq.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d002      	beq.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d048      	beq.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d48:	e08b      	b.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003d4a:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d50:	4b48      	ldr	r3, [pc, #288]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d07f      	beq.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	0c9b      	lsrs	r3, r3, #18
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d68:	4413      	add	r3, r2
 8003d6a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d6e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d7a:	4b3e      	ldr	r3, [pc, #248]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	0c5b      	lsrs	r3, r3, #17
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d88:	4413      	add	r3, r2
 8003d8a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d9a:	4a37      	ldr	r2, [pc, #220]	; (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003daa:	e004      	b.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	4a33      	ldr	r2, [pc, #204]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003db0:	fb02 f303 	mul.w	r3, r2, r3
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003db6:	4b2f      	ldr	r3, [pc, #188]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc2:	d102      	bne.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dc8:	e048      	b.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4a2c      	ldr	r2, [pc, #176]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dd8:	e040      	b.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003dda:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dea:	d108      	bne.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dfc:	e01f      	b.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e08:	d109      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003e0a:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003e16:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1c:	e00f      	b.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e28:	d11a      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d014      	beq.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003e36:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e3c:	e010      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003e3e:	e00f      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e40:	f7ff fe7c 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	0b9b      	lsrs	r3, r3, #14
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	3301      	adds	r3, #1
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003e60:	bf00      	nop
    }
  }
  return (frequency);
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3734      	adds	r7, #52	; 0x34
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}
 8003e6c:	08008a34 	.word	0x08008a34
 8003e70:	08008a44 	.word	0x08008a44
 8003e74:	40021000 	.word	0x40021000
 8003e78:	007a1200 	.word	0x007a1200
 8003e7c:	003d0900 	.word	0x003d0900
 8003e80:	aaaaaaab 	.word	0xaaaaaaab

08003e84 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e084      	b.n	8003fa4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7c5b      	ldrb	r3, [r3, #17]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fe fd30 	bl	8002910 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9c8 	bl	800424c <HAL_RTC_WaitForSynchro>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e06b      	b.n	8003fa4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fa81 	bl	80043d4 <RTC_EnterInitMode>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d004      	beq.n	8003ee2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2204      	movs	r2, #4
 8003edc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e060      	b.n	8003fa4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0207 	bic.w	r2, r2, #7
 8003ef0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003efa:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <HAL_RTC_Init+0x128>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <HAL_RTC_Init+0x128>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003f06:	4b29      	ldr	r3, [pc, #164]	; (8003fac <HAL_RTC_Init+0x128>)
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4926      	ldr	r1, [pc, #152]	; (8003fac <HAL_RTC_Init+0x128>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d003      	beq.n	8003f2a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e00e      	b.n	8003f48 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f7ff feee 	bl	8003d0c <HAL_RCCEx_GetPeriphCLKFreq>
 8003f30:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e030      	b.n	8003fa4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 010f 	bic.w	r1, r3, #15
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0c1a      	lsrs	r2, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	b291      	uxth	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fa55 	bl	8004424 <RTC_ExitInitMode>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2204      	movs	r2, #4
 8003f84:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e00c      	b.n	8003fa4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40006c00 	.word	0x40006c00

08003fb0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_RTC_SetTime+0x20>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e080      	b.n	80040d6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	7c1b      	ldrb	r3, [r3, #16]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_RTC_SetTime+0x30>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e07a      	b.n	80040d6 <HAL_RTC_SetTime+0x126>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003ffc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	4619      	mov	r1, r3
 8004006:	460b      	mov	r3, r1
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a5b      	subs	r3, r3, r1
 800400c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800400e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004014:	4413      	add	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e01e      	b.n	8004058 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fa28 	bl	8004474 <RTC_Bcd2ToByte>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800402c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fa1d 	bl	8004474 <RTC_Bcd2ToByte>
 800403a:	4603      	mov	r3, r0
 800403c:	461a      	mov	r2, r3
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004046:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	789b      	ldrb	r3, [r3, #2]
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fa11 	bl	8004474 <RTC_Bcd2ToByte>
 8004052:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004054:	4423      	add	r3, r4
 8004056:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004058:	6979      	ldr	r1, [r7, #20]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f953 	bl	8004306 <RTC_WriteTimeCounter>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2204      	movs	r2, #4
 800406a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e02f      	b.n	80040d6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0205 	bic.w	r2, r2, #5
 8004084:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f964 	bl	8004354 <RTC_ReadAlarmCounter>
 800408c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d018      	beq.n	80040c8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	429a      	cmp	r2, r3
 800409c:	d214      	bcs.n	80040c8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80040a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040a8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040aa:	6939      	ldr	r1, [r7, #16]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f96a 	bl	8004386 <RTC_WriteAlarmCounter>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2204      	movs	r2, #4
 80040bc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e006      	b.n	80040d6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd90      	pop	{r4, r7, pc}
	...

080040e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_RTC_SetDate+0x24>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e097      	b.n	8004238 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	7c1b      	ldrb	r3, [r3, #16]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_RTC_SetDate+0x34>
 8004110:	2302      	movs	r3, #2
 8004112:	e091      	b.n	8004238 <HAL_RTC_SetDate+0x158>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2202      	movs	r2, #2
 800411e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10c      	bne.n	8004140 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	78da      	ldrb	r2, [r3, #3]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	785a      	ldrb	r2, [r3, #1]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	789a      	ldrb	r2, [r3, #2]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	739a      	strb	r2, [r3, #14]
 800413e:	e01a      	b.n	8004176 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	78db      	ldrb	r3, [r3, #3]
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f995 	bl	8004474 <RTC_Bcd2ToByte>
 800414a:	4603      	mov	r3, r0
 800414c:	461a      	mov	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f98c 	bl	8004474 <RTC_Bcd2ToByte>
 800415c:	4603      	mov	r3, r0
 800415e:	461a      	mov	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	789b      	ldrb	r3, [r3, #2]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f983 	bl	8004474 <RTC_Bcd2ToByte>
 800416e:	4603      	mov	r3, r0
 8004170:	461a      	mov	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	7bdb      	ldrb	r3, [r3, #15]
 800417a:	4618      	mov	r0, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	7b59      	ldrb	r1, [r3, #13]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	7b9b      	ldrb	r3, [r3, #14]
 8004184:	461a      	mov	r2, r3
 8004186:	f000 f993 	bl	80044b0 <RTC_WeekDayNum>
 800418a:	4603      	mov	r3, r0
 800418c:	461a      	mov	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	7b1a      	ldrb	r2, [r3, #12]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f883 	bl	80042a6 <RTC_ReadTimeCounter>
 80041a0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4a26      	ldr	r2, [pc, #152]	; (8004240 <HAL_RTC_SetDate+0x160>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0adb      	lsrs	r3, r3, #11
 80041ac:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b18      	cmp	r3, #24
 80041b2:	d93a      	bls.n	800422a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4a23      	ldr	r2, [pc, #140]	; (8004244 <HAL_RTC_SetDate+0x164>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	4a22      	ldr	r2, [pc, #136]	; (8004248 <HAL_RTC_SetDate+0x168>)
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80041ca:	69f9      	ldr	r1, [r7, #28]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f89a 	bl	8004306 <RTC_WriteTimeCounter>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2204      	movs	r2, #4
 80041dc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e027      	b.n	8004238 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f8b3 	bl	8004354 <RTC_ReadAlarmCounter>
 80041ee:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d018      	beq.n	800422a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d214      	bcs.n	800422a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004206:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800420a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800420c:	69b9      	ldr	r1, [r7, #24]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f8b9 	bl	8004386 <RTC_WriteAlarmCounter>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2204      	movs	r2, #4
 800421e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e006      	b.n	8004238 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3720      	adds	r7, #32
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	91a2b3c5 	.word	0x91a2b3c5
 8004244:	aaaaaaab 	.word	0xaaaaaaab
 8004248:	00015180 	.word	0x00015180

0800424c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e01d      	b.n	800429e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0208 	bic.w	r2, r2, #8
 8004270:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004272:	f7fe fdd3 	bl	8002e1c <HAL_GetTick>
 8004276:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004278:	e009      	b.n	800428e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800427a:	f7fe fdcf 	bl	8002e1c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004288:	d901      	bls.n	800428e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e007      	b.n	800429e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ee      	beq.n	800427a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	827b      	strh	r3, [r7, #18]
 80042b2:	2300      	movs	r3, #0
 80042b4:	823b      	strh	r3, [r7, #16]
 80042b6:	2300      	movs	r3, #0
 80042b8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80042d6:	8a7a      	ldrh	r2, [r7, #18]
 80042d8:	8a3b      	ldrh	r3, [r7, #16]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d008      	beq.n	80042f0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80042de:	8a3b      	ldrh	r3, [r7, #16]
 80042e0:	041a      	lsls	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e004      	b.n	80042fa <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80042f0:	8a7b      	ldrh	r3, [r7, #18]
 80042f2:	041a      	lsls	r2, r3, #16
 80042f4:	89fb      	ldrh	r3, [r7, #14]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80042fa:	697b      	ldr	r3, [r7, #20]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f85d 	bl	80043d4 <RTC_EnterInitMode>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
 8004324:	e011      	b.n	800434a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	0c12      	lsrs	r2, r2, #16
 800432e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	b292      	uxth	r2, r2
 8004338:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f872 	bl	8004424 <RTC_ExitInitMode>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	81fb      	strh	r3, [r7, #14]
 8004360:	2300      	movs	r3, #0
 8004362:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	041a      	lsls	r2, r3, #16
 8004378:	89bb      	ldrh	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f81d 	bl	80043d4 <RTC_EnterInitMode>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e011      	b.n	80043ca <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	0c12      	lsrs	r2, r2, #16
 80043ae:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	b292      	uxth	r2, r2
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f832 	bl	8004424 <RTC_ExitInitMode>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80043e0:	f7fe fd1c 	bl	8002e1c <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043e6:	e009      	b.n	80043fc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80043e8:	f7fe fd18 	bl	8002e1c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043f6:	d901      	bls.n	80043fc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e00f      	b.n	800441c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ee      	beq.n	80043e8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0210 	orr.w	r2, r2, #16
 8004418:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0210 	bic.w	r2, r2, #16
 800443e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004440:	f7fe fcec 	bl	8002e1c <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004446:	e009      	b.n	800445c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004448:	f7fe fce8 	bl	8002e1c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004456:	d901      	bls.n	800445c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e007      	b.n	800446c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ee      	beq.n	8004448 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	b2db      	uxtb	r3, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
	...

080044b0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
 80044bc:	4613      	mov	r3, r2
 80044be:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80044ce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d82d      	bhi.n	8004532 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	4613      	mov	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <RTC_WeekDayNum+0xe4>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	085a      	lsrs	r2, r3, #1
 80044ea:	78bb      	ldrb	r3, [r7, #2]
 80044ec:	441a      	add	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	441a      	add	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	4926      	ldr	r1, [pc, #152]	; (8004598 <RTC_WeekDayNum+0xe8>)
 8004500:	fba1 1303 	umull	r1, r3, r1, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	1ad2      	subs	r2, r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3b01      	subs	r3, #1
 800450c:	4922      	ldr	r1, [pc, #136]	; (8004598 <RTC_WeekDayNum+0xe8>)
 800450e:	fba1 1303 	umull	r1, r3, r1, r3
 8004512:	09db      	lsrs	r3, r3, #7
 8004514:	4413      	add	r3, r2
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	4b20      	ldr	r3, [pc, #128]	; (800459c <RTC_WeekDayNum+0xec>)
 800451a:	fba3 1302 	umull	r1, r3, r3, r2
 800451e:	1ad1      	subs	r1, r2, r3
 8004520:	0849      	lsrs	r1, r1, #1
 8004522:	440b      	add	r3, r1
 8004524:	0899      	lsrs	r1, r3, #2
 8004526:	460b      	mov	r3, r1
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	1a5b      	subs	r3, r3, r1
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	e029      	b.n	8004586 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	4a15      	ldr	r2, [pc, #84]	; (8004594 <RTC_WeekDayNum+0xe4>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	085a      	lsrs	r2, r3, #1
 8004546:	78bb      	ldrb	r3, [r7, #2]
 8004548:	441a      	add	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	441a      	add	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	441a      	add	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4910      	ldr	r1, [pc, #64]	; (8004598 <RTC_WeekDayNum+0xe8>)
 8004558:	fba1 1303 	umull	r1, r3, r1, r3
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	1ad2      	subs	r2, r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	490d      	ldr	r1, [pc, #52]	; (8004598 <RTC_WeekDayNum+0xe8>)
 8004564:	fba1 1303 	umull	r1, r3, r1, r3
 8004568:	09db      	lsrs	r3, r3, #7
 800456a:	4413      	add	r3, r2
 800456c:	1c9a      	adds	r2, r3, #2
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <RTC_WeekDayNum+0xec>)
 8004570:	fba3 1302 	umull	r1, r3, r3, r2
 8004574:	1ad1      	subs	r1, r2, r3
 8004576:	0849      	lsrs	r1, r1, #1
 8004578:	440b      	add	r3, r1
 800457a:	0899      	lsrs	r1, r3, #2
 800457c:	460b      	mov	r3, r1
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	1a5b      	subs	r3, r3, r1
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	b2db      	uxtb	r3, r3
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	38e38e39 	.word	0x38e38e39
 8004598:	51eb851f 	.word	0x51eb851f
 800459c:	24924925 	.word	0x24924925

080045a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e053      	b.n	800465a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fe f9c3 	bl	8002958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2202      	movs	r2, #2
 80045d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	ea42 0103 	orr.w	r1, r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	0c1a      	lsrs	r2, r3, #16
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f002 0204 	and.w	r2, r2, #4
 8004638:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004648:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b08c      	sub	sp, #48	; 0x30
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004670:	2301      	movs	r3, #1
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x26>
 8004684:	2302      	movs	r3, #2
 8004686:	e18a      	b.n	800499e <HAL_SPI_TransmitReceive+0x33c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004690:	f7fe fbc4 	bl	8002e1c <HAL_GetTick>
 8004694:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800469c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d00f      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x70>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b8:	d107      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x68>
 80046c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d003      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
 80046cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046d0:	e15b      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x82>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x82>
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046ea:	e14e      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d003      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2205      	movs	r2, #5
 80046fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	887a      	ldrh	r2, [r7, #2]
 8004710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	887a      	ldrh	r2, [r7, #2]
 8004716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d007      	beq.n	8004754 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475c:	d178      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_SPI_TransmitReceive+0x10a>
 8004766:	8b7b      	ldrh	r3, [r7, #26]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d166      	bne.n	800483a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	881a      	ldrh	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004790:	e053      	b.n	800483a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d11b      	bne.n	80047d8 <HAL_SPI_TransmitReceive+0x176>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d016      	beq.n	80047d8 <HAL_SPI_TransmitReceive+0x176>
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d113      	bne.n	80047d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d119      	bne.n	800481a <HAL_SPI_TransmitReceive+0x1b8>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d014      	beq.n	800481a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	b292      	uxth	r2, r2
 80047fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004816:	2301      	movs	r3, #1
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800481a:	f7fe faff 	bl	8002e1c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004826:	429a      	cmp	r2, r3
 8004828:	d807      	bhi.n	800483a <HAL_SPI_TransmitReceive+0x1d8>
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d003      	beq.n	800483a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004838:	e0a7      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1a6      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x130>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1a1      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x130>
 800484e:	e07c      	b.n	800494a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_SPI_TransmitReceive+0x1fc>
 8004858:	8b7b      	ldrh	r3, [r7, #26]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d16b      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004884:	e057      	b.n	8004936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b02      	cmp	r3, #2
 8004892:	d11c      	bne.n	80048ce <HAL_SPI_TransmitReceive+0x26c>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d017      	beq.n	80048ce <HAL_SPI_TransmitReceive+0x26c>
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d114      	bne.n	80048ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d119      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x2ae>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d014      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800490c:	2301      	movs	r3, #1
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004910:	f7fe fa84 	bl	8002e1c <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800491c:	429a      	cmp	r2, r3
 800491e:	d803      	bhi.n	8004928 <HAL_SPI_TransmitReceive+0x2c6>
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d102      	bne.n	800492e <HAL_SPI_TransmitReceive+0x2cc>
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004934:	e029      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1a2      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x224>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d19d      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800494a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f893 	bl	8004a7a <SPI_EndRxTxTransaction>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004966:	e010      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10b      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	e000      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004988:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800499a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3730      	adds	r7, #48	; 0x30
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049b6:	e04c      	b.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d048      	beq.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80049c0:	f7fe fa2c 	bl	8002e1c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d902      	bls.n	80049d6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d13d      	bne.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ee:	d111      	bne.n	8004a14 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f8:	d004      	beq.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a02:	d107      	bne.n	8004a14 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1c:	d10f      	bne.n	8004a3e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e00f      	b.n	8004a72 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1a3      	bne.n	80049b8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af02      	add	r7, sp, #8
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2180      	movs	r1, #128	; 0x80
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff ff88 	bl	80049a6 <SPI_WaitFlagStateUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e000      	b.n	8004aae <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e01d      	b.n	8004b04 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fd ff95 	bl	8002a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f000 f9ed 	bl	8004ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e01d      	b.n	8004b5a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f815 	bl	8004b62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f000 f9c2 	bl	8004ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2201      	movs	r2, #1
 8004b84:	6839      	ldr	r1, [r7, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fc24 	bl	80053d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a10      	ldr	r2, [pc, #64]	; (8004bd4 <HAL_TIM_PWM_Start+0x60>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d107      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ba4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d007      	beq.n	8004bc8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40012c00 	.word	0x40012c00

08004bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e0b4      	b.n	8004d5c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b0c      	cmp	r3, #12
 8004c06:	f200 809f 	bhi.w	8004d48 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c45 	.word	0x08004c45
 8004c14:	08004d49 	.word	0x08004d49
 8004c18:	08004d49 	.word	0x08004d49
 8004c1c:	08004d49 	.word	0x08004d49
 8004c20:	08004c85 	.word	0x08004c85
 8004c24:	08004d49 	.word	0x08004d49
 8004c28:	08004d49 	.word	0x08004d49
 8004c2c:	08004d49 	.word	0x08004d49
 8004c30:	08004cc7 	.word	0x08004cc7
 8004c34:	08004d49 	.word	0x08004d49
 8004c38:	08004d49 	.word	0x08004d49
 8004c3c:	08004d49 	.word	0x08004d49
 8004c40:	08004d07 	.word	0x08004d07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 f9a4 	bl	8004f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0208 	orr.w	r2, r2, #8
 8004c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0204 	bic.w	r2, r2, #4
 8004c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6999      	ldr	r1, [r3, #24]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	619a      	str	r2, [r3, #24]
      break;
 8004c82:	e062      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f9ea 	bl	8005064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6999      	ldr	r1, [r3, #24]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	021a      	lsls	r2, r3, #8
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	619a      	str	r2, [r3, #24]
      break;
 8004cc4:	e041      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fa33 	bl	8005138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0208 	orr.w	r2, r2, #8
 8004ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0204 	bic.w	r2, r2, #4
 8004cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	61da      	str	r2, [r3, #28]
      break;
 8004d04:	e021      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fa7d 	bl	800520c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69d9      	ldr	r1, [r3, #28]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	021a      	lsls	r2, r3, #8
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	61da      	str	r2, [r3, #28]
      break;
 8004d46:	e000      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004d48:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_TIM_ConfigClockSource+0x18>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0a6      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x166>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d067      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0x120>
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d80b      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x6c>
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d073      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x140>
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d802      	bhi.n	8004dc6 <HAL_TIM_ConfigClockSource+0x62>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d06f      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004dc4:	e078      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d06c      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x140>
 8004dca:	2b30      	cmp	r3, #48	; 0x30
 8004dcc:	d06a      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004dce:	e073      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d00d      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0x8c>
 8004dd4:	2b70      	cmp	r3, #112	; 0x70
 8004dd6:	d804      	bhi.n	8004de2 <HAL_TIM_ConfigClockSource+0x7e>
 8004dd8:	2b50      	cmp	r3, #80	; 0x50
 8004dda:	d033      	beq.n	8004e44 <HAL_TIM_ConfigClockSource+0xe0>
 8004ddc:	2b60      	cmp	r3, #96	; 0x60
 8004dde:	d041      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004de0:	e06a      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	d066      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x152>
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dec:	d017      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004dee:	e063      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	6899      	ldr	r1, [r3, #8]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f000 fac9 	bl	8005396 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
      break;
 8004e1c:	e04c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6899      	ldr	r1, [r3, #8]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f000 fab2 	bl	8005396 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e40:	609a      	str	r2, [r3, #8]
      break;
 8004e42:	e039      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	461a      	mov	r2, r3
 8004e52:	f000 fa29 	bl	80052a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2150      	movs	r1, #80	; 0x50
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fa80 	bl	8005362 <TIM_ITRx_SetConfig>
      break;
 8004e62:	e029      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f000 fa47 	bl	8005304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2160      	movs	r1, #96	; 0x60
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fa70 	bl	8005362 <TIM_ITRx_SetConfig>
      break;
 8004e82:	e019      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f000 fa09 	bl	80052a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2140      	movs	r1, #64	; 0x40
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fa60 	bl	8005362 <TIM_ITRx_SetConfig>
      break;
 8004ea2:	e009      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f000 fa57 	bl	8005362 <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a29      	ldr	r2, [pc, #164]	; (8004f8c <TIM_Base_SetConfig+0xb8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <TIM_Base_SetConfig+0x30>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef2:	d007      	beq.n	8004f04 <TIM_Base_SetConfig+0x30>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <TIM_Base_SetConfig+0xbc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_Base_SetConfig+0x30>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a25      	ldr	r2, [pc, #148]	; (8004f94 <TIM_Base_SetConfig+0xc0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d108      	bne.n	8004f16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <TIM_Base_SetConfig+0xb8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00b      	beq.n	8004f36 <TIM_Base_SetConfig+0x62>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f24:	d007      	beq.n	8004f36 <TIM_Base_SetConfig+0x62>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <TIM_Base_SetConfig+0xbc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_Base_SetConfig+0x62>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <TIM_Base_SetConfig+0xc0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d108      	bne.n	8004f48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <TIM_Base_SetConfig+0xb8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d103      	bne.n	8004f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	615a      	str	r2, [r3, #20]
}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800

08004f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0201 	bic.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 0302 	bic.w	r3, r3, #2
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <TIM_OC1_SetConfig+0xc8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10c      	bne.n	800500e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0308 	bic.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <TIM_OC1_SetConfig+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d111      	bne.n	800503a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	621a      	str	r2, [r3, #32]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40012c00 	.word	0x40012c00

08005064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f023 0210 	bic.w	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0320 	bic.w	r3, r3, #32
 80050ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <TIM_OC2_SetConfig+0xd0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10d      	bne.n	80050e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a14      	ldr	r2, [pc, #80]	; (8005134 <TIM_OC2_SetConfig+0xd0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d113      	bne.n	8005110 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr
 8005134:	40012c00 	.word	0x40012c00

08005138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <TIM_OC3_SetConfig+0xd0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10d      	bne.n	80051b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800519c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <TIM_OC3_SetConfig+0xd0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d113      	bne.n	80051e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	621a      	str	r2, [r3, #32]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40012c00 	.word	0x40012c00

0800520c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	031b      	lsls	r3, r3, #12
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a0f      	ldr	r2, [pc, #60]	; (80052a4 <TIM_OC4_SetConfig+0x98>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d109      	bne.n	8005280 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	019b      	lsls	r3, r3, #6
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00

080052a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0201 	bic.w	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 030a 	bic.w	r3, r3, #10
 80052e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f023 0210 	bic.w	r2, r3, #16
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800532e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	031b      	lsls	r3, r3, #12
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	621a      	str	r2, [r3, #32]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	f043 0307 	orr.w	r3, r3, #7
 8005384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	609a      	str	r2, [r3, #8]
}
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr

08005396 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005396:	b480      	push	{r7}
 8005398:	b087      	sub	sp, #28
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	021a      	lsls	r2, r3, #8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4313      	orrs	r3, r2
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	609a      	str	r2, [r3, #8]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	2201      	movs	r2, #1
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a1a      	ldr	r2, [r3, #32]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	43db      	mvns	r3, r3
 80053f6:	401a      	ands	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	431a      	orrs	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005430:	2302      	movs	r3, #2
 8005432:	e032      	b.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4313      	orrs	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e03f      	b.n	8005536 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fd faea 	bl	8002aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2224      	movs	r2, #36	; 0x24
 80054d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9b1 	bl	8005850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695a      	ldr	r2, [r3, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800550c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800551c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b088      	sub	sp, #32
 8005542:	af02      	add	r7, sp, #8
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b20      	cmp	r3, #32
 800555c:	f040 8083 	bne.w	8005666 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_UART_Transmit+0x2e>
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e07b      	b.n	8005668 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_UART_Transmit+0x40>
 800557a:	2302      	movs	r3, #2
 800557c:	e074      	b.n	8005668 <HAL_UART_Transmit+0x12a>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2221      	movs	r2, #33	; 0x21
 8005590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005594:	f7fd fc42 	bl	8002e1c <HAL_GetTick>
 8005598:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	88fa      	ldrh	r2, [r7, #6]
 800559e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055a6:	e042      	b.n	800562e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055be:	d122      	bne.n	8005606 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2200      	movs	r2, #0
 80055c8:	2180      	movs	r1, #128	; 0x80
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f8f6 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e046      	b.n	8005668 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3302      	adds	r3, #2
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	e017      	b.n	800562e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3301      	adds	r3, #1
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	e013      	b.n	800562e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2200      	movs	r2, #0
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f8d3 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e023      	b.n	8005668 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	60ba      	str	r2, [r7, #8]
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1b7      	bne.n	80055a8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2200      	movs	r2, #0
 8005640:	2140      	movs	r1, #64	; 0x40
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f8ba 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e00a      	b.n	8005668 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	e000      	b.n	8005668 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005666:	2302      	movs	r3, #2
  }
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b20      	cmp	r3, #32
 800568e:	f040 8090 	bne.w	80057b2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_UART_Receive+0x2e>
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e088      	b.n	80057b4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_UART_Receive+0x40>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e081      	b.n	80057b4 <HAL_UART_Receive+0x144>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2222      	movs	r2, #34	; 0x22
 80056c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80056c6:	f7fd fba9 	bl	8002e1c <HAL_GetTick>
 80056ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	88fa      	ldrh	r2, [r7, #6]
 80056d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056d8:	e05c      	b.n	8005794 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f0:	d12b      	bne.n	800574a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2120      	movs	r1, #32
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f85d 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e053      	b.n	80057b4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10c      	bne.n	8005732 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005724:	b29a      	uxth	r2, r3
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	3302      	adds	r3, #2
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	e030      	b.n	8005794 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	b29b      	uxth	r3, r3
 800573a:	b2db      	uxtb	r3, r3
 800573c:	b29a      	uxth	r2, r3
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	3301      	adds	r3, #1
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	e024      	b.n	8005794 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2200      	movs	r2, #0
 8005752:	2120      	movs	r1, #32
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f831 	bl	80057bc <UART_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e027      	b.n	80057b4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d108      	bne.n	800577e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	60ba      	str	r2, [r7, #8]
 8005778:	b2ca      	uxtb	r2, r1
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	e00a      	b.n	8005794 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	b2da      	uxtb	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	1c59      	adds	r1, r3, #1
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d19d      	bne.n	80056da <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	603b      	str	r3, [r7, #0]
 80057c8:	4613      	mov	r3, r2
 80057ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057cc:	e02c      	b.n	8005828 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d028      	beq.n	8005828 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <UART_WaitOnFlagUntilTimeout+0x30>
 80057dc:	f7fd fb1e 	bl	8002e1c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d21d      	bcs.n	8005828 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e00f      	b.n	8005848 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4013      	ands	r3, r2
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	429a      	cmp	r2, r3
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	429a      	cmp	r2, r3
 8005844:	d0c3      	beq.n	80057ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800588a:	f023 030c 	bic.w	r3, r3, #12
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	430b      	orrs	r3, r1
 8005896:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a52      	ldr	r2, [pc, #328]	; (80059fc <UART_SetConfig+0x1ac>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d14e      	bne.n	8005956 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058b8:	f7fe f940 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 80058bc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009a      	lsls	r2, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	4a4a      	ldr	r2, [pc, #296]	; (8005a00 <UART_SetConfig+0x1b0>)
 80058d6:	fba2 2303 	umull	r2, r3, r2, r3
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	0119      	lsls	r1, r3, #4
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009a      	lsls	r2, r3, #2
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80058f4:	4b42      	ldr	r3, [pc, #264]	; (8005a00 <UART_SetConfig+0x1b0>)
 80058f6:	fba3 0302 	umull	r0, r3, r3, r2
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	2064      	movs	r0, #100	; 0x64
 80058fe:	fb00 f303 	mul.w	r3, r0, r3
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	3332      	adds	r3, #50	; 0x32
 8005908:	4a3d      	ldr	r2, [pc, #244]	; (8005a00 <UART_SetConfig+0x1b0>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005914:	4419      	add	r1, r3
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	009a      	lsls	r2, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	fbb2 f2f3 	udiv	r2, r2, r3
 800592c:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <UART_SetConfig+0x1b0>)
 800592e:	fba3 0302 	umull	r0, r3, r3, r2
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	2064      	movs	r0, #100	; 0x64
 8005936:	fb00 f303 	mul.w	r3, r0, r3
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	3332      	adds	r3, #50	; 0x32
 8005940:	4a2f      	ldr	r2, [pc, #188]	; (8005a00 <UART_SetConfig+0x1b0>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	f003 020f 	and.w	r2, r3, #15
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	440a      	add	r2, r1
 8005952:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005954:	e04d      	b.n	80059f2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005956:	f7fe f8dd 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 800595a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009a      	lsls	r2, r3, #2
 8005966:	441a      	add	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005972:	4a23      	ldr	r2, [pc, #140]	; (8005a00 <UART_SetConfig+0x1b0>)
 8005974:	fba2 2303 	umull	r2, r3, r2, r3
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	0119      	lsls	r1, r3, #4
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009a      	lsls	r2, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005992:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <UART_SetConfig+0x1b0>)
 8005994:	fba3 0302 	umull	r0, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	2064      	movs	r0, #100	; 0x64
 800599c:	fb00 f303 	mul.w	r3, r0, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	3332      	adds	r3, #50	; 0x32
 80059a6:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <UART_SetConfig+0x1b0>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b2:	4419      	add	r1, r3
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009a      	lsls	r2, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <UART_SetConfig+0x1b0>)
 80059cc:	fba3 0302 	umull	r0, r3, r3, r2
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	2064      	movs	r0, #100	; 0x64
 80059d4:	fb00 f303 	mul.w	r3, r0, r3
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	3332      	adds	r3, #50	; 0x32
 80059de:	4a08      	ldr	r2, [pc, #32]	; (8005a00 <UART_SetConfig+0x1b0>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	440a      	add	r2, r1
 80059f0:	609a      	str	r2, [r3, #8]
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40013800 	.word	0x40013800
 8005a00:	51eb851f 	.word	0x51eb851f

08005a04 <__errno>:
 8005a04:	4b01      	ldr	r3, [pc, #4]	; (8005a0c <__errno+0x8>)
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20000438 	.word	0x20000438

08005a10 <getchar>:
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <getchar+0x20>)
 8005a12:	b510      	push	{r4, lr}
 8005a14:	681c      	ldr	r4, [r3, #0]
 8005a16:	b124      	cbz	r4, 8005a22 <getchar+0x12>
 8005a18:	69a3      	ldr	r3, [r4, #24]
 8005a1a:	b913      	cbnz	r3, 8005a22 <getchar+0x12>
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f001 fe19 	bl	8007654 <__sinit>
 8005a22:	6861      	ldr	r1, [r4, #4]
 8005a24:	4620      	mov	r0, r4
 8005a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a2a:	f001 beb9 	b.w	80077a0 <_getc_r>
 8005a2e:	bf00      	nop
 8005a30:	20000438 	.word	0x20000438

08005a34 <__libc_init_array>:
 8005a34:	b570      	push	{r4, r5, r6, lr}
 8005a36:	2500      	movs	r5, #0
 8005a38:	4e0c      	ldr	r6, [pc, #48]	; (8005a6c <__libc_init_array+0x38>)
 8005a3a:	4c0d      	ldr	r4, [pc, #52]	; (8005a70 <__libc_init_array+0x3c>)
 8005a3c:	1ba4      	subs	r4, r4, r6
 8005a3e:	10a4      	asrs	r4, r4, #2
 8005a40:	42a5      	cmp	r5, r4
 8005a42:	d109      	bne.n	8005a58 <__libc_init_array+0x24>
 8005a44:	f002 fd24 	bl	8008490 <_init>
 8005a48:	2500      	movs	r5, #0
 8005a4a:	4e0a      	ldr	r6, [pc, #40]	; (8005a74 <__libc_init_array+0x40>)
 8005a4c:	4c0a      	ldr	r4, [pc, #40]	; (8005a78 <__libc_init_array+0x44>)
 8005a4e:	1ba4      	subs	r4, r4, r6
 8005a50:	10a4      	asrs	r4, r4, #2
 8005a52:	42a5      	cmp	r5, r4
 8005a54:	d105      	bne.n	8005a62 <__libc_init_array+0x2e>
 8005a56:	bd70      	pop	{r4, r5, r6, pc}
 8005a58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a5c:	4798      	blx	r3
 8005a5e:	3501      	adds	r5, #1
 8005a60:	e7ee      	b.n	8005a40 <__libc_init_array+0xc>
 8005a62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a66:	4798      	blx	r3
 8005a68:	3501      	adds	r5, #1
 8005a6a:	e7f2      	b.n	8005a52 <__libc_init_array+0x1e>
 8005a6c:	08009440 	.word	0x08009440
 8005a70:	08009440 	.word	0x08009440
 8005a74:	08009440 	.word	0x08009440
 8005a78:	08009444 	.word	0x08009444

08005a7c <__locale_ctype_ptr>:
 8005a7c:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <__locale_ctype_ptr+0x14>)
 8005a7e:	4a05      	ldr	r2, [pc, #20]	; (8005a94 <__locale_ctype_ptr+0x18>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bf08      	it	eq
 8005a88:	4613      	moveq	r3, r2
 8005a8a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005a8e:	4770      	bx	lr
 8005a90:	20000438 	.word	0x20000438
 8005a94:	2000049c 	.word	0x2000049c

08005a98 <malloc>:
 8005a98:	4b02      	ldr	r3, [pc, #8]	; (8005aa4 <malloc+0xc>)
 8005a9a:	4601      	mov	r1, r0
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	f000 b87d 	b.w	8005b9c <_malloc_r>
 8005aa2:	bf00      	nop
 8005aa4:	20000438 	.word	0x20000438

08005aa8 <free>:
 8005aa8:	4b02      	ldr	r3, [pc, #8]	; (8005ab4 <free+0xc>)
 8005aaa:	4601      	mov	r1, r0
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	f000 b829 	b.w	8005b04 <_free_r>
 8005ab2:	bf00      	nop
 8005ab4:	20000438 	.word	0x20000438

08005ab8 <__ascii_mbtowc>:
 8005ab8:	b082      	sub	sp, #8
 8005aba:	b901      	cbnz	r1, 8005abe <__ascii_mbtowc+0x6>
 8005abc:	a901      	add	r1, sp, #4
 8005abe:	b142      	cbz	r2, 8005ad2 <__ascii_mbtowc+0x1a>
 8005ac0:	b14b      	cbz	r3, 8005ad6 <__ascii_mbtowc+0x1e>
 8005ac2:	7813      	ldrb	r3, [r2, #0]
 8005ac4:	600b      	str	r3, [r1, #0]
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	1c10      	adds	r0, r2, #0
 8005aca:	bf18      	it	ne
 8005acc:	2001      	movne	r0, #1
 8005ace:	b002      	add	sp, #8
 8005ad0:	4770      	bx	lr
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	e7fb      	b.n	8005ace <__ascii_mbtowc+0x16>
 8005ad6:	f06f 0001 	mvn.w	r0, #1
 8005ada:	e7f8      	b.n	8005ace <__ascii_mbtowc+0x16>

08005adc <memcpy>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	1e43      	subs	r3, r0, #1
 8005ae0:	440a      	add	r2, r1
 8005ae2:	4291      	cmp	r1, r2
 8005ae4:	d100      	bne.n	8005ae8 <memcpy+0xc>
 8005ae6:	bd10      	pop	{r4, pc}
 8005ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af0:	e7f7      	b.n	8005ae2 <memcpy+0x6>

08005af2 <memset>:
 8005af2:	4603      	mov	r3, r0
 8005af4:	4402      	add	r2, r0
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d100      	bne.n	8005afc <memset+0xa>
 8005afa:	4770      	bx	lr
 8005afc:	f803 1b01 	strb.w	r1, [r3], #1
 8005b00:	e7f9      	b.n	8005af6 <memset+0x4>
	...

08005b04 <_free_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4605      	mov	r5, r0
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	d043      	beq.n	8005b94 <_free_r+0x90>
 8005b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b10:	1f0c      	subs	r4, r1, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bfb8      	it	lt
 8005b16:	18e4      	addlt	r4, r4, r3
 8005b18:	f001 feee 	bl	80078f8 <__malloc_lock>
 8005b1c:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <_free_r+0x94>)
 8005b1e:	6813      	ldr	r3, [r2, #0]
 8005b20:	4610      	mov	r0, r2
 8005b22:	b933      	cbnz	r3, 8005b32 <_free_r+0x2e>
 8005b24:	6063      	str	r3, [r4, #4]
 8005b26:	6014      	str	r4, [r2, #0]
 8005b28:	4628      	mov	r0, r5
 8005b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b2e:	f001 bee4 	b.w	80078fa <__malloc_unlock>
 8005b32:	42a3      	cmp	r3, r4
 8005b34:	d90b      	bls.n	8005b4e <_free_r+0x4a>
 8005b36:	6821      	ldr	r1, [r4, #0]
 8005b38:	1862      	adds	r2, r4, r1
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	bf01      	itttt	eq
 8005b3e:	681a      	ldreq	r2, [r3, #0]
 8005b40:	685b      	ldreq	r3, [r3, #4]
 8005b42:	1852      	addeq	r2, r2, r1
 8005b44:	6022      	streq	r2, [r4, #0]
 8005b46:	6063      	str	r3, [r4, #4]
 8005b48:	6004      	str	r4, [r0, #0]
 8005b4a:	e7ed      	b.n	8005b28 <_free_r+0x24>
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	b10a      	cbz	r2, 8005b56 <_free_r+0x52>
 8005b52:	42a2      	cmp	r2, r4
 8005b54:	d9fa      	bls.n	8005b4c <_free_r+0x48>
 8005b56:	6819      	ldr	r1, [r3, #0]
 8005b58:	1858      	adds	r0, r3, r1
 8005b5a:	42a0      	cmp	r0, r4
 8005b5c:	d10b      	bne.n	8005b76 <_free_r+0x72>
 8005b5e:	6820      	ldr	r0, [r4, #0]
 8005b60:	4401      	add	r1, r0
 8005b62:	1858      	adds	r0, r3, r1
 8005b64:	4282      	cmp	r2, r0
 8005b66:	6019      	str	r1, [r3, #0]
 8005b68:	d1de      	bne.n	8005b28 <_free_r+0x24>
 8005b6a:	6810      	ldr	r0, [r2, #0]
 8005b6c:	6852      	ldr	r2, [r2, #4]
 8005b6e:	4401      	add	r1, r0
 8005b70:	6019      	str	r1, [r3, #0]
 8005b72:	605a      	str	r2, [r3, #4]
 8005b74:	e7d8      	b.n	8005b28 <_free_r+0x24>
 8005b76:	d902      	bls.n	8005b7e <_free_r+0x7a>
 8005b78:	230c      	movs	r3, #12
 8005b7a:	602b      	str	r3, [r5, #0]
 8005b7c:	e7d4      	b.n	8005b28 <_free_r+0x24>
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	1821      	adds	r1, r4, r0
 8005b82:	428a      	cmp	r2, r1
 8005b84:	bf01      	itttt	eq
 8005b86:	6811      	ldreq	r1, [r2, #0]
 8005b88:	6852      	ldreq	r2, [r2, #4]
 8005b8a:	1809      	addeq	r1, r1, r0
 8005b8c:	6021      	streq	r1, [r4, #0]
 8005b8e:	6062      	str	r2, [r4, #4]
 8005b90:	605c      	str	r4, [r3, #4]
 8005b92:	e7c9      	b.n	8005b28 <_free_r+0x24>
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	bf00      	nop
 8005b98:	20000b3c 	.word	0x20000b3c

08005b9c <_malloc_r>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	1ccd      	adds	r5, r1, #3
 8005ba0:	f025 0503 	bic.w	r5, r5, #3
 8005ba4:	3508      	adds	r5, #8
 8005ba6:	2d0c      	cmp	r5, #12
 8005ba8:	bf38      	it	cc
 8005baa:	250c      	movcc	r5, #12
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	4606      	mov	r6, r0
 8005bb0:	db01      	blt.n	8005bb6 <_malloc_r+0x1a>
 8005bb2:	42a9      	cmp	r1, r5
 8005bb4:	d903      	bls.n	8005bbe <_malloc_r+0x22>
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	2000      	movs	r0, #0
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
 8005bbe:	f001 fe9b 	bl	80078f8 <__malloc_lock>
 8005bc2:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <_malloc_r+0xac>)
 8005bc4:	6814      	ldr	r4, [r2, #0]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	b991      	cbnz	r1, 8005bf0 <_malloc_r+0x54>
 8005bca:	4c20      	ldr	r4, [pc, #128]	; (8005c4c <_malloc_r+0xb0>)
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	b91b      	cbnz	r3, 8005bd8 <_malloc_r+0x3c>
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f000 fd1d 	bl	8006610 <_sbrk_r>
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f000 fd18 	bl	8006610 <_sbrk_r>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d124      	bne.n	8005c2e <_malloc_r+0x92>
 8005be4:	230c      	movs	r3, #12
 8005be6:	4630      	mov	r0, r6
 8005be8:	6033      	str	r3, [r6, #0]
 8005bea:	f001 fe86 	bl	80078fa <__malloc_unlock>
 8005bee:	e7e4      	b.n	8005bba <_malloc_r+0x1e>
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	1b5b      	subs	r3, r3, r5
 8005bf4:	d418      	bmi.n	8005c28 <_malloc_r+0x8c>
 8005bf6:	2b0b      	cmp	r3, #11
 8005bf8:	d90f      	bls.n	8005c1a <_malloc_r+0x7e>
 8005bfa:	600b      	str	r3, [r1, #0]
 8005bfc:	18cc      	adds	r4, r1, r3
 8005bfe:	50cd      	str	r5, [r1, r3]
 8005c00:	4630      	mov	r0, r6
 8005c02:	f001 fe7a 	bl	80078fa <__malloc_unlock>
 8005c06:	f104 000b 	add.w	r0, r4, #11
 8005c0a:	1d23      	adds	r3, r4, #4
 8005c0c:	f020 0007 	bic.w	r0, r0, #7
 8005c10:	1ac3      	subs	r3, r0, r3
 8005c12:	d0d3      	beq.n	8005bbc <_malloc_r+0x20>
 8005c14:	425a      	negs	r2, r3
 8005c16:	50e2      	str	r2, [r4, r3]
 8005c18:	e7d0      	b.n	8005bbc <_malloc_r+0x20>
 8005c1a:	684b      	ldr	r3, [r1, #4]
 8005c1c:	428c      	cmp	r4, r1
 8005c1e:	bf16      	itet	ne
 8005c20:	6063      	strne	r3, [r4, #4]
 8005c22:	6013      	streq	r3, [r2, #0]
 8005c24:	460c      	movne	r4, r1
 8005c26:	e7eb      	b.n	8005c00 <_malloc_r+0x64>
 8005c28:	460c      	mov	r4, r1
 8005c2a:	6849      	ldr	r1, [r1, #4]
 8005c2c:	e7cc      	b.n	8005bc8 <_malloc_r+0x2c>
 8005c2e:	1cc4      	adds	r4, r0, #3
 8005c30:	f024 0403 	bic.w	r4, r4, #3
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d005      	beq.n	8005c44 <_malloc_r+0xa8>
 8005c38:	1a21      	subs	r1, r4, r0
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f000 fce8 	bl	8006610 <_sbrk_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d0cf      	beq.n	8005be4 <_malloc_r+0x48>
 8005c44:	6025      	str	r5, [r4, #0]
 8005c46:	e7db      	b.n	8005c00 <_malloc_r+0x64>
 8005c48:	20000b3c 	.word	0x20000b3c
 8005c4c:	20000b40 	.word	0x20000b40

08005c50 <__cvt>:
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c56:	461e      	mov	r6, r3
 8005c58:	bfbb      	ittet	lt
 8005c5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c5e:	461e      	movlt	r6, r3
 8005c60:	2300      	movge	r3, #0
 8005c62:	232d      	movlt	r3, #45	; 0x2d
 8005c64:	b088      	sub	sp, #32
 8005c66:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c68:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005c6c:	f027 0720 	bic.w	r7, r7, #32
 8005c70:	2f46      	cmp	r7, #70	; 0x46
 8005c72:	4614      	mov	r4, r2
 8005c74:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c76:	700b      	strb	r3, [r1, #0]
 8005c78:	d004      	beq.n	8005c84 <__cvt+0x34>
 8005c7a:	2f45      	cmp	r7, #69	; 0x45
 8005c7c:	d100      	bne.n	8005c80 <__cvt+0x30>
 8005c7e:	3501      	adds	r5, #1
 8005c80:	2302      	movs	r3, #2
 8005c82:	e000      	b.n	8005c86 <__cvt+0x36>
 8005c84:	2303      	movs	r3, #3
 8005c86:	aa07      	add	r2, sp, #28
 8005c88:	9204      	str	r2, [sp, #16]
 8005c8a:	aa06      	add	r2, sp, #24
 8005c8c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c90:	e9cd 3500 	strd	r3, r5, [sp]
 8005c94:	4622      	mov	r2, r4
 8005c96:	4633      	mov	r3, r6
 8005c98:	f000 fe26 	bl	80068e8 <_dtoa_r>
 8005c9c:	2f47      	cmp	r7, #71	; 0x47
 8005c9e:	4680      	mov	r8, r0
 8005ca0:	d102      	bne.n	8005ca8 <__cvt+0x58>
 8005ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ca4:	07db      	lsls	r3, r3, #31
 8005ca6:	d526      	bpl.n	8005cf6 <__cvt+0xa6>
 8005ca8:	2f46      	cmp	r7, #70	; 0x46
 8005caa:	eb08 0905 	add.w	r9, r8, r5
 8005cae:	d111      	bne.n	8005cd4 <__cvt+0x84>
 8005cb0:	f898 3000 	ldrb.w	r3, [r8]
 8005cb4:	2b30      	cmp	r3, #48	; 0x30
 8005cb6:	d10a      	bne.n	8005cce <__cvt+0x7e>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2300      	movs	r3, #0
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	f7fa fe72 	bl	80009a8 <__aeabi_dcmpeq>
 8005cc4:	b918      	cbnz	r0, 8005cce <__cvt+0x7e>
 8005cc6:	f1c5 0501 	rsb	r5, r5, #1
 8005cca:	f8ca 5000 	str.w	r5, [sl]
 8005cce:	f8da 3000 	ldr.w	r3, [sl]
 8005cd2:	4499      	add	r9, r3
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4631      	mov	r1, r6
 8005cdc:	f7fa fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8005ce0:	b938      	cbnz	r0, 8005cf2 <__cvt+0xa2>
 8005ce2:	2230      	movs	r2, #48	; 0x30
 8005ce4:	9b07      	ldr	r3, [sp, #28]
 8005ce6:	454b      	cmp	r3, r9
 8005ce8:	d205      	bcs.n	8005cf6 <__cvt+0xa6>
 8005cea:	1c59      	adds	r1, r3, #1
 8005cec:	9107      	str	r1, [sp, #28]
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	e7f8      	b.n	8005ce4 <__cvt+0x94>
 8005cf2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	9b07      	ldr	r3, [sp, #28]
 8005cfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cfc:	eba3 0308 	sub.w	r3, r3, r8
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	b008      	add	sp, #32
 8005d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005d08 <__exponent>:
 8005d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	bfb4      	ite	lt
 8005d0e:	232d      	movlt	r3, #45	; 0x2d
 8005d10:	232b      	movge	r3, #43	; 0x2b
 8005d12:	4604      	mov	r4, r0
 8005d14:	bfb8      	it	lt
 8005d16:	4249      	neglt	r1, r1
 8005d18:	2909      	cmp	r1, #9
 8005d1a:	f804 2b02 	strb.w	r2, [r4], #2
 8005d1e:	7043      	strb	r3, [r0, #1]
 8005d20:	dd21      	ble.n	8005d66 <__exponent+0x5e>
 8005d22:	f10d 0307 	add.w	r3, sp, #7
 8005d26:	461f      	mov	r7, r3
 8005d28:	260a      	movs	r6, #10
 8005d2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d2e:	fb06 1115 	mls	r1, r6, r5, r1
 8005d32:	2d09      	cmp	r5, #9
 8005d34:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005d38:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d3c:	f103 32ff 	add.w	r2, r3, #4294967295
 8005d40:	4629      	mov	r1, r5
 8005d42:	dc09      	bgt.n	8005d58 <__exponent+0x50>
 8005d44:	3130      	adds	r1, #48	; 0x30
 8005d46:	3b02      	subs	r3, #2
 8005d48:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d4c:	42bb      	cmp	r3, r7
 8005d4e:	4622      	mov	r2, r4
 8005d50:	d304      	bcc.n	8005d5c <__exponent+0x54>
 8005d52:	1a10      	subs	r0, r2, r0
 8005d54:	b003      	add	sp, #12
 8005d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d58:	4613      	mov	r3, r2
 8005d5a:	e7e6      	b.n	8005d2a <__exponent+0x22>
 8005d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d60:	f804 2b01 	strb.w	r2, [r4], #1
 8005d64:	e7f2      	b.n	8005d4c <__exponent+0x44>
 8005d66:	2330      	movs	r3, #48	; 0x30
 8005d68:	4419      	add	r1, r3
 8005d6a:	7083      	strb	r3, [r0, #2]
 8005d6c:	1d02      	adds	r2, r0, #4
 8005d6e:	70c1      	strb	r1, [r0, #3]
 8005d70:	e7ef      	b.n	8005d52 <__exponent+0x4a>
	...

08005d74 <_printf_float>:
 8005d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	b091      	sub	sp, #68	; 0x44
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005d7e:	4693      	mov	fp, r2
 8005d80:	461e      	mov	r6, r3
 8005d82:	4605      	mov	r5, r0
 8005d84:	f001 fd38 	bl	80077f8 <_localeconv_r>
 8005d88:	6803      	ldr	r3, [r0, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8e:	f7fa f9df 	bl	8000150 <strlen>
 8005d92:	2300      	movs	r3, #0
 8005d94:	930e      	str	r3, [sp, #56]	; 0x38
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	900a      	str	r0, [sp, #40]	; 0x28
 8005d9a:	3307      	adds	r3, #7
 8005d9c:	f023 0307 	bic.w	r3, r3, #7
 8005da0:	f103 0208 	add.w	r2, r3, #8
 8005da4:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005da8:	f8d4 a000 	ldr.w	sl, [r4]
 8005dac:	603a      	str	r2, [r7, #0]
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005db6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005dba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc4:	4ba6      	ldr	r3, [pc, #664]	; (8006060 <_printf_float+0x2ec>)
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dca:	f7fa fe1f 	bl	8000a0c <__aeabi_dcmpun>
 8005dce:	bb68      	cbnz	r0, 8005e2c <_printf_float+0xb8>
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd4:	4ba2      	ldr	r3, [pc, #648]	; (8006060 <_printf_float+0x2ec>)
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dda:	f7fa fdf9 	bl	80009d0 <__aeabi_dcmple>
 8005dde:	bb28      	cbnz	r0, 8005e2c <_printf_float+0xb8>
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	4638      	mov	r0, r7
 8005de6:	4649      	mov	r1, r9
 8005de8:	f7fa fde8 	bl	80009bc <__aeabi_dcmplt>
 8005dec:	b110      	cbz	r0, 8005df4 <_printf_float+0x80>
 8005dee:	232d      	movs	r3, #45	; 0x2d
 8005df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df4:	4f9b      	ldr	r7, [pc, #620]	; (8006064 <_printf_float+0x2f0>)
 8005df6:	4b9c      	ldr	r3, [pc, #624]	; (8006068 <_printf_float+0x2f4>)
 8005df8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005dfc:	bf98      	it	ls
 8005dfe:	461f      	movls	r7, r3
 8005e00:	2303      	movs	r3, #3
 8005e02:	f04f 0900 	mov.w	r9, #0
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	f02a 0304 	bic.w	r3, sl, #4
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	9600      	str	r6, [sp, #0]
 8005e10:	465b      	mov	r3, fp
 8005e12:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 f9e2 	bl	80061e0 <_printf_common>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f040 8090 	bne.w	8005f42 <_printf_float+0x1ce>
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295
 8005e26:	b011      	add	sp, #68	; 0x44
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	463a      	mov	r2, r7
 8005e2e:	464b      	mov	r3, r9
 8005e30:	4638      	mov	r0, r7
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fdea 	bl	8000a0c <__aeabi_dcmpun>
 8005e38:	b110      	cbz	r0, 8005e40 <_printf_float+0xcc>
 8005e3a:	4f8c      	ldr	r7, [pc, #560]	; (800606c <_printf_float+0x2f8>)
 8005e3c:	4b8c      	ldr	r3, [pc, #560]	; (8006070 <_printf_float+0x2fc>)
 8005e3e:	e7db      	b.n	8005df8 <_printf_float+0x84>
 8005e40:	6863      	ldr	r3, [r4, #4]
 8005e42:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005e46:	1c59      	adds	r1, r3, #1
 8005e48:	a80d      	add	r0, sp, #52	; 0x34
 8005e4a:	a90e      	add	r1, sp, #56	; 0x38
 8005e4c:	d140      	bne.n	8005ed0 <_printf_float+0x15c>
 8005e4e:	2306      	movs	r3, #6
 8005e50:	6063      	str	r3, [r4, #4]
 8005e52:	f04f 0c00 	mov.w	ip, #0
 8005e56:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005e5a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005e5e:	6863      	ldr	r3, [r4, #4]
 8005e60:	6022      	str	r2, [r4, #0]
 8005e62:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	463a      	mov	r2, r7
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005e70:	4628      	mov	r0, r5
 8005e72:	f7ff feed 	bl	8005c50 <__cvt>
 8005e76:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005e7a:	2b47      	cmp	r3, #71	; 0x47
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	d109      	bne.n	8005e94 <_printf_float+0x120>
 8005e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e82:	1cd8      	adds	r0, r3, #3
 8005e84:	db02      	blt.n	8005e8c <_printf_float+0x118>
 8005e86:	6862      	ldr	r2, [r4, #4]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	dd47      	ble.n	8005f1c <_printf_float+0x1a8>
 8005e8c:	f1a8 0802 	sub.w	r8, r8, #2
 8005e90:	fa5f f888 	uxtb.w	r8, r8
 8005e94:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005e98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e9a:	d824      	bhi.n	8005ee6 <_printf_float+0x172>
 8005e9c:	3901      	subs	r1, #1
 8005e9e:	4642      	mov	r2, r8
 8005ea0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ea4:	910d      	str	r1, [sp, #52]	; 0x34
 8005ea6:	f7ff ff2f 	bl	8005d08 <__exponent>
 8005eaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eac:	4681      	mov	r9, r0
 8005eae:	1813      	adds	r3, r2, r0
 8005eb0:	2a01      	cmp	r2, #1
 8005eb2:	6123      	str	r3, [r4, #16]
 8005eb4:	dc02      	bgt.n	8005ebc <_printf_float+0x148>
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	07d1      	lsls	r1, r2, #31
 8005eba:	d501      	bpl.n	8005ec0 <_printf_float+0x14c>
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0a2      	beq.n	8005e0e <_printf_float+0x9a>
 8005ec8:	232d      	movs	r3, #45	; 0x2d
 8005eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ece:	e79e      	b.n	8005e0e <_printf_float+0x9a>
 8005ed0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005ed4:	f000 816e 	beq.w	80061b4 <_printf_float+0x440>
 8005ed8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005edc:	d1b9      	bne.n	8005e52 <_printf_float+0xde>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1b7      	bne.n	8005e52 <_printf_float+0xde>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e7b4      	b.n	8005e50 <_printf_float+0xdc>
 8005ee6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005eea:	d119      	bne.n	8005f20 <_printf_float+0x1ac>
 8005eec:	2900      	cmp	r1, #0
 8005eee:	6863      	ldr	r3, [r4, #4]
 8005ef0:	dd0c      	ble.n	8005f0c <_printf_float+0x198>
 8005ef2:	6121      	str	r1, [r4, #16]
 8005ef4:	b913      	cbnz	r3, 8005efc <_printf_float+0x188>
 8005ef6:	6822      	ldr	r2, [r4, #0]
 8005ef8:	07d2      	lsls	r2, r2, #31
 8005efa:	d502      	bpl.n	8005f02 <_printf_float+0x18e>
 8005efc:	3301      	adds	r3, #1
 8005efe:	440b      	add	r3, r1
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f04:	f04f 0900 	mov.w	r9, #0
 8005f08:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f0a:	e7d9      	b.n	8005ec0 <_printf_float+0x14c>
 8005f0c:	b913      	cbnz	r3, 8005f14 <_printf_float+0x1a0>
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	07d0      	lsls	r0, r2, #31
 8005f12:	d501      	bpl.n	8005f18 <_printf_float+0x1a4>
 8005f14:	3302      	adds	r3, #2
 8005f16:	e7f3      	b.n	8005f00 <_printf_float+0x18c>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e7f1      	b.n	8005f00 <_printf_float+0x18c>
 8005f1c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005f20:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005f24:	4293      	cmp	r3, r2
 8005f26:	db05      	blt.n	8005f34 <_printf_float+0x1c0>
 8005f28:	6822      	ldr	r2, [r4, #0]
 8005f2a:	6123      	str	r3, [r4, #16]
 8005f2c:	07d1      	lsls	r1, r2, #31
 8005f2e:	d5e8      	bpl.n	8005f02 <_printf_float+0x18e>
 8005f30:	3301      	adds	r3, #1
 8005f32:	e7e5      	b.n	8005f00 <_printf_float+0x18c>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bfcc      	ite	gt
 8005f38:	2301      	movgt	r3, #1
 8005f3a:	f1c3 0302 	rsble	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	e7de      	b.n	8005f00 <_printf_float+0x18c>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	055a      	lsls	r2, r3, #21
 8005f46:	d407      	bmi.n	8005f58 <_printf_float+0x1e4>
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	463a      	mov	r2, r7
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b0      	blx	r6
 8005f52:	3001      	adds	r0, #1
 8005f54:	d129      	bne.n	8005faa <_printf_float+0x236>
 8005f56:	e764      	b.n	8005e22 <_printf_float+0xae>
 8005f58:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005f5c:	f240 80d7 	bls.w	800610e <_printf_float+0x39a>
 8005f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f64:	2200      	movs	r2, #0
 8005f66:	2300      	movs	r3, #0
 8005f68:	f7fa fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8005f6c:	b388      	cbz	r0, 8005fd2 <_printf_float+0x25e>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4a40      	ldr	r2, [pc, #256]	; (8006074 <_printf_float+0x300>)
 8005f72:	4659      	mov	r1, fp
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b0      	blx	r6
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f af52 	beq.w	8005e22 <_printf_float+0xae>
 8005f7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f82:	429a      	cmp	r2, r3
 8005f84:	db02      	blt.n	8005f8c <_printf_float+0x218>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	07d8      	lsls	r0, r3, #31
 8005f8a:	d50e      	bpl.n	8005faa <_printf_float+0x236>
 8005f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f90:	4659      	mov	r1, fp
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b0      	blx	r6
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f af43 	beq.w	8005e22 <_printf_float+0xae>
 8005f9c:	2700      	movs	r7, #0
 8005f9e:	f104 081a 	add.w	r8, r4, #26
 8005fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	42bb      	cmp	r3, r7
 8005fa8:	dc09      	bgt.n	8005fbe <_printf_float+0x24a>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	079f      	lsls	r7, r3, #30
 8005fae:	f100 80fd 	bmi.w	80061ac <_printf_float+0x438>
 8005fb2:	68e0      	ldr	r0, [r4, #12]
 8005fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fb6:	4298      	cmp	r0, r3
 8005fb8:	bfb8      	it	lt
 8005fba:	4618      	movlt	r0, r3
 8005fbc:	e733      	b.n	8005e26 <_printf_float+0xb2>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b0      	blx	r6
 8005fc8:	3001      	adds	r0, #1
 8005fca:	f43f af2a 	beq.w	8005e22 <_printf_float+0xae>
 8005fce:	3701      	adds	r7, #1
 8005fd0:	e7e7      	b.n	8005fa2 <_printf_float+0x22e>
 8005fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dc2b      	bgt.n	8006030 <_printf_float+0x2bc>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4a26      	ldr	r2, [pc, #152]	; (8006074 <_printf_float+0x300>)
 8005fdc:	4659      	mov	r1, fp
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b0      	blx	r6
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f af1d 	beq.w	8005e22 <_printf_float+0xae>
 8005fe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fea:	b923      	cbnz	r3, 8005ff6 <_printf_float+0x282>
 8005fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fee:	b913      	cbnz	r3, 8005ff6 <_printf_float+0x282>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07d9      	lsls	r1, r3, #31
 8005ff4:	d5d9      	bpl.n	8005faa <_printf_float+0x236>
 8005ff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ffa:	4659      	mov	r1, fp
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b0      	blx	r6
 8006000:	3001      	adds	r0, #1
 8006002:	f43f af0e 	beq.w	8005e22 <_printf_float+0xae>
 8006006:	f04f 0800 	mov.w	r8, #0
 800600a:	f104 091a 	add.w	r9, r4, #26
 800600e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006010:	425b      	negs	r3, r3
 8006012:	4543      	cmp	r3, r8
 8006014:	dc01      	bgt.n	800601a <_printf_float+0x2a6>
 8006016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006018:	e797      	b.n	8005f4a <_printf_float+0x1d6>
 800601a:	2301      	movs	r3, #1
 800601c:	464a      	mov	r2, r9
 800601e:	4659      	mov	r1, fp
 8006020:	4628      	mov	r0, r5
 8006022:	47b0      	blx	r6
 8006024:	3001      	adds	r0, #1
 8006026:	f43f aefc 	beq.w	8005e22 <_printf_float+0xae>
 800602a:	f108 0801 	add.w	r8, r8, #1
 800602e:	e7ee      	b.n	800600e <_printf_float+0x29a>
 8006030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006034:	429a      	cmp	r2, r3
 8006036:	bfa8      	it	ge
 8006038:	461a      	movge	r2, r3
 800603a:	2a00      	cmp	r2, #0
 800603c:	4690      	mov	r8, r2
 800603e:	dd07      	ble.n	8006050 <_printf_float+0x2dc>
 8006040:	4613      	mov	r3, r2
 8006042:	4659      	mov	r1, fp
 8006044:	463a      	mov	r2, r7
 8006046:	4628      	mov	r0, r5
 8006048:	47b0      	blx	r6
 800604a:	3001      	adds	r0, #1
 800604c:	f43f aee9 	beq.w	8005e22 <_printf_float+0xae>
 8006050:	f104 031a 	add.w	r3, r4, #26
 8006054:	f04f 0a00 	mov.w	sl, #0
 8006058:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800605c:	930b      	str	r3, [sp, #44]	; 0x2c
 800605e:	e015      	b.n	800608c <_printf_float+0x318>
 8006060:	7fefffff 	.word	0x7fefffff
 8006064:	08009192 	.word	0x08009192
 8006068:	0800918e 	.word	0x0800918e
 800606c:	0800919a 	.word	0x0800919a
 8006070:	08009196 	.word	0x08009196
 8006074:	0800919e 	.word	0x0800919e
 8006078:	2301      	movs	r3, #1
 800607a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800607c:	4659      	mov	r1, fp
 800607e:	4628      	mov	r0, r5
 8006080:	47b0      	blx	r6
 8006082:	3001      	adds	r0, #1
 8006084:	f43f aecd 	beq.w	8005e22 <_printf_float+0xae>
 8006088:	f10a 0a01 	add.w	sl, sl, #1
 800608c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006090:	eba9 0308 	sub.w	r3, r9, r8
 8006094:	4553      	cmp	r3, sl
 8006096:	dcef      	bgt.n	8006078 <_printf_float+0x304>
 8006098:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800609c:	429a      	cmp	r2, r3
 800609e:	444f      	add	r7, r9
 80060a0:	db14      	blt.n	80060cc <_printf_float+0x358>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	07da      	lsls	r2, r3, #31
 80060a6:	d411      	bmi.n	80060cc <_printf_float+0x358>
 80060a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060ac:	eba3 0209 	sub.w	r2, r3, r9
 80060b0:	eba3 0901 	sub.w	r9, r3, r1
 80060b4:	4591      	cmp	r9, r2
 80060b6:	bfa8      	it	ge
 80060b8:	4691      	movge	r9, r2
 80060ba:	f1b9 0f00 	cmp.w	r9, #0
 80060be:	dc0d      	bgt.n	80060dc <_printf_float+0x368>
 80060c0:	2700      	movs	r7, #0
 80060c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060c6:	f104 081a 	add.w	r8, r4, #26
 80060ca:	e018      	b.n	80060fe <_printf_float+0x38a>
 80060cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d0:	4659      	mov	r1, fp
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b0      	blx	r6
 80060d6:	3001      	adds	r0, #1
 80060d8:	d1e6      	bne.n	80060a8 <_printf_float+0x334>
 80060da:	e6a2      	b.n	8005e22 <_printf_float+0xae>
 80060dc:	464b      	mov	r3, r9
 80060de:	463a      	mov	r2, r7
 80060e0:	4659      	mov	r1, fp
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b0      	blx	r6
 80060e6:	3001      	adds	r0, #1
 80060e8:	d1ea      	bne.n	80060c0 <_printf_float+0x34c>
 80060ea:	e69a      	b.n	8005e22 <_printf_float+0xae>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4642      	mov	r2, r8
 80060f0:	4659      	mov	r1, fp
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b0      	blx	r6
 80060f6:	3001      	adds	r0, #1
 80060f8:	f43f ae93 	beq.w	8005e22 <_printf_float+0xae>
 80060fc:	3701      	adds	r7, #1
 80060fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	eba3 0309 	sub.w	r3, r3, r9
 8006108:	42bb      	cmp	r3, r7
 800610a:	dcef      	bgt.n	80060ec <_printf_float+0x378>
 800610c:	e74d      	b.n	8005faa <_printf_float+0x236>
 800610e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006110:	2a01      	cmp	r2, #1
 8006112:	dc01      	bgt.n	8006118 <_printf_float+0x3a4>
 8006114:	07db      	lsls	r3, r3, #31
 8006116:	d538      	bpl.n	800618a <_printf_float+0x416>
 8006118:	2301      	movs	r3, #1
 800611a:	463a      	mov	r2, r7
 800611c:	4659      	mov	r1, fp
 800611e:	4628      	mov	r0, r5
 8006120:	47b0      	blx	r6
 8006122:	3001      	adds	r0, #1
 8006124:	f43f ae7d 	beq.w	8005e22 <_printf_float+0xae>
 8006128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800612c:	4659      	mov	r1, fp
 800612e:	4628      	mov	r0, r5
 8006130:	47b0      	blx	r6
 8006132:	3001      	adds	r0, #1
 8006134:	f107 0701 	add.w	r7, r7, #1
 8006138:	f43f ae73 	beq.w	8005e22 <_printf_float+0xae>
 800613c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006142:	2200      	movs	r2, #0
 8006144:	f103 38ff 	add.w	r8, r3, #4294967295
 8006148:	2300      	movs	r3, #0
 800614a:	f7fa fc2d 	bl	80009a8 <__aeabi_dcmpeq>
 800614e:	b9c0      	cbnz	r0, 8006182 <_printf_float+0x40e>
 8006150:	4643      	mov	r3, r8
 8006152:	463a      	mov	r2, r7
 8006154:	4659      	mov	r1, fp
 8006156:	4628      	mov	r0, r5
 8006158:	47b0      	blx	r6
 800615a:	3001      	adds	r0, #1
 800615c:	d10d      	bne.n	800617a <_printf_float+0x406>
 800615e:	e660      	b.n	8005e22 <_printf_float+0xae>
 8006160:	2301      	movs	r3, #1
 8006162:	4642      	mov	r2, r8
 8006164:	4659      	mov	r1, fp
 8006166:	4628      	mov	r0, r5
 8006168:	47b0      	blx	r6
 800616a:	3001      	adds	r0, #1
 800616c:	f43f ae59 	beq.w	8005e22 <_printf_float+0xae>
 8006170:	3701      	adds	r7, #1
 8006172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006174:	3b01      	subs	r3, #1
 8006176:	42bb      	cmp	r3, r7
 8006178:	dcf2      	bgt.n	8006160 <_printf_float+0x3ec>
 800617a:	464b      	mov	r3, r9
 800617c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006180:	e6e4      	b.n	8005f4c <_printf_float+0x1d8>
 8006182:	2700      	movs	r7, #0
 8006184:	f104 081a 	add.w	r8, r4, #26
 8006188:	e7f3      	b.n	8006172 <_printf_float+0x3fe>
 800618a:	2301      	movs	r3, #1
 800618c:	e7e1      	b.n	8006152 <_printf_float+0x3de>
 800618e:	2301      	movs	r3, #1
 8006190:	4642      	mov	r2, r8
 8006192:	4659      	mov	r1, fp
 8006194:	4628      	mov	r0, r5
 8006196:	47b0      	blx	r6
 8006198:	3001      	adds	r0, #1
 800619a:	f43f ae42 	beq.w	8005e22 <_printf_float+0xae>
 800619e:	3701      	adds	r7, #1
 80061a0:	68e3      	ldr	r3, [r4, #12]
 80061a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	42bb      	cmp	r3, r7
 80061a8:	dcf1      	bgt.n	800618e <_printf_float+0x41a>
 80061aa:	e702      	b.n	8005fb2 <_printf_float+0x23e>
 80061ac:	2700      	movs	r7, #0
 80061ae:	f104 0819 	add.w	r8, r4, #25
 80061b2:	e7f5      	b.n	80061a0 <_printf_float+0x42c>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f43f ae94 	beq.w	8005ee2 <_printf_float+0x16e>
 80061ba:	f04f 0c00 	mov.w	ip, #0
 80061be:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80061c2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80061c6:	6022      	str	r2, [r4, #0]
 80061c8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80061cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	463a      	mov	r2, r7
 80061d4:	464b      	mov	r3, r9
 80061d6:	4628      	mov	r0, r5
 80061d8:	f7ff fd3a 	bl	8005c50 <__cvt>
 80061dc:	4607      	mov	r7, r0
 80061de:	e64f      	b.n	8005e80 <_printf_float+0x10c>

080061e0 <_printf_common>:
 80061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	4691      	mov	r9, r2
 80061e6:	461f      	mov	r7, r3
 80061e8:	688a      	ldr	r2, [r1, #8]
 80061ea:	690b      	ldr	r3, [r1, #16]
 80061ec:	4606      	mov	r6, r0
 80061ee:	4293      	cmp	r3, r2
 80061f0:	bfb8      	it	lt
 80061f2:	4613      	movlt	r3, r2
 80061f4:	f8c9 3000 	str.w	r3, [r9]
 80061f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061fc:	460c      	mov	r4, r1
 80061fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006202:	b112      	cbz	r2, 800620a <_printf_common+0x2a>
 8006204:	3301      	adds	r3, #1
 8006206:	f8c9 3000 	str.w	r3, [r9]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	0699      	lsls	r1, r3, #26
 800620e:	bf42      	ittt	mi
 8006210:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006214:	3302      	addmi	r3, #2
 8006216:	f8c9 3000 	strmi.w	r3, [r9]
 800621a:	6825      	ldr	r5, [r4, #0]
 800621c:	f015 0506 	ands.w	r5, r5, #6
 8006220:	d107      	bne.n	8006232 <_printf_common+0x52>
 8006222:	f104 0a19 	add.w	sl, r4, #25
 8006226:	68e3      	ldr	r3, [r4, #12]
 8006228:	f8d9 2000 	ldr.w	r2, [r9]
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	42ab      	cmp	r3, r5
 8006230:	dc29      	bgt.n	8006286 <_printf_common+0xa6>
 8006232:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	3300      	adds	r3, #0
 800623a:	bf18      	it	ne
 800623c:	2301      	movne	r3, #1
 800623e:	0692      	lsls	r2, r2, #26
 8006240:	d42e      	bmi.n	80062a0 <_printf_common+0xc0>
 8006242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006246:	4639      	mov	r1, r7
 8006248:	4630      	mov	r0, r6
 800624a:	47c0      	blx	r8
 800624c:	3001      	adds	r0, #1
 800624e:	d021      	beq.n	8006294 <_printf_common+0xb4>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	68e5      	ldr	r5, [r4, #12]
 8006254:	f003 0306 	and.w	r3, r3, #6
 8006258:	2b04      	cmp	r3, #4
 800625a:	bf18      	it	ne
 800625c:	2500      	movne	r5, #0
 800625e:	f8d9 2000 	ldr.w	r2, [r9]
 8006262:	f04f 0900 	mov.w	r9, #0
 8006266:	bf08      	it	eq
 8006268:	1aad      	subeq	r5, r5, r2
 800626a:	68a3      	ldr	r3, [r4, #8]
 800626c:	6922      	ldr	r2, [r4, #16]
 800626e:	bf08      	it	eq
 8006270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006274:	4293      	cmp	r3, r2
 8006276:	bfc4      	itt	gt
 8006278:	1a9b      	subgt	r3, r3, r2
 800627a:	18ed      	addgt	r5, r5, r3
 800627c:	341a      	adds	r4, #26
 800627e:	454d      	cmp	r5, r9
 8006280:	d11a      	bne.n	80062b8 <_printf_common+0xd8>
 8006282:	2000      	movs	r0, #0
 8006284:	e008      	b.n	8006298 <_printf_common+0xb8>
 8006286:	2301      	movs	r3, #1
 8006288:	4652      	mov	r2, sl
 800628a:	4639      	mov	r1, r7
 800628c:	4630      	mov	r0, r6
 800628e:	47c0      	blx	r8
 8006290:	3001      	adds	r0, #1
 8006292:	d103      	bne.n	800629c <_printf_common+0xbc>
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629c:	3501      	adds	r5, #1
 800629e:	e7c2      	b.n	8006226 <_printf_common+0x46>
 80062a0:	2030      	movs	r0, #48	; 0x30
 80062a2:	18e1      	adds	r1, r4, r3
 80062a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ae:	4422      	add	r2, r4
 80062b0:	3302      	adds	r3, #2
 80062b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062b6:	e7c4      	b.n	8006242 <_printf_common+0x62>
 80062b8:	2301      	movs	r3, #1
 80062ba:	4622      	mov	r2, r4
 80062bc:	4639      	mov	r1, r7
 80062be:	4630      	mov	r0, r6
 80062c0:	47c0      	blx	r8
 80062c2:	3001      	adds	r0, #1
 80062c4:	d0e6      	beq.n	8006294 <_printf_common+0xb4>
 80062c6:	f109 0901 	add.w	r9, r9, #1
 80062ca:	e7d8      	b.n	800627e <_printf_common+0x9e>

080062cc <_printf_i>:
 80062cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80062d4:	460c      	mov	r4, r1
 80062d6:	7e09      	ldrb	r1, [r1, #24]
 80062d8:	b085      	sub	sp, #20
 80062da:	296e      	cmp	r1, #110	; 0x6e
 80062dc:	4617      	mov	r7, r2
 80062de:	4606      	mov	r6, r0
 80062e0:	4698      	mov	r8, r3
 80062e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062e4:	f000 80b3 	beq.w	800644e <_printf_i+0x182>
 80062e8:	d822      	bhi.n	8006330 <_printf_i+0x64>
 80062ea:	2963      	cmp	r1, #99	; 0x63
 80062ec:	d036      	beq.n	800635c <_printf_i+0x90>
 80062ee:	d80a      	bhi.n	8006306 <_printf_i+0x3a>
 80062f0:	2900      	cmp	r1, #0
 80062f2:	f000 80b9 	beq.w	8006468 <_printf_i+0x19c>
 80062f6:	2958      	cmp	r1, #88	; 0x58
 80062f8:	f000 8083 	beq.w	8006402 <_printf_i+0x136>
 80062fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006300:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006304:	e032      	b.n	800636c <_printf_i+0xa0>
 8006306:	2964      	cmp	r1, #100	; 0x64
 8006308:	d001      	beq.n	800630e <_printf_i+0x42>
 800630a:	2969      	cmp	r1, #105	; 0x69
 800630c:	d1f6      	bne.n	80062fc <_printf_i+0x30>
 800630e:	6820      	ldr	r0, [r4, #0]
 8006310:	6813      	ldr	r3, [r2, #0]
 8006312:	0605      	lsls	r5, r0, #24
 8006314:	f103 0104 	add.w	r1, r3, #4
 8006318:	d52a      	bpl.n	8006370 <_printf_i+0xa4>
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	da03      	bge.n	800632a <_printf_i+0x5e>
 8006322:	222d      	movs	r2, #45	; 0x2d
 8006324:	425b      	negs	r3, r3
 8006326:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800632a:	486f      	ldr	r0, [pc, #444]	; (80064e8 <_printf_i+0x21c>)
 800632c:	220a      	movs	r2, #10
 800632e:	e039      	b.n	80063a4 <_printf_i+0xd8>
 8006330:	2973      	cmp	r1, #115	; 0x73
 8006332:	f000 809d 	beq.w	8006470 <_printf_i+0x1a4>
 8006336:	d808      	bhi.n	800634a <_printf_i+0x7e>
 8006338:	296f      	cmp	r1, #111	; 0x6f
 800633a:	d020      	beq.n	800637e <_printf_i+0xb2>
 800633c:	2970      	cmp	r1, #112	; 0x70
 800633e:	d1dd      	bne.n	80062fc <_printf_i+0x30>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	f043 0320 	orr.w	r3, r3, #32
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	e003      	b.n	8006352 <_printf_i+0x86>
 800634a:	2975      	cmp	r1, #117	; 0x75
 800634c:	d017      	beq.n	800637e <_printf_i+0xb2>
 800634e:	2978      	cmp	r1, #120	; 0x78
 8006350:	d1d4      	bne.n	80062fc <_printf_i+0x30>
 8006352:	2378      	movs	r3, #120	; 0x78
 8006354:	4865      	ldr	r0, [pc, #404]	; (80064ec <_printf_i+0x220>)
 8006356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800635a:	e055      	b.n	8006408 <_printf_i+0x13c>
 800635c:	6813      	ldr	r3, [r2, #0]
 800635e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006362:	1d19      	adds	r1, r3, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6011      	str	r1, [r2, #0]
 8006368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800636c:	2301      	movs	r3, #1
 800636e:	e08c      	b.n	800648a <_printf_i+0x1be>
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006376:	6011      	str	r1, [r2, #0]
 8006378:	bf18      	it	ne
 800637a:	b21b      	sxthne	r3, r3
 800637c:	e7cf      	b.n	800631e <_printf_i+0x52>
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	6825      	ldr	r5, [r4, #0]
 8006382:	1d18      	adds	r0, r3, #4
 8006384:	6010      	str	r0, [r2, #0]
 8006386:	0628      	lsls	r0, r5, #24
 8006388:	d501      	bpl.n	800638e <_printf_i+0xc2>
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	e002      	b.n	8006394 <_printf_i+0xc8>
 800638e:	0668      	lsls	r0, r5, #25
 8006390:	d5fb      	bpl.n	800638a <_printf_i+0xbe>
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	296f      	cmp	r1, #111	; 0x6f
 8006396:	bf14      	ite	ne
 8006398:	220a      	movne	r2, #10
 800639a:	2208      	moveq	r2, #8
 800639c:	4852      	ldr	r0, [pc, #328]	; (80064e8 <_printf_i+0x21c>)
 800639e:	2100      	movs	r1, #0
 80063a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063a4:	6865      	ldr	r5, [r4, #4]
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	60a5      	str	r5, [r4, #8]
 80063aa:	f2c0 8095 	blt.w	80064d8 <_printf_i+0x20c>
 80063ae:	6821      	ldr	r1, [r4, #0]
 80063b0:	f021 0104 	bic.w	r1, r1, #4
 80063b4:	6021      	str	r1, [r4, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d13d      	bne.n	8006436 <_printf_i+0x16a>
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	f040 808e 	bne.w	80064dc <_printf_i+0x210>
 80063c0:	4665      	mov	r5, ip
 80063c2:	2a08      	cmp	r2, #8
 80063c4:	d10b      	bne.n	80063de <_printf_i+0x112>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	07db      	lsls	r3, r3, #31
 80063ca:	d508      	bpl.n	80063de <_printf_i+0x112>
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	6862      	ldr	r2, [r4, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	bfde      	ittt	le
 80063d4:	2330      	movle	r3, #48	; 0x30
 80063d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063de:	ebac 0305 	sub.w	r3, ip, r5
 80063e2:	6123      	str	r3, [r4, #16]
 80063e4:	f8cd 8000 	str.w	r8, [sp]
 80063e8:	463b      	mov	r3, r7
 80063ea:	aa03      	add	r2, sp, #12
 80063ec:	4621      	mov	r1, r4
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7ff fef6 	bl	80061e0 <_printf_common>
 80063f4:	3001      	adds	r0, #1
 80063f6:	d14d      	bne.n	8006494 <_printf_i+0x1c8>
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	b005      	add	sp, #20
 80063fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006402:	4839      	ldr	r0, [pc, #228]	; (80064e8 <_printf_i+0x21c>)
 8006404:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006408:	6813      	ldr	r3, [r2, #0]
 800640a:	6821      	ldr	r1, [r4, #0]
 800640c:	1d1d      	adds	r5, r3, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6015      	str	r5, [r2, #0]
 8006412:	060a      	lsls	r2, r1, #24
 8006414:	d50b      	bpl.n	800642e <_printf_i+0x162>
 8006416:	07ca      	lsls	r2, r1, #31
 8006418:	bf44      	itt	mi
 800641a:	f041 0120 	orrmi.w	r1, r1, #32
 800641e:	6021      	strmi	r1, [r4, #0]
 8006420:	b91b      	cbnz	r3, 800642a <_printf_i+0x15e>
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	f022 0220 	bic.w	r2, r2, #32
 8006428:	6022      	str	r2, [r4, #0]
 800642a:	2210      	movs	r2, #16
 800642c:	e7b7      	b.n	800639e <_printf_i+0xd2>
 800642e:	064d      	lsls	r5, r1, #25
 8006430:	bf48      	it	mi
 8006432:	b29b      	uxthmi	r3, r3
 8006434:	e7ef      	b.n	8006416 <_printf_i+0x14a>
 8006436:	4665      	mov	r5, ip
 8006438:	fbb3 f1f2 	udiv	r1, r3, r2
 800643c:	fb02 3311 	mls	r3, r2, r1, r3
 8006440:	5cc3      	ldrb	r3, [r0, r3]
 8006442:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006446:	460b      	mov	r3, r1
 8006448:	2900      	cmp	r1, #0
 800644a:	d1f5      	bne.n	8006438 <_printf_i+0x16c>
 800644c:	e7b9      	b.n	80063c2 <_printf_i+0xf6>
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	6825      	ldr	r5, [r4, #0]
 8006452:	1d18      	adds	r0, r3, #4
 8006454:	6961      	ldr	r1, [r4, #20]
 8006456:	6010      	str	r0, [r2, #0]
 8006458:	0628      	lsls	r0, r5, #24
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	d501      	bpl.n	8006462 <_printf_i+0x196>
 800645e:	6019      	str	r1, [r3, #0]
 8006460:	e002      	b.n	8006468 <_printf_i+0x19c>
 8006462:	066a      	lsls	r2, r5, #25
 8006464:	d5fb      	bpl.n	800645e <_printf_i+0x192>
 8006466:	8019      	strh	r1, [r3, #0]
 8006468:	2300      	movs	r3, #0
 800646a:	4665      	mov	r5, ip
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	e7b9      	b.n	80063e4 <_printf_i+0x118>
 8006470:	6813      	ldr	r3, [r2, #0]
 8006472:	1d19      	adds	r1, r3, #4
 8006474:	6011      	str	r1, [r2, #0]
 8006476:	681d      	ldr	r5, [r3, #0]
 8006478:	6862      	ldr	r2, [r4, #4]
 800647a:	2100      	movs	r1, #0
 800647c:	4628      	mov	r0, r5
 800647e:	f001 fa2d 	bl	80078dc <memchr>
 8006482:	b108      	cbz	r0, 8006488 <_printf_i+0x1bc>
 8006484:	1b40      	subs	r0, r0, r5
 8006486:	6060      	str	r0, [r4, #4]
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	6123      	str	r3, [r4, #16]
 800648c:	2300      	movs	r3, #0
 800648e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006492:	e7a7      	b.n	80063e4 <_printf_i+0x118>
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	462a      	mov	r2, r5
 8006498:	4639      	mov	r1, r7
 800649a:	4630      	mov	r0, r6
 800649c:	47c0      	blx	r8
 800649e:	3001      	adds	r0, #1
 80064a0:	d0aa      	beq.n	80063f8 <_printf_i+0x12c>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	079b      	lsls	r3, r3, #30
 80064a6:	d413      	bmi.n	80064d0 <_printf_i+0x204>
 80064a8:	68e0      	ldr	r0, [r4, #12]
 80064aa:	9b03      	ldr	r3, [sp, #12]
 80064ac:	4298      	cmp	r0, r3
 80064ae:	bfb8      	it	lt
 80064b0:	4618      	movlt	r0, r3
 80064b2:	e7a3      	b.n	80063fc <_printf_i+0x130>
 80064b4:	2301      	movs	r3, #1
 80064b6:	464a      	mov	r2, r9
 80064b8:	4639      	mov	r1, r7
 80064ba:	4630      	mov	r0, r6
 80064bc:	47c0      	blx	r8
 80064be:	3001      	adds	r0, #1
 80064c0:	d09a      	beq.n	80063f8 <_printf_i+0x12c>
 80064c2:	3501      	adds	r5, #1
 80064c4:	68e3      	ldr	r3, [r4, #12]
 80064c6:	9a03      	ldr	r2, [sp, #12]
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	42ab      	cmp	r3, r5
 80064cc:	dcf2      	bgt.n	80064b4 <_printf_i+0x1e8>
 80064ce:	e7eb      	b.n	80064a8 <_printf_i+0x1dc>
 80064d0:	2500      	movs	r5, #0
 80064d2:	f104 0919 	add.w	r9, r4, #25
 80064d6:	e7f5      	b.n	80064c4 <_printf_i+0x1f8>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1ac      	bne.n	8006436 <_printf_i+0x16a>
 80064dc:	7803      	ldrb	r3, [r0, #0]
 80064de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064e6:	e76c      	b.n	80063c2 <_printf_i+0xf6>
 80064e8:	080091a0 	.word	0x080091a0
 80064ec:	080091b1 	.word	0x080091b1

080064f0 <iprintf>:
 80064f0:	b40f      	push	{r0, r1, r2, r3}
 80064f2:	4b0a      	ldr	r3, [pc, #40]	; (800651c <iprintf+0x2c>)
 80064f4:	b513      	push	{r0, r1, r4, lr}
 80064f6:	681c      	ldr	r4, [r3, #0]
 80064f8:	b124      	cbz	r4, 8006504 <iprintf+0x14>
 80064fa:	69a3      	ldr	r3, [r4, #24]
 80064fc:	b913      	cbnz	r3, 8006504 <iprintf+0x14>
 80064fe:	4620      	mov	r0, r4
 8006500:	f001 f8a8 	bl	8007654 <__sinit>
 8006504:	ab05      	add	r3, sp, #20
 8006506:	9a04      	ldr	r2, [sp, #16]
 8006508:	68a1      	ldr	r1, [r4, #8]
 800650a:	4620      	mov	r0, r4
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	f001 fd05 	bl	8007f1c <_vfiprintf_r>
 8006512:	b002      	add	sp, #8
 8006514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006518:	b004      	add	sp, #16
 800651a:	4770      	bx	lr
 800651c:	20000438 	.word	0x20000438

08006520 <putchar>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4b08      	ldr	r3, [pc, #32]	; (8006544 <putchar+0x24>)
 8006524:	4605      	mov	r5, r0
 8006526:	681c      	ldr	r4, [r3, #0]
 8006528:	b124      	cbz	r4, 8006534 <putchar+0x14>
 800652a:	69a3      	ldr	r3, [r4, #24]
 800652c:	b913      	cbnz	r3, 8006534 <putchar+0x14>
 800652e:	4620      	mov	r0, r4
 8006530:	f001 f890 	bl	8007654 <__sinit>
 8006534:	68a2      	ldr	r2, [r4, #8]
 8006536:	4629      	mov	r1, r5
 8006538:	4620      	mov	r0, r4
 800653a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800653e:	f001 be03 	b.w	8008148 <_putc_r>
 8006542:	bf00      	nop
 8006544:	20000438 	.word	0x20000438

08006548 <_puts_r>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	460e      	mov	r6, r1
 800654c:	4605      	mov	r5, r0
 800654e:	b118      	cbz	r0, 8006558 <_puts_r+0x10>
 8006550:	6983      	ldr	r3, [r0, #24]
 8006552:	b90b      	cbnz	r3, 8006558 <_puts_r+0x10>
 8006554:	f001 f87e 	bl	8007654 <__sinit>
 8006558:	69ab      	ldr	r3, [r5, #24]
 800655a:	68ac      	ldr	r4, [r5, #8]
 800655c:	b913      	cbnz	r3, 8006564 <_puts_r+0x1c>
 800655e:	4628      	mov	r0, r5
 8006560:	f001 f878 	bl	8007654 <__sinit>
 8006564:	4b23      	ldr	r3, [pc, #140]	; (80065f4 <_puts_r+0xac>)
 8006566:	429c      	cmp	r4, r3
 8006568:	d117      	bne.n	800659a <_puts_r+0x52>
 800656a:	686c      	ldr	r4, [r5, #4]
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	071b      	lsls	r3, r3, #28
 8006570:	d51d      	bpl.n	80065ae <_puts_r+0x66>
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	b1db      	cbz	r3, 80065ae <_puts_r+0x66>
 8006576:	3e01      	subs	r6, #1
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800657e:	3b01      	subs	r3, #1
 8006580:	60a3      	str	r3, [r4, #8]
 8006582:	b9e9      	cbnz	r1, 80065c0 <_puts_r+0x78>
 8006584:	2b00      	cmp	r3, #0
 8006586:	da2e      	bge.n	80065e6 <_puts_r+0x9e>
 8006588:	4622      	mov	r2, r4
 800658a:	210a      	movs	r1, #10
 800658c:	4628      	mov	r0, r5
 800658e:	f000 f84f 	bl	8006630 <__swbuf_r>
 8006592:	3001      	adds	r0, #1
 8006594:	d011      	beq.n	80065ba <_puts_r+0x72>
 8006596:	200a      	movs	r0, #10
 8006598:	e011      	b.n	80065be <_puts_r+0x76>
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <_puts_r+0xb0>)
 800659c:	429c      	cmp	r4, r3
 800659e:	d101      	bne.n	80065a4 <_puts_r+0x5c>
 80065a0:	68ac      	ldr	r4, [r5, #8]
 80065a2:	e7e3      	b.n	800656c <_puts_r+0x24>
 80065a4:	4b15      	ldr	r3, [pc, #84]	; (80065fc <_puts_r+0xb4>)
 80065a6:	429c      	cmp	r4, r3
 80065a8:	bf08      	it	eq
 80065aa:	68ec      	ldreq	r4, [r5, #12]
 80065ac:	e7de      	b.n	800656c <_puts_r+0x24>
 80065ae:	4621      	mov	r1, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 f89d 	bl	80066f0 <__swsetup_r>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d0dd      	beq.n	8006576 <_puts_r+0x2e>
 80065ba:	f04f 30ff 	mov.w	r0, #4294967295
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da04      	bge.n	80065ce <_puts_r+0x86>
 80065c4:	69a2      	ldr	r2, [r4, #24]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	dc06      	bgt.n	80065d8 <_puts_r+0x90>
 80065ca:	290a      	cmp	r1, #10
 80065cc:	d004      	beq.n	80065d8 <_puts_r+0x90>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	6022      	str	r2, [r4, #0]
 80065d4:	7019      	strb	r1, [r3, #0]
 80065d6:	e7cf      	b.n	8006578 <_puts_r+0x30>
 80065d8:	4622      	mov	r2, r4
 80065da:	4628      	mov	r0, r5
 80065dc:	f000 f828 	bl	8006630 <__swbuf_r>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d1c9      	bne.n	8006578 <_puts_r+0x30>
 80065e4:	e7e9      	b.n	80065ba <_puts_r+0x72>
 80065e6:	200a      	movs	r0, #10
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	6022      	str	r2, [r4, #0]
 80065ee:	7018      	strb	r0, [r3, #0]
 80065f0:	e7e5      	b.n	80065be <_puts_r+0x76>
 80065f2:	bf00      	nop
 80065f4:	080092f0 	.word	0x080092f0
 80065f8:	08009310 	.word	0x08009310
 80065fc:	080092d0 	.word	0x080092d0

08006600 <puts>:
 8006600:	4b02      	ldr	r3, [pc, #8]	; (800660c <puts+0xc>)
 8006602:	4601      	mov	r1, r0
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	f7ff bf9f 	b.w	8006548 <_puts_r>
 800660a:	bf00      	nop
 800660c:	20000438 	.word	0x20000438

08006610 <_sbrk_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	2300      	movs	r3, #0
 8006614:	4c05      	ldr	r4, [pc, #20]	; (800662c <_sbrk_r+0x1c>)
 8006616:	4605      	mov	r5, r0
 8006618:	4608      	mov	r0, r1
 800661a:	6023      	str	r3, [r4, #0]
 800661c:	f7fc fb20 	bl	8002c60 <_sbrk>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_sbrk_r+0x1a>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	b103      	cbz	r3, 800662a <_sbrk_r+0x1a>
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	20000c34 	.word	0x20000c34

08006630 <__swbuf_r>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	460e      	mov	r6, r1
 8006634:	4614      	mov	r4, r2
 8006636:	4605      	mov	r5, r0
 8006638:	b118      	cbz	r0, 8006642 <__swbuf_r+0x12>
 800663a:	6983      	ldr	r3, [r0, #24]
 800663c:	b90b      	cbnz	r3, 8006642 <__swbuf_r+0x12>
 800663e:	f001 f809 	bl	8007654 <__sinit>
 8006642:	4b21      	ldr	r3, [pc, #132]	; (80066c8 <__swbuf_r+0x98>)
 8006644:	429c      	cmp	r4, r3
 8006646:	d12a      	bne.n	800669e <__swbuf_r+0x6e>
 8006648:	686c      	ldr	r4, [r5, #4]
 800664a:	69a3      	ldr	r3, [r4, #24]
 800664c:	60a3      	str	r3, [r4, #8]
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	071a      	lsls	r2, r3, #28
 8006652:	d52e      	bpl.n	80066b2 <__swbuf_r+0x82>
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	b363      	cbz	r3, 80066b2 <__swbuf_r+0x82>
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	b2f6      	uxtb	r6, r6
 800665e:	1ac0      	subs	r0, r0, r3
 8006660:	6963      	ldr	r3, [r4, #20]
 8006662:	4637      	mov	r7, r6
 8006664:	4283      	cmp	r3, r0
 8006666:	dc04      	bgt.n	8006672 <__swbuf_r+0x42>
 8006668:	4621      	mov	r1, r4
 800666a:	4628      	mov	r0, r5
 800666c:	f000 ff76 	bl	800755c <_fflush_r>
 8006670:	bb28      	cbnz	r0, 80066be <__swbuf_r+0x8e>
 8006672:	68a3      	ldr	r3, [r4, #8]
 8006674:	3001      	adds	r0, #1
 8006676:	3b01      	subs	r3, #1
 8006678:	60a3      	str	r3, [r4, #8]
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	6022      	str	r2, [r4, #0]
 8006680:	701e      	strb	r6, [r3, #0]
 8006682:	6963      	ldr	r3, [r4, #20]
 8006684:	4283      	cmp	r3, r0
 8006686:	d004      	beq.n	8006692 <__swbuf_r+0x62>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	07db      	lsls	r3, r3, #31
 800668c:	d519      	bpl.n	80066c2 <__swbuf_r+0x92>
 800668e:	2e0a      	cmp	r6, #10
 8006690:	d117      	bne.n	80066c2 <__swbuf_r+0x92>
 8006692:	4621      	mov	r1, r4
 8006694:	4628      	mov	r0, r5
 8006696:	f000 ff61 	bl	800755c <_fflush_r>
 800669a:	b190      	cbz	r0, 80066c2 <__swbuf_r+0x92>
 800669c:	e00f      	b.n	80066be <__swbuf_r+0x8e>
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <__swbuf_r+0x9c>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	d101      	bne.n	80066a8 <__swbuf_r+0x78>
 80066a4:	68ac      	ldr	r4, [r5, #8]
 80066a6:	e7d0      	b.n	800664a <__swbuf_r+0x1a>
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <__swbuf_r+0xa0>)
 80066aa:	429c      	cmp	r4, r3
 80066ac:	bf08      	it	eq
 80066ae:	68ec      	ldreq	r4, [r5, #12]
 80066b0:	e7cb      	b.n	800664a <__swbuf_r+0x1a>
 80066b2:	4621      	mov	r1, r4
 80066b4:	4628      	mov	r0, r5
 80066b6:	f000 f81b 	bl	80066f0 <__swsetup_r>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d0cc      	beq.n	8006658 <__swbuf_r+0x28>
 80066be:	f04f 37ff 	mov.w	r7, #4294967295
 80066c2:	4638      	mov	r0, r7
 80066c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c6:	bf00      	nop
 80066c8:	080092f0 	.word	0x080092f0
 80066cc:	08009310 	.word	0x08009310
 80066d0:	080092d0 	.word	0x080092d0

080066d4 <__ascii_wctomb>:
 80066d4:	b149      	cbz	r1, 80066ea <__ascii_wctomb+0x16>
 80066d6:	2aff      	cmp	r2, #255	; 0xff
 80066d8:	bf8b      	itete	hi
 80066da:	238a      	movhi	r3, #138	; 0x8a
 80066dc:	700a      	strbls	r2, [r1, #0]
 80066de:	6003      	strhi	r3, [r0, #0]
 80066e0:	2001      	movls	r0, #1
 80066e2:	bf88      	it	hi
 80066e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80066e8:	4770      	bx	lr
 80066ea:	4608      	mov	r0, r1
 80066ec:	4770      	bx	lr
	...

080066f0 <__swsetup_r>:
 80066f0:	4b32      	ldr	r3, [pc, #200]	; (80067bc <__swsetup_r+0xcc>)
 80066f2:	b570      	push	{r4, r5, r6, lr}
 80066f4:	681d      	ldr	r5, [r3, #0]
 80066f6:	4606      	mov	r6, r0
 80066f8:	460c      	mov	r4, r1
 80066fa:	b125      	cbz	r5, 8006706 <__swsetup_r+0x16>
 80066fc:	69ab      	ldr	r3, [r5, #24]
 80066fe:	b913      	cbnz	r3, 8006706 <__swsetup_r+0x16>
 8006700:	4628      	mov	r0, r5
 8006702:	f000 ffa7 	bl	8007654 <__sinit>
 8006706:	4b2e      	ldr	r3, [pc, #184]	; (80067c0 <__swsetup_r+0xd0>)
 8006708:	429c      	cmp	r4, r3
 800670a:	d10f      	bne.n	800672c <__swsetup_r+0x3c>
 800670c:	686c      	ldr	r4, [r5, #4]
 800670e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006712:	b29a      	uxth	r2, r3
 8006714:	0715      	lsls	r5, r2, #28
 8006716:	d42c      	bmi.n	8006772 <__swsetup_r+0x82>
 8006718:	06d0      	lsls	r0, r2, #27
 800671a:	d411      	bmi.n	8006740 <__swsetup_r+0x50>
 800671c:	2209      	movs	r2, #9
 800671e:	6032      	str	r2, [r6, #0]
 8006720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	f04f 30ff 	mov.w	r0, #4294967295
 800672a:	e03e      	b.n	80067aa <__swsetup_r+0xba>
 800672c:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <__swsetup_r+0xd4>)
 800672e:	429c      	cmp	r4, r3
 8006730:	d101      	bne.n	8006736 <__swsetup_r+0x46>
 8006732:	68ac      	ldr	r4, [r5, #8]
 8006734:	e7eb      	b.n	800670e <__swsetup_r+0x1e>
 8006736:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <__swsetup_r+0xd8>)
 8006738:	429c      	cmp	r4, r3
 800673a:	bf08      	it	eq
 800673c:	68ec      	ldreq	r4, [r5, #12]
 800673e:	e7e6      	b.n	800670e <__swsetup_r+0x1e>
 8006740:	0751      	lsls	r1, r2, #29
 8006742:	d512      	bpl.n	800676a <__swsetup_r+0x7a>
 8006744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006746:	b141      	cbz	r1, 800675a <__swsetup_r+0x6a>
 8006748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800674c:	4299      	cmp	r1, r3
 800674e:	d002      	beq.n	8006756 <__swsetup_r+0x66>
 8006750:	4630      	mov	r0, r6
 8006752:	f7ff f9d7 	bl	8005b04 <_free_r>
 8006756:	2300      	movs	r3, #0
 8006758:	6363      	str	r3, [r4, #52]	; 0x34
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006760:	81a3      	strh	r3, [r4, #12]
 8006762:	2300      	movs	r3, #0
 8006764:	6063      	str	r3, [r4, #4]
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	f043 0308 	orr.w	r3, r3, #8
 8006770:	81a3      	strh	r3, [r4, #12]
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	b94b      	cbnz	r3, 800678a <__swsetup_r+0x9a>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800677c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006780:	d003      	beq.n	800678a <__swsetup_r+0x9a>
 8006782:	4621      	mov	r1, r4
 8006784:	4630      	mov	r0, r6
 8006786:	f001 f869 	bl	800785c <__smakebuf_r>
 800678a:	89a2      	ldrh	r2, [r4, #12]
 800678c:	f012 0301 	ands.w	r3, r2, #1
 8006790:	d00c      	beq.n	80067ac <__swsetup_r+0xbc>
 8006792:	2300      	movs	r3, #0
 8006794:	60a3      	str	r3, [r4, #8]
 8006796:	6963      	ldr	r3, [r4, #20]
 8006798:	425b      	negs	r3, r3
 800679a:	61a3      	str	r3, [r4, #24]
 800679c:	6923      	ldr	r3, [r4, #16]
 800679e:	b953      	cbnz	r3, 80067b6 <__swsetup_r+0xc6>
 80067a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80067a8:	d1ba      	bne.n	8006720 <__swsetup_r+0x30>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	0792      	lsls	r2, r2, #30
 80067ae:	bf58      	it	pl
 80067b0:	6963      	ldrpl	r3, [r4, #20]
 80067b2:	60a3      	str	r3, [r4, #8]
 80067b4:	e7f2      	b.n	800679c <__swsetup_r+0xac>
 80067b6:	2000      	movs	r0, #0
 80067b8:	e7f7      	b.n	80067aa <__swsetup_r+0xba>
 80067ba:	bf00      	nop
 80067bc:	20000438 	.word	0x20000438
 80067c0:	080092f0 	.word	0x080092f0
 80067c4:	08009310 	.word	0x08009310
 80067c8:	080092d0 	.word	0x080092d0

080067cc <quorem>:
 80067cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d0:	6903      	ldr	r3, [r0, #16]
 80067d2:	690c      	ldr	r4, [r1, #16]
 80067d4:	4680      	mov	r8, r0
 80067d6:	42a3      	cmp	r3, r4
 80067d8:	f2c0 8084 	blt.w	80068e4 <quorem+0x118>
 80067dc:	3c01      	subs	r4, #1
 80067de:	f101 0714 	add.w	r7, r1, #20
 80067e2:	f100 0614 	add.w	r6, r0, #20
 80067e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80067ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80067ee:	3501      	adds	r5, #1
 80067f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80067f4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80067f8:	eb06 030c 	add.w	r3, r6, ip
 80067fc:	eb07 090c 	add.w	r9, r7, ip
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	b39d      	cbz	r5, 800686c <quorem+0xa0>
 8006804:	f04f 0a00 	mov.w	sl, #0
 8006808:	4638      	mov	r0, r7
 800680a:	46b6      	mov	lr, r6
 800680c:	46d3      	mov	fp, sl
 800680e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006812:	b293      	uxth	r3, r2
 8006814:	fb05 a303 	mla	r3, r5, r3, sl
 8006818:	0c12      	lsrs	r2, r2, #16
 800681a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800681e:	fb05 a202 	mla	r2, r5, r2, sl
 8006822:	b29b      	uxth	r3, r3
 8006824:	ebab 0303 	sub.w	r3, fp, r3
 8006828:	f8de b000 	ldr.w	fp, [lr]
 800682c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006830:	fa1f fb8b 	uxth.w	fp, fp
 8006834:	445b      	add	r3, fp
 8006836:	fa1f fb82 	uxth.w	fp, r2
 800683a:	f8de 2000 	ldr.w	r2, [lr]
 800683e:	4581      	cmp	r9, r0
 8006840:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006844:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006848:	b29b      	uxth	r3, r3
 800684a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800684e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006852:	f84e 3b04 	str.w	r3, [lr], #4
 8006856:	d2da      	bcs.n	800680e <quorem+0x42>
 8006858:	f856 300c 	ldr.w	r3, [r6, ip]
 800685c:	b933      	cbnz	r3, 800686c <quorem+0xa0>
 800685e:	9b01      	ldr	r3, [sp, #4]
 8006860:	3b04      	subs	r3, #4
 8006862:	429e      	cmp	r6, r3
 8006864:	461a      	mov	r2, r3
 8006866:	d331      	bcc.n	80068cc <quorem+0x100>
 8006868:	f8c8 4010 	str.w	r4, [r8, #16]
 800686c:	4640      	mov	r0, r8
 800686e:	f001 fa59 	bl	8007d24 <__mcmp>
 8006872:	2800      	cmp	r0, #0
 8006874:	db26      	blt.n	80068c4 <quorem+0xf8>
 8006876:	4630      	mov	r0, r6
 8006878:	f04f 0c00 	mov.w	ip, #0
 800687c:	3501      	adds	r5, #1
 800687e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006882:	f8d0 e000 	ldr.w	lr, [r0]
 8006886:	b28b      	uxth	r3, r1
 8006888:	ebac 0303 	sub.w	r3, ip, r3
 800688c:	fa1f f28e 	uxth.w	r2, lr
 8006890:	4413      	add	r3, r2
 8006892:	0c0a      	lsrs	r2, r1, #16
 8006894:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006898:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800689c:	b29b      	uxth	r3, r3
 800689e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068a2:	45b9      	cmp	r9, r7
 80068a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068a8:	f840 3b04 	str.w	r3, [r0], #4
 80068ac:	d2e7      	bcs.n	800687e <quorem+0xb2>
 80068ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80068b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80068b6:	b92a      	cbnz	r2, 80068c4 <quorem+0xf8>
 80068b8:	3b04      	subs	r3, #4
 80068ba:	429e      	cmp	r6, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	d30b      	bcc.n	80068d8 <quorem+0x10c>
 80068c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80068c4:	4628      	mov	r0, r5
 80068c6:	b003      	add	sp, #12
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	3b04      	subs	r3, #4
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	d1c9      	bne.n	8006868 <quorem+0x9c>
 80068d4:	3c01      	subs	r4, #1
 80068d6:	e7c4      	b.n	8006862 <quorem+0x96>
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	3b04      	subs	r3, #4
 80068dc:	2a00      	cmp	r2, #0
 80068de:	d1ef      	bne.n	80068c0 <quorem+0xf4>
 80068e0:	3c01      	subs	r4, #1
 80068e2:	e7ea      	b.n	80068ba <quorem+0xee>
 80068e4:	2000      	movs	r0, #0
 80068e6:	e7ee      	b.n	80068c6 <quorem+0xfa>

080068e8 <_dtoa_r>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	4616      	mov	r6, r2
 80068ee:	461f      	mov	r7, r3
 80068f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068f2:	b095      	sub	sp, #84	; 0x54
 80068f4:	4604      	mov	r4, r0
 80068f6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80068fa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80068fe:	b93d      	cbnz	r5, 8006910 <_dtoa_r+0x28>
 8006900:	2010      	movs	r0, #16
 8006902:	f7ff f8c9 	bl	8005a98 <malloc>
 8006906:	6260      	str	r0, [r4, #36]	; 0x24
 8006908:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800690c:	6005      	str	r5, [r0, #0]
 800690e:	60c5      	str	r5, [r0, #12]
 8006910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	b151      	cbz	r1, 800692c <_dtoa_r+0x44>
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	2301      	movs	r3, #1
 800691a:	4093      	lsls	r3, r2
 800691c:	604a      	str	r2, [r1, #4]
 800691e:	608b      	str	r3, [r1, #8]
 8006920:	4620      	mov	r0, r4
 8006922:	f001 f81f 	bl	8007964 <_Bfree>
 8006926:	2200      	movs	r2, #0
 8006928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	1e3b      	subs	r3, r7, #0
 800692e:	bfaf      	iteee	ge
 8006930:	2300      	movge	r3, #0
 8006932:	2201      	movlt	r2, #1
 8006934:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006938:	9303      	strlt	r3, [sp, #12]
 800693a:	bfac      	ite	ge
 800693c:	f8c8 3000 	strge.w	r3, [r8]
 8006940:	f8c8 2000 	strlt.w	r2, [r8]
 8006944:	4bae      	ldr	r3, [pc, #696]	; (8006c00 <_dtoa_r+0x318>)
 8006946:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800694a:	ea33 0308 	bics.w	r3, r3, r8
 800694e:	d11b      	bne.n	8006988 <_dtoa_r+0xa0>
 8006950:	f242 730f 	movw	r3, #9999	; 0x270f
 8006954:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	9b02      	ldr	r3, [sp, #8]
 800695a:	b923      	cbnz	r3, 8006966 <_dtoa_r+0x7e>
 800695c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006960:	2800      	cmp	r0, #0
 8006962:	f000 8545 	beq.w	80073f0 <_dtoa_r+0xb08>
 8006966:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006968:	b953      	cbnz	r3, 8006980 <_dtoa_r+0x98>
 800696a:	4ba6      	ldr	r3, [pc, #664]	; (8006c04 <_dtoa_r+0x31c>)
 800696c:	e021      	b.n	80069b2 <_dtoa_r+0xca>
 800696e:	4ba6      	ldr	r3, [pc, #664]	; (8006c08 <_dtoa_r+0x320>)
 8006970:	9306      	str	r3, [sp, #24]
 8006972:	3308      	adds	r3, #8
 8006974:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	9806      	ldr	r0, [sp, #24]
 800697a:	b015      	add	sp, #84	; 0x54
 800697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006980:	4ba0      	ldr	r3, [pc, #640]	; (8006c04 <_dtoa_r+0x31c>)
 8006982:	9306      	str	r3, [sp, #24]
 8006984:	3303      	adds	r3, #3
 8006986:	e7f5      	b.n	8006974 <_dtoa_r+0x8c>
 8006988:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800698c:	2200      	movs	r2, #0
 800698e:	2300      	movs	r3, #0
 8006990:	4630      	mov	r0, r6
 8006992:	4639      	mov	r1, r7
 8006994:	f7fa f808 	bl	80009a8 <__aeabi_dcmpeq>
 8006998:	4682      	mov	sl, r0
 800699a:	b160      	cbz	r0, 80069b6 <_dtoa_r+0xce>
 800699c:	2301      	movs	r3, #1
 800699e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8520 	beq.w	80073ea <_dtoa_r+0xb02>
 80069aa:	4b98      	ldr	r3, [pc, #608]	; (8006c0c <_dtoa_r+0x324>)
 80069ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	9306      	str	r3, [sp, #24]
 80069b4:	e7e0      	b.n	8006978 <_dtoa_r+0x90>
 80069b6:	ab12      	add	r3, sp, #72	; 0x48
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	ab13      	add	r3, sp, #76	; 0x4c
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4632      	mov	r2, r6
 80069c0:	463b      	mov	r3, r7
 80069c2:	4620      	mov	r0, r4
 80069c4:	f001 fa26 	bl	8007e14 <__d2b>
 80069c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80069cc:	4683      	mov	fp, r0
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	d07d      	beq.n	8006ace <_dtoa_r+0x1e6>
 80069d2:	46b0      	mov	r8, r6
 80069d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069d8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80069dc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80069e0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069e4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80069e8:	2200      	movs	r2, #0
 80069ea:	4b89      	ldr	r3, [pc, #548]	; (8006c10 <_dtoa_r+0x328>)
 80069ec:	4640      	mov	r0, r8
 80069ee:	4649      	mov	r1, r9
 80069f0:	f7f9 fbba 	bl	8000168 <__aeabi_dsub>
 80069f4:	a37c      	add	r3, pc, #496	; (adr r3, 8006be8 <_dtoa_r+0x300>)
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f7f9 fd6d 	bl	80004d8 <__aeabi_dmul>
 80069fe:	a37c      	add	r3, pc, #496	; (adr r3, 8006bf0 <_dtoa_r+0x308>)
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f7f9 fbb2 	bl	800016c <__adddf3>
 8006a08:	4606      	mov	r6, r0
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	460f      	mov	r7, r1
 8006a0e:	f7f9 fcf9 	bl	8000404 <__aeabi_i2d>
 8006a12:	a379      	add	r3, pc, #484	; (adr r3, 8006bf8 <_dtoa_r+0x310>)
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f7f9 fd5e 	bl	80004d8 <__aeabi_dmul>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4630      	mov	r0, r6
 8006a22:	4639      	mov	r1, r7
 8006a24:	f7f9 fba2 	bl	800016c <__adddf3>
 8006a28:	4606      	mov	r6, r0
 8006a2a:	460f      	mov	r7, r1
 8006a2c:	f7fa f804 	bl	8000a38 <__aeabi_d2iz>
 8006a30:	2200      	movs	r2, #0
 8006a32:	4682      	mov	sl, r0
 8006a34:	2300      	movs	r3, #0
 8006a36:	4630      	mov	r0, r6
 8006a38:	4639      	mov	r1, r7
 8006a3a:	f7f9 ffbf 	bl	80009bc <__aeabi_dcmplt>
 8006a3e:	b148      	cbz	r0, 8006a54 <_dtoa_r+0x16c>
 8006a40:	4650      	mov	r0, sl
 8006a42:	f7f9 fcdf 	bl	8000404 <__aeabi_i2d>
 8006a46:	4632      	mov	r2, r6
 8006a48:	463b      	mov	r3, r7
 8006a4a:	f7f9 ffad 	bl	80009a8 <__aeabi_dcmpeq>
 8006a4e:	b908      	cbnz	r0, 8006a54 <_dtoa_r+0x16c>
 8006a50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a54:	f1ba 0f16 	cmp.w	sl, #22
 8006a58:	d85a      	bhi.n	8006b10 <_dtoa_r+0x228>
 8006a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a5e:	496d      	ldr	r1, [pc, #436]	; (8006c14 <_dtoa_r+0x32c>)
 8006a60:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a68:	f7f9 ffc6 	bl	80009f8 <__aeabi_dcmpgt>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d051      	beq.n	8006b14 <_dtoa_r+0x22c>
 8006a70:	2300      	movs	r3, #0
 8006a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a76:	930d      	str	r3, [sp, #52]	; 0x34
 8006a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a7a:	1b5d      	subs	r5, r3, r5
 8006a7c:	1e6b      	subs	r3, r5, #1
 8006a7e:	9307      	str	r3, [sp, #28]
 8006a80:	bf43      	ittte	mi
 8006a82:	2300      	movmi	r3, #0
 8006a84:	f1c5 0901 	rsbmi	r9, r5, #1
 8006a88:	9307      	strmi	r3, [sp, #28]
 8006a8a:	f04f 0900 	movpl.w	r9, #0
 8006a8e:	f1ba 0f00 	cmp.w	sl, #0
 8006a92:	db41      	blt.n	8006b18 <_dtoa_r+0x230>
 8006a94:	9b07      	ldr	r3, [sp, #28]
 8006a96:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006a9a:	4453      	add	r3, sl
 8006a9c:	9307      	str	r3, [sp, #28]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	9308      	str	r3, [sp, #32]
 8006aa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006aa4:	2b09      	cmp	r3, #9
 8006aa6:	f200 808f 	bhi.w	8006bc8 <_dtoa_r+0x2e0>
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	bfc4      	itt	gt
 8006aae:	3b04      	subgt	r3, #4
 8006ab0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006ab2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ab4:	bfc8      	it	gt
 8006ab6:	2500      	movgt	r5, #0
 8006ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8006abc:	bfd8      	it	le
 8006abe:	2501      	movle	r5, #1
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	f200 808d 	bhi.w	8006be0 <_dtoa_r+0x2f8>
 8006ac6:	e8df f003 	tbb	[pc, r3]
 8006aca:	7d7b      	.short	0x7d7b
 8006acc:	6f2f      	.short	0x6f2f
 8006ace:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ad2:	441d      	add	r5, r3
 8006ad4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006ad8:	2820      	cmp	r0, #32
 8006ada:	dd13      	ble.n	8006b04 <_dtoa_r+0x21c>
 8006adc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006ae0:	9b02      	ldr	r3, [sp, #8]
 8006ae2:	fa08 f800 	lsl.w	r8, r8, r0
 8006ae6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006aea:	fa23 f000 	lsr.w	r0, r3, r0
 8006aee:	ea48 0000 	orr.w	r0, r8, r0
 8006af2:	f7f9 fc77 	bl	80003e4 <__aeabi_ui2d>
 8006af6:	2301      	movs	r3, #1
 8006af8:	4680      	mov	r8, r0
 8006afa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006afe:	3d01      	subs	r5, #1
 8006b00:	9310      	str	r3, [sp, #64]	; 0x40
 8006b02:	e771      	b.n	80069e8 <_dtoa_r+0x100>
 8006b04:	9b02      	ldr	r3, [sp, #8]
 8006b06:	f1c0 0020 	rsb	r0, r0, #32
 8006b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8006b0e:	e7f0      	b.n	8006af2 <_dtoa_r+0x20a>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e7b0      	b.n	8006a76 <_dtoa_r+0x18e>
 8006b14:	900d      	str	r0, [sp, #52]	; 0x34
 8006b16:	e7af      	b.n	8006a78 <_dtoa_r+0x190>
 8006b18:	f1ca 0300 	rsb	r3, sl, #0
 8006b1c:	9308      	str	r3, [sp, #32]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	eba9 090a 	sub.w	r9, r9, sl
 8006b24:	930c      	str	r3, [sp, #48]	; 0x30
 8006b26:	e7bc      	b.n	8006aa2 <_dtoa_r+0x1ba>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	dd74      	ble.n	8006c1c <_dtoa_r+0x334>
 8006b32:	4698      	mov	r8, r3
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	2200      	movs	r2, #0
 8006b38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b3a:	6072      	str	r2, [r6, #4]
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	f102 0014 	add.w	r0, r2, #20
 8006b42:	4298      	cmp	r0, r3
 8006b44:	6871      	ldr	r1, [r6, #4]
 8006b46:	d96e      	bls.n	8006c26 <_dtoa_r+0x33e>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fed7 	bl	80078fc <_Balloc>
 8006b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b50:	6030      	str	r0, [r6, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f1b8 0f0e 	cmp.w	r8, #14
 8006b58:	9306      	str	r3, [sp, #24]
 8006b5a:	f200 80ed 	bhi.w	8006d38 <_dtoa_r+0x450>
 8006b5e:	2d00      	cmp	r5, #0
 8006b60:	f000 80ea 	beq.w	8006d38 <_dtoa_r+0x450>
 8006b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b68:	f1ba 0f00 	cmp.w	sl, #0
 8006b6c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006b70:	dd77      	ble.n	8006c62 <_dtoa_r+0x37a>
 8006b72:	4a28      	ldr	r2, [pc, #160]	; (8006c14 <_dtoa_r+0x32c>)
 8006b74:	f00a 030f 	and.w	r3, sl, #15
 8006b78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006b7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b80:	06f0      	lsls	r0, r6, #27
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006b8a:	d568      	bpl.n	8006c5e <_dtoa_r+0x376>
 8006b8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006b90:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <_dtoa_r+0x330>)
 8006b92:	2503      	movs	r5, #3
 8006b94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b98:	f7f9 fdc8 	bl	800072c <__aeabi_ddiv>
 8006b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ba0:	f006 060f 	and.w	r6, r6, #15
 8006ba4:	4f1c      	ldr	r7, [pc, #112]	; (8006c18 <_dtoa_r+0x330>)
 8006ba6:	e04f      	b.n	8006c48 <_dtoa_r+0x360>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	9309      	str	r3, [sp, #36]	; 0x24
 8006bac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bae:	4453      	add	r3, sl
 8006bb0:	f103 0801 	add.w	r8, r3, #1
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	4643      	mov	r3, r8
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	bfb8      	it	lt
 8006bbc:	2301      	movlt	r3, #1
 8006bbe:	e7ba      	b.n	8006b36 <_dtoa_r+0x24e>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e7b2      	b.n	8006b2a <_dtoa_r+0x242>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e7f0      	b.n	8006baa <_dtoa_r+0x2c2>
 8006bc8:	2501      	movs	r5, #1
 8006bca:	2300      	movs	r3, #0
 8006bcc:	9509      	str	r5, [sp, #36]	; 0x24
 8006bce:	931e      	str	r3, [sp, #120]	; 0x78
 8006bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	9304      	str	r3, [sp, #16]
 8006bd8:	4698      	mov	r8, r3
 8006bda:	2312      	movs	r3, #18
 8006bdc:	921f      	str	r2, [sp, #124]	; 0x7c
 8006bde:	e7aa      	b.n	8006b36 <_dtoa_r+0x24e>
 8006be0:	2301      	movs	r3, #1
 8006be2:	9309      	str	r3, [sp, #36]	; 0x24
 8006be4:	e7f4      	b.n	8006bd0 <_dtoa_r+0x2e8>
 8006be6:	bf00      	nop
 8006be8:	636f4361 	.word	0x636f4361
 8006bec:	3fd287a7 	.word	0x3fd287a7
 8006bf0:	8b60c8b3 	.word	0x8b60c8b3
 8006bf4:	3fc68a28 	.word	0x3fc68a28
 8006bf8:	509f79fb 	.word	0x509f79fb
 8006bfc:	3fd34413 	.word	0x3fd34413
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	080092cc 	.word	0x080092cc
 8006c08:	080092c3 	.word	0x080092c3
 8006c0c:	0800919f 	.word	0x0800919f
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	08009358 	.word	0x08009358
 8006c18:	08009330 	.word	0x08009330
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	9304      	str	r3, [sp, #16]
 8006c20:	4698      	mov	r8, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	e7da      	b.n	8006bdc <_dtoa_r+0x2f4>
 8006c26:	3101      	adds	r1, #1
 8006c28:	6071      	str	r1, [r6, #4]
 8006c2a:	0052      	lsls	r2, r2, #1
 8006c2c:	e787      	b.n	8006b3e <_dtoa_r+0x256>
 8006c2e:	07f1      	lsls	r1, r6, #31
 8006c30:	d508      	bpl.n	8006c44 <_dtoa_r+0x35c>
 8006c32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3a:	f7f9 fc4d 	bl	80004d8 <__aeabi_dmul>
 8006c3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c42:	3501      	adds	r5, #1
 8006c44:	1076      	asrs	r6, r6, #1
 8006c46:	3708      	adds	r7, #8
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	d1f0      	bne.n	8006c2e <_dtoa_r+0x346>
 8006c4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c54:	f7f9 fd6a 	bl	800072c <__aeabi_ddiv>
 8006c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c5c:	e01b      	b.n	8006c96 <_dtoa_r+0x3ae>
 8006c5e:	2502      	movs	r5, #2
 8006c60:	e7a0      	b.n	8006ba4 <_dtoa_r+0x2bc>
 8006c62:	f000 80a4 	beq.w	8006dae <_dtoa_r+0x4c6>
 8006c66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006c6a:	f1ca 0600 	rsb	r6, sl, #0
 8006c6e:	4ba0      	ldr	r3, [pc, #640]	; (8006ef0 <_dtoa_r+0x608>)
 8006c70:	f006 020f 	and.w	r2, r6, #15
 8006c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 fc2c 	bl	80004d8 <__aeabi_dmul>
 8006c80:	2502      	movs	r5, #2
 8006c82:	2300      	movs	r3, #0
 8006c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c88:	4f9a      	ldr	r7, [pc, #616]	; (8006ef4 <_dtoa_r+0x60c>)
 8006c8a:	1136      	asrs	r6, r6, #4
 8006c8c:	2e00      	cmp	r6, #0
 8006c8e:	f040 8083 	bne.w	8006d98 <_dtoa_r+0x4b0>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e0      	bne.n	8006c58 <_dtoa_r+0x370>
 8006c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 808a 	beq.w	8006db2 <_dtoa_r+0x4ca>
 8006c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ca2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006ca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006caa:	2200      	movs	r2, #0
 8006cac:	4b92      	ldr	r3, [pc, #584]	; (8006ef8 <_dtoa_r+0x610>)
 8006cae:	f7f9 fe85 	bl	80009bc <__aeabi_dcmplt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d07d      	beq.n	8006db2 <_dtoa_r+0x4ca>
 8006cb6:	f1b8 0f00 	cmp.w	r8, #0
 8006cba:	d07a      	beq.n	8006db2 <_dtoa_r+0x4ca>
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd36      	ble.n	8006d30 <_dtoa_r+0x448>
 8006cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4b8c      	ldr	r3, [pc, #560]	; (8006efc <_dtoa_r+0x614>)
 8006cca:	f7f9 fc05 	bl	80004d8 <__aeabi_dmul>
 8006cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd2:	9e04      	ldr	r6, [sp, #16]
 8006cd4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006cd8:	3501      	adds	r5, #1
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f7f9 fb92 	bl	8000404 <__aeabi_i2d>
 8006ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce4:	f7f9 fbf8 	bl	80004d8 <__aeabi_dmul>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4b85      	ldr	r3, [pc, #532]	; (8006f00 <_dtoa_r+0x618>)
 8006cec:	f7f9 fa3e 	bl	800016c <__adddf3>
 8006cf0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006cf4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006cf8:	950b      	str	r5, [sp, #44]	; 0x2c
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	d15c      	bne.n	8006db8 <_dtoa_r+0x4d0>
 8006cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	4b7f      	ldr	r3, [pc, #508]	; (8006f04 <_dtoa_r+0x61c>)
 8006d06:	f7f9 fa2f 	bl	8000168 <__aeabi_dsub>
 8006d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d12:	f7f9 fe71 	bl	80009f8 <__aeabi_dcmpgt>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f040 8281 	bne.w	800721e <_dtoa_r+0x936>
 8006d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d22:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006d26:	f7f9 fe49 	bl	80009bc <__aeabi_dcmplt>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	f040 8275 	bne.w	800721a <_dtoa_r+0x932>
 8006d30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006d34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f2c0 814b 	blt.w	8006fd6 <_dtoa_r+0x6ee>
 8006d40:	f1ba 0f0e 	cmp.w	sl, #14
 8006d44:	f300 8147 	bgt.w	8006fd6 <_dtoa_r+0x6ee>
 8006d48:	4b69      	ldr	r3, [pc, #420]	; (8006ef0 <_dtoa_r+0x608>)
 8006d4a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f280 80d7 	bge.w	8006f0c <_dtoa_r+0x624>
 8006d5e:	f1b8 0f00 	cmp.w	r8, #0
 8006d62:	f300 80d3 	bgt.w	8006f0c <_dtoa_r+0x624>
 8006d66:	f040 8257 	bne.w	8007218 <_dtoa_r+0x930>
 8006d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	4b64      	ldr	r3, [pc, #400]	; (8006f04 <_dtoa_r+0x61c>)
 8006d72:	f7f9 fbb1 	bl	80004d8 <__aeabi_dmul>
 8006d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d7a:	f7f9 fe33 	bl	80009e4 <__aeabi_dcmpge>
 8006d7e:	4646      	mov	r6, r8
 8006d80:	4647      	mov	r7, r8
 8006d82:	2800      	cmp	r0, #0
 8006d84:	f040 822d 	bne.w	80071e2 <_dtoa_r+0x8fa>
 8006d88:	9b06      	ldr	r3, [sp, #24]
 8006d8a:	9a06      	ldr	r2, [sp, #24]
 8006d8c:	1c5d      	adds	r5, r3, #1
 8006d8e:	2331      	movs	r3, #49	; 0x31
 8006d90:	f10a 0a01 	add.w	sl, sl, #1
 8006d94:	7013      	strb	r3, [r2, #0]
 8006d96:	e228      	b.n	80071ea <_dtoa_r+0x902>
 8006d98:	07f2      	lsls	r2, r6, #31
 8006d9a:	d505      	bpl.n	8006da8 <_dtoa_r+0x4c0>
 8006d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da0:	f7f9 fb9a 	bl	80004d8 <__aeabi_dmul>
 8006da4:	2301      	movs	r3, #1
 8006da6:	3501      	adds	r5, #1
 8006da8:	1076      	asrs	r6, r6, #1
 8006daa:	3708      	adds	r7, #8
 8006dac:	e76e      	b.n	8006c8c <_dtoa_r+0x3a4>
 8006dae:	2502      	movs	r5, #2
 8006db0:	e771      	b.n	8006c96 <_dtoa_r+0x3ae>
 8006db2:	4657      	mov	r7, sl
 8006db4:	4646      	mov	r6, r8
 8006db6:	e790      	b.n	8006cda <_dtoa_r+0x3f2>
 8006db8:	4b4d      	ldr	r3, [pc, #308]	; (8006ef0 <_dtoa_r+0x608>)
 8006dba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006dbe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d048      	beq.n	8006e5a <_dtoa_r+0x572>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	2000      	movs	r0, #0
 8006dce:	494e      	ldr	r1, [pc, #312]	; (8006f08 <_dtoa_r+0x620>)
 8006dd0:	f7f9 fcac 	bl	800072c <__aeabi_ddiv>
 8006dd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dd8:	f7f9 f9c6 	bl	8000168 <__aeabi_dsub>
 8006ddc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006de0:	9d06      	ldr	r5, [sp, #24]
 8006de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006de6:	f7f9 fe27 	bl	8000a38 <__aeabi_d2iz>
 8006dea:	9011      	str	r0, [sp, #68]	; 0x44
 8006dec:	f7f9 fb0a 	bl	8000404 <__aeabi_i2d>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df8:	f7f9 f9b6 	bl	8000168 <__aeabi_dsub>
 8006dfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e02:	3330      	adds	r3, #48	; 0x30
 8006e04:	f805 3b01 	strb.w	r3, [r5], #1
 8006e08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e0c:	f7f9 fdd6 	bl	80009bc <__aeabi_dcmplt>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d163      	bne.n	8006edc <_dtoa_r+0x5f4>
 8006e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e18:	2000      	movs	r0, #0
 8006e1a:	4937      	ldr	r1, [pc, #220]	; (8006ef8 <_dtoa_r+0x610>)
 8006e1c:	f7f9 f9a4 	bl	8000168 <__aeabi_dsub>
 8006e20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e24:	f7f9 fdca 	bl	80009bc <__aeabi_dcmplt>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	f040 80b5 	bne.w	8006f98 <_dtoa_r+0x6b0>
 8006e2e:	9b06      	ldr	r3, [sp, #24]
 8006e30:	1aeb      	subs	r3, r5, r3
 8006e32:	429e      	cmp	r6, r3
 8006e34:	f77f af7c 	ble.w	8006d30 <_dtoa_r+0x448>
 8006e38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4b2f      	ldr	r3, [pc, #188]	; (8006efc <_dtoa_r+0x614>)
 8006e40:	f7f9 fb4a 	bl	80004d8 <__aeabi_dmul>
 8006e44:	2200      	movs	r2, #0
 8006e46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e4e:	4b2b      	ldr	r3, [pc, #172]	; (8006efc <_dtoa_r+0x614>)
 8006e50:	f7f9 fb42 	bl	80004d8 <__aeabi_dmul>
 8006e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e58:	e7c3      	b.n	8006de2 <_dtoa_r+0x4fa>
 8006e5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e5e:	f7f9 fb3b 	bl	80004d8 <__aeabi_dmul>
 8006e62:	9b06      	ldr	r3, [sp, #24]
 8006e64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e68:	199d      	adds	r5, r3, r6
 8006e6a:	461e      	mov	r6, r3
 8006e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e70:	f7f9 fde2 	bl	8000a38 <__aeabi_d2iz>
 8006e74:	9011      	str	r0, [sp, #68]	; 0x44
 8006e76:	f7f9 fac5 	bl	8000404 <__aeabi_i2d>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e82:	f7f9 f971 	bl	8000168 <__aeabi_dsub>
 8006e86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e8c:	3330      	adds	r3, #48	; 0x30
 8006e8e:	f806 3b01 	strb.w	r3, [r6], #1
 8006e92:	42ae      	cmp	r6, r5
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	d124      	bne.n	8006ee4 <_dtoa_r+0x5fc>
 8006e9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e9e:	4b1a      	ldr	r3, [pc, #104]	; (8006f08 <_dtoa_r+0x620>)
 8006ea0:	f7f9 f964 	bl	800016c <__adddf3>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eac:	f7f9 fda4 	bl	80009f8 <__aeabi_dcmpgt>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d171      	bne.n	8006f98 <_dtoa_r+0x6b0>
 8006eb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006eb8:	2000      	movs	r0, #0
 8006eba:	4913      	ldr	r1, [pc, #76]	; (8006f08 <_dtoa_r+0x620>)
 8006ebc:	f7f9 f954 	bl	8000168 <__aeabi_dsub>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ec8:	f7f9 fd78 	bl	80009bc <__aeabi_dcmplt>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f43f af2f 	beq.w	8006d30 <_dtoa_r+0x448>
 8006ed2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ed6:	1e6a      	subs	r2, r5, #1
 8006ed8:	2b30      	cmp	r3, #48	; 0x30
 8006eda:	d001      	beq.n	8006ee0 <_dtoa_r+0x5f8>
 8006edc:	46ba      	mov	sl, r7
 8006ede:	e04a      	b.n	8006f76 <_dtoa_r+0x68e>
 8006ee0:	4615      	mov	r5, r2
 8006ee2:	e7f6      	b.n	8006ed2 <_dtoa_r+0x5ea>
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <_dtoa_r+0x614>)
 8006ee6:	f7f9 faf7 	bl	80004d8 <__aeabi_dmul>
 8006eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eee:	e7bd      	b.n	8006e6c <_dtoa_r+0x584>
 8006ef0:	08009358 	.word	0x08009358
 8006ef4:	08009330 	.word	0x08009330
 8006ef8:	3ff00000 	.word	0x3ff00000
 8006efc:	40240000 	.word	0x40240000
 8006f00:	401c0000 	.word	0x401c0000
 8006f04:	40140000 	.word	0x40140000
 8006f08:	3fe00000 	.word	0x3fe00000
 8006f0c:	9d06      	ldr	r5, [sp, #24]
 8006f0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f16:	4630      	mov	r0, r6
 8006f18:	4639      	mov	r1, r7
 8006f1a:	f7f9 fc07 	bl	800072c <__aeabi_ddiv>
 8006f1e:	f7f9 fd8b 	bl	8000a38 <__aeabi_d2iz>
 8006f22:	4681      	mov	r9, r0
 8006f24:	f7f9 fa6e 	bl	8000404 <__aeabi_i2d>
 8006f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f2c:	f7f9 fad4 	bl	80004d8 <__aeabi_dmul>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4630      	mov	r0, r6
 8006f36:	4639      	mov	r1, r7
 8006f38:	f7f9 f916 	bl	8000168 <__aeabi_dsub>
 8006f3c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006f40:	f805 6b01 	strb.w	r6, [r5], #1
 8006f44:	9e06      	ldr	r6, [sp, #24]
 8006f46:	4602      	mov	r2, r0
 8006f48:	1bae      	subs	r6, r5, r6
 8006f4a:	45b0      	cmp	r8, r6
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	d135      	bne.n	8006fbc <_dtoa_r+0x6d4>
 8006f50:	f7f9 f90c 	bl	800016c <__adddf3>
 8006f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f58:	4606      	mov	r6, r0
 8006f5a:	460f      	mov	r7, r1
 8006f5c:	f7f9 fd4c 	bl	80009f8 <__aeabi_dcmpgt>
 8006f60:	b9c8      	cbnz	r0, 8006f96 <_dtoa_r+0x6ae>
 8006f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f66:	4630      	mov	r0, r6
 8006f68:	4639      	mov	r1, r7
 8006f6a:	f7f9 fd1d 	bl	80009a8 <__aeabi_dcmpeq>
 8006f6e:	b110      	cbz	r0, 8006f76 <_dtoa_r+0x68e>
 8006f70:	f019 0f01 	tst.w	r9, #1
 8006f74:	d10f      	bne.n	8006f96 <_dtoa_r+0x6ae>
 8006f76:	4659      	mov	r1, fp
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fcf3 	bl	8007964 <_Bfree>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f82:	702b      	strb	r3, [r5, #0]
 8006f84:	f10a 0301 	add.w	r3, sl, #1
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f43f acf3 	beq.w	8006978 <_dtoa_r+0x90>
 8006f92:	601d      	str	r5, [r3, #0]
 8006f94:	e4f0      	b.n	8006978 <_dtoa_r+0x90>
 8006f96:	4657      	mov	r7, sl
 8006f98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f9c:	1e6b      	subs	r3, r5, #1
 8006f9e:	2a39      	cmp	r2, #57	; 0x39
 8006fa0:	d106      	bne.n	8006fb0 <_dtoa_r+0x6c8>
 8006fa2:	9a06      	ldr	r2, [sp, #24]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d107      	bne.n	8006fb8 <_dtoa_r+0x6d0>
 8006fa8:	2330      	movs	r3, #48	; 0x30
 8006faa:	7013      	strb	r3, [r2, #0]
 8006fac:	4613      	mov	r3, r2
 8006fae:	3701      	adds	r7, #1
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	3201      	adds	r2, #1
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	e791      	b.n	8006edc <_dtoa_r+0x5f4>
 8006fb8:	461d      	mov	r5, r3
 8006fba:	e7ed      	b.n	8006f98 <_dtoa_r+0x6b0>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4b99      	ldr	r3, [pc, #612]	; (8007224 <_dtoa_r+0x93c>)
 8006fc0:	f7f9 fa8a 	bl	80004d8 <__aeabi_dmul>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4606      	mov	r6, r0
 8006fca:	460f      	mov	r7, r1
 8006fcc:	f7f9 fcec 	bl	80009a8 <__aeabi_dcmpeq>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d09e      	beq.n	8006f12 <_dtoa_r+0x62a>
 8006fd4:	e7cf      	b.n	8006f76 <_dtoa_r+0x68e>
 8006fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	f000 8088 	beq.w	80070ee <_dtoa_r+0x806>
 8006fde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006fe0:	2a01      	cmp	r2, #1
 8006fe2:	dc6d      	bgt.n	80070c0 <_dtoa_r+0x7d8>
 8006fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	d066      	beq.n	80070b8 <_dtoa_r+0x7d0>
 8006fea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fee:	464d      	mov	r5, r9
 8006ff0:	9e08      	ldr	r6, [sp, #32]
 8006ff2:	9a07      	ldr	r2, [sp, #28]
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	441a      	add	r2, r3
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	4499      	add	r9, r3
 8006ffc:	9207      	str	r2, [sp, #28]
 8006ffe:	f000 fd51 	bl	8007aa4 <__i2b>
 8007002:	4607      	mov	r7, r0
 8007004:	2d00      	cmp	r5, #0
 8007006:	dd0b      	ble.n	8007020 <_dtoa_r+0x738>
 8007008:	9b07      	ldr	r3, [sp, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dd08      	ble.n	8007020 <_dtoa_r+0x738>
 800700e:	42ab      	cmp	r3, r5
 8007010:	bfa8      	it	ge
 8007012:	462b      	movge	r3, r5
 8007014:	9a07      	ldr	r2, [sp, #28]
 8007016:	eba9 0903 	sub.w	r9, r9, r3
 800701a:	1aed      	subs	r5, r5, r3
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	9307      	str	r3, [sp, #28]
 8007020:	9b08      	ldr	r3, [sp, #32]
 8007022:	b1eb      	cbz	r3, 8007060 <_dtoa_r+0x778>
 8007024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007026:	2b00      	cmp	r3, #0
 8007028:	d065      	beq.n	80070f6 <_dtoa_r+0x80e>
 800702a:	b18e      	cbz	r6, 8007050 <_dtoa_r+0x768>
 800702c:	4639      	mov	r1, r7
 800702e:	4632      	mov	r2, r6
 8007030:	4620      	mov	r0, r4
 8007032:	f000 fdd5 	bl	8007be0 <__pow5mult>
 8007036:	465a      	mov	r2, fp
 8007038:	4601      	mov	r1, r0
 800703a:	4607      	mov	r7, r0
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fd3a 	bl	8007ab6 <__multiply>
 8007042:	4659      	mov	r1, fp
 8007044:	900a      	str	r0, [sp, #40]	; 0x28
 8007046:	4620      	mov	r0, r4
 8007048:	f000 fc8c 	bl	8007964 <_Bfree>
 800704c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704e:	469b      	mov	fp, r3
 8007050:	9b08      	ldr	r3, [sp, #32]
 8007052:	1b9a      	subs	r2, r3, r6
 8007054:	d004      	beq.n	8007060 <_dtoa_r+0x778>
 8007056:	4659      	mov	r1, fp
 8007058:	4620      	mov	r0, r4
 800705a:	f000 fdc1 	bl	8007be0 <__pow5mult>
 800705e:	4683      	mov	fp, r0
 8007060:	2101      	movs	r1, #1
 8007062:	4620      	mov	r0, r4
 8007064:	f000 fd1e 	bl	8007aa4 <__i2b>
 8007068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800706a:	4606      	mov	r6, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 81c6 	beq.w	80073fe <_dtoa_r+0xb16>
 8007072:	461a      	mov	r2, r3
 8007074:	4601      	mov	r1, r0
 8007076:	4620      	mov	r0, r4
 8007078:	f000 fdb2 	bl	8007be0 <__pow5mult>
 800707c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800707e:	4606      	mov	r6, r0
 8007080:	2b01      	cmp	r3, #1
 8007082:	dc3e      	bgt.n	8007102 <_dtoa_r+0x81a>
 8007084:	9b02      	ldr	r3, [sp, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d137      	bne.n	80070fa <_dtoa_r+0x812>
 800708a:	9b03      	ldr	r3, [sp, #12]
 800708c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007090:	2b00      	cmp	r3, #0
 8007092:	d134      	bne.n	80070fe <_dtoa_r+0x816>
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800709a:	0d1b      	lsrs	r3, r3, #20
 800709c:	051b      	lsls	r3, r3, #20
 800709e:	b12b      	cbz	r3, 80070ac <_dtoa_r+0x7c4>
 80070a0:	9b07      	ldr	r3, [sp, #28]
 80070a2:	f109 0901 	add.w	r9, r9, #1
 80070a6:	3301      	adds	r3, #1
 80070a8:	9307      	str	r3, [sp, #28]
 80070aa:	2301      	movs	r3, #1
 80070ac:	9308      	str	r3, [sp, #32]
 80070ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d128      	bne.n	8007106 <_dtoa_r+0x81e>
 80070b4:	2001      	movs	r0, #1
 80070b6:	e02e      	b.n	8007116 <_dtoa_r+0x82e>
 80070b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070be:	e796      	b.n	8006fee <_dtoa_r+0x706>
 80070c0:	9b08      	ldr	r3, [sp, #32]
 80070c2:	f108 36ff 	add.w	r6, r8, #4294967295
 80070c6:	42b3      	cmp	r3, r6
 80070c8:	bfb7      	itett	lt
 80070ca:	9b08      	ldrlt	r3, [sp, #32]
 80070cc:	1b9e      	subge	r6, r3, r6
 80070ce:	1af2      	sublt	r2, r6, r3
 80070d0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80070d2:	bfbf      	itttt	lt
 80070d4:	9608      	strlt	r6, [sp, #32]
 80070d6:	189b      	addlt	r3, r3, r2
 80070d8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80070da:	2600      	movlt	r6, #0
 80070dc:	f1b8 0f00 	cmp.w	r8, #0
 80070e0:	bfb9      	ittee	lt
 80070e2:	eba9 0508 	sublt.w	r5, r9, r8
 80070e6:	2300      	movlt	r3, #0
 80070e8:	464d      	movge	r5, r9
 80070ea:	4643      	movge	r3, r8
 80070ec:	e781      	b.n	8006ff2 <_dtoa_r+0x70a>
 80070ee:	9e08      	ldr	r6, [sp, #32]
 80070f0:	464d      	mov	r5, r9
 80070f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80070f4:	e786      	b.n	8007004 <_dtoa_r+0x71c>
 80070f6:	9a08      	ldr	r2, [sp, #32]
 80070f8:	e7ad      	b.n	8007056 <_dtoa_r+0x76e>
 80070fa:	2300      	movs	r3, #0
 80070fc:	e7d6      	b.n	80070ac <_dtoa_r+0x7c4>
 80070fe:	9b02      	ldr	r3, [sp, #8]
 8007100:	e7d4      	b.n	80070ac <_dtoa_r+0x7c4>
 8007102:	2300      	movs	r3, #0
 8007104:	9308      	str	r3, [sp, #32]
 8007106:	6933      	ldr	r3, [r6, #16]
 8007108:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800710c:	6918      	ldr	r0, [r3, #16]
 800710e:	f000 fc7b 	bl	8007a08 <__hi0bits>
 8007112:	f1c0 0020 	rsb	r0, r0, #32
 8007116:	9b07      	ldr	r3, [sp, #28]
 8007118:	4418      	add	r0, r3
 800711a:	f010 001f 	ands.w	r0, r0, #31
 800711e:	d047      	beq.n	80071b0 <_dtoa_r+0x8c8>
 8007120:	f1c0 0320 	rsb	r3, r0, #32
 8007124:	2b04      	cmp	r3, #4
 8007126:	dd3b      	ble.n	80071a0 <_dtoa_r+0x8b8>
 8007128:	9b07      	ldr	r3, [sp, #28]
 800712a:	f1c0 001c 	rsb	r0, r0, #28
 800712e:	4481      	add	r9, r0
 8007130:	4405      	add	r5, r0
 8007132:	4403      	add	r3, r0
 8007134:	9307      	str	r3, [sp, #28]
 8007136:	f1b9 0f00 	cmp.w	r9, #0
 800713a:	dd05      	ble.n	8007148 <_dtoa_r+0x860>
 800713c:	4659      	mov	r1, fp
 800713e:	464a      	mov	r2, r9
 8007140:	4620      	mov	r0, r4
 8007142:	f000 fd9b 	bl	8007c7c <__lshift>
 8007146:	4683      	mov	fp, r0
 8007148:	9b07      	ldr	r3, [sp, #28]
 800714a:	2b00      	cmp	r3, #0
 800714c:	dd05      	ble.n	800715a <_dtoa_r+0x872>
 800714e:	4631      	mov	r1, r6
 8007150:	461a      	mov	r2, r3
 8007152:	4620      	mov	r0, r4
 8007154:	f000 fd92 	bl	8007c7c <__lshift>
 8007158:	4606      	mov	r6, r0
 800715a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800715c:	b353      	cbz	r3, 80071b4 <_dtoa_r+0x8cc>
 800715e:	4631      	mov	r1, r6
 8007160:	4658      	mov	r0, fp
 8007162:	f000 fddf 	bl	8007d24 <__mcmp>
 8007166:	2800      	cmp	r0, #0
 8007168:	da24      	bge.n	80071b4 <_dtoa_r+0x8cc>
 800716a:	2300      	movs	r3, #0
 800716c:	4659      	mov	r1, fp
 800716e:	220a      	movs	r2, #10
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fc0e 	bl	8007992 <__multadd>
 8007176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007178:	f10a 3aff 	add.w	sl, sl, #4294967295
 800717c:	4683      	mov	fp, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 8144 	beq.w	800740c <_dtoa_r+0xb24>
 8007184:	2300      	movs	r3, #0
 8007186:	4639      	mov	r1, r7
 8007188:	220a      	movs	r2, #10
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fc01 	bl	8007992 <__multadd>
 8007190:	9b04      	ldr	r3, [sp, #16]
 8007192:	4607      	mov	r7, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	dc4d      	bgt.n	8007234 <_dtoa_r+0x94c>
 8007198:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800719a:	2b02      	cmp	r3, #2
 800719c:	dd4a      	ble.n	8007234 <_dtoa_r+0x94c>
 800719e:	e011      	b.n	80071c4 <_dtoa_r+0x8dc>
 80071a0:	d0c9      	beq.n	8007136 <_dtoa_r+0x84e>
 80071a2:	9a07      	ldr	r2, [sp, #28]
 80071a4:	331c      	adds	r3, #28
 80071a6:	441a      	add	r2, r3
 80071a8:	4499      	add	r9, r3
 80071aa:	441d      	add	r5, r3
 80071ac:	4613      	mov	r3, r2
 80071ae:	e7c1      	b.n	8007134 <_dtoa_r+0x84c>
 80071b0:	4603      	mov	r3, r0
 80071b2:	e7f6      	b.n	80071a2 <_dtoa_r+0x8ba>
 80071b4:	f1b8 0f00 	cmp.w	r8, #0
 80071b8:	dc36      	bgt.n	8007228 <_dtoa_r+0x940>
 80071ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071bc:	2b02      	cmp	r3, #2
 80071be:	dd33      	ble.n	8007228 <_dtoa_r+0x940>
 80071c0:	f8cd 8010 	str.w	r8, [sp, #16]
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	b963      	cbnz	r3, 80071e2 <_dtoa_r+0x8fa>
 80071c8:	4631      	mov	r1, r6
 80071ca:	2205      	movs	r2, #5
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fbe0 	bl	8007992 <__multadd>
 80071d2:	4601      	mov	r1, r0
 80071d4:	4606      	mov	r6, r0
 80071d6:	4658      	mov	r0, fp
 80071d8:	f000 fda4 	bl	8007d24 <__mcmp>
 80071dc:	2800      	cmp	r0, #0
 80071de:	f73f add3 	bgt.w	8006d88 <_dtoa_r+0x4a0>
 80071e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071e4:	9d06      	ldr	r5, [sp, #24]
 80071e6:	ea6f 0a03 	mvn.w	sl, r3
 80071ea:	f04f 0900 	mov.w	r9, #0
 80071ee:	4631      	mov	r1, r6
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fbb7 	bl	8007964 <_Bfree>
 80071f6:	2f00      	cmp	r7, #0
 80071f8:	f43f aebd 	beq.w	8006f76 <_dtoa_r+0x68e>
 80071fc:	f1b9 0f00 	cmp.w	r9, #0
 8007200:	d005      	beq.n	800720e <_dtoa_r+0x926>
 8007202:	45b9      	cmp	r9, r7
 8007204:	d003      	beq.n	800720e <_dtoa_r+0x926>
 8007206:	4649      	mov	r1, r9
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fbab 	bl	8007964 <_Bfree>
 800720e:	4639      	mov	r1, r7
 8007210:	4620      	mov	r0, r4
 8007212:	f000 fba7 	bl	8007964 <_Bfree>
 8007216:	e6ae      	b.n	8006f76 <_dtoa_r+0x68e>
 8007218:	2600      	movs	r6, #0
 800721a:	4637      	mov	r7, r6
 800721c:	e7e1      	b.n	80071e2 <_dtoa_r+0x8fa>
 800721e:	46ba      	mov	sl, r7
 8007220:	4637      	mov	r7, r6
 8007222:	e5b1      	b.n	8006d88 <_dtoa_r+0x4a0>
 8007224:	40240000 	.word	0x40240000
 8007228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722a:	f8cd 8010 	str.w	r8, [sp, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 80f3 	beq.w	800741a <_dtoa_r+0xb32>
 8007234:	2d00      	cmp	r5, #0
 8007236:	dd05      	ble.n	8007244 <_dtoa_r+0x95c>
 8007238:	4639      	mov	r1, r7
 800723a:	462a      	mov	r2, r5
 800723c:	4620      	mov	r0, r4
 800723e:	f000 fd1d 	bl	8007c7c <__lshift>
 8007242:	4607      	mov	r7, r0
 8007244:	9b08      	ldr	r3, [sp, #32]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d04c      	beq.n	80072e4 <_dtoa_r+0x9fc>
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	4620      	mov	r0, r4
 800724e:	f000 fb55 	bl	80078fc <_Balloc>
 8007252:	4605      	mov	r5, r0
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	f107 010c 	add.w	r1, r7, #12
 800725a:	3202      	adds	r2, #2
 800725c:	0092      	lsls	r2, r2, #2
 800725e:	300c      	adds	r0, #12
 8007260:	f7fe fc3c 	bl	8005adc <memcpy>
 8007264:	2201      	movs	r2, #1
 8007266:	4629      	mov	r1, r5
 8007268:	4620      	mov	r0, r4
 800726a:	f000 fd07 	bl	8007c7c <__lshift>
 800726e:	46b9      	mov	r9, r7
 8007270:	4607      	mov	r7, r0
 8007272:	9b06      	ldr	r3, [sp, #24]
 8007274:	9307      	str	r3, [sp, #28]
 8007276:	9b02      	ldr	r3, [sp, #8]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	9308      	str	r3, [sp, #32]
 800727e:	4631      	mov	r1, r6
 8007280:	4658      	mov	r0, fp
 8007282:	f7ff faa3 	bl	80067cc <quorem>
 8007286:	4649      	mov	r1, r9
 8007288:	4605      	mov	r5, r0
 800728a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800728e:	4658      	mov	r0, fp
 8007290:	f000 fd48 	bl	8007d24 <__mcmp>
 8007294:	463a      	mov	r2, r7
 8007296:	9002      	str	r0, [sp, #8]
 8007298:	4631      	mov	r1, r6
 800729a:	4620      	mov	r0, r4
 800729c:	f000 fd5c 	bl	8007d58 <__mdiff>
 80072a0:	68c3      	ldr	r3, [r0, #12]
 80072a2:	4602      	mov	r2, r0
 80072a4:	bb03      	cbnz	r3, 80072e8 <_dtoa_r+0xa00>
 80072a6:	4601      	mov	r1, r0
 80072a8:	9009      	str	r0, [sp, #36]	; 0x24
 80072aa:	4658      	mov	r0, fp
 80072ac:	f000 fd3a 	bl	8007d24 <__mcmp>
 80072b0:	4603      	mov	r3, r0
 80072b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b4:	4611      	mov	r1, r2
 80072b6:	4620      	mov	r0, r4
 80072b8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ba:	f000 fb53 	bl	8007964 <_Bfree>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	b9a3      	cbnz	r3, 80072ec <_dtoa_r+0xa04>
 80072c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072c4:	b992      	cbnz	r2, 80072ec <_dtoa_r+0xa04>
 80072c6:	9a08      	ldr	r2, [sp, #32]
 80072c8:	b982      	cbnz	r2, 80072ec <_dtoa_r+0xa04>
 80072ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80072ce:	d029      	beq.n	8007324 <_dtoa_r+0xa3c>
 80072d0:	9b02      	ldr	r3, [sp, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dd01      	ble.n	80072da <_dtoa_r+0x9f2>
 80072d6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80072da:	9b07      	ldr	r3, [sp, #28]
 80072dc:	1c5d      	adds	r5, r3, #1
 80072de:	f883 8000 	strb.w	r8, [r3]
 80072e2:	e784      	b.n	80071ee <_dtoa_r+0x906>
 80072e4:	4638      	mov	r0, r7
 80072e6:	e7c2      	b.n	800726e <_dtoa_r+0x986>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e7e3      	b.n	80072b4 <_dtoa_r+0x9cc>
 80072ec:	9a02      	ldr	r2, [sp, #8]
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	db04      	blt.n	80072fc <_dtoa_r+0xa14>
 80072f2:	d123      	bne.n	800733c <_dtoa_r+0xa54>
 80072f4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072f6:	bb0a      	cbnz	r2, 800733c <_dtoa_r+0xa54>
 80072f8:	9a08      	ldr	r2, [sp, #32]
 80072fa:	b9fa      	cbnz	r2, 800733c <_dtoa_r+0xa54>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	ddec      	ble.n	80072da <_dtoa_r+0x9f2>
 8007300:	4659      	mov	r1, fp
 8007302:	2201      	movs	r2, #1
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fcb9 	bl	8007c7c <__lshift>
 800730a:	4631      	mov	r1, r6
 800730c:	4683      	mov	fp, r0
 800730e:	f000 fd09 	bl	8007d24 <__mcmp>
 8007312:	2800      	cmp	r0, #0
 8007314:	dc03      	bgt.n	800731e <_dtoa_r+0xa36>
 8007316:	d1e0      	bne.n	80072da <_dtoa_r+0x9f2>
 8007318:	f018 0f01 	tst.w	r8, #1
 800731c:	d0dd      	beq.n	80072da <_dtoa_r+0x9f2>
 800731e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007322:	d1d8      	bne.n	80072d6 <_dtoa_r+0x9ee>
 8007324:	9b07      	ldr	r3, [sp, #28]
 8007326:	9a07      	ldr	r2, [sp, #28]
 8007328:	1c5d      	adds	r5, r3, #1
 800732a:	2339      	movs	r3, #57	; 0x39
 800732c:	7013      	strb	r3, [r2, #0]
 800732e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007332:	1e6a      	subs	r2, r5, #1
 8007334:	2b39      	cmp	r3, #57	; 0x39
 8007336:	d04d      	beq.n	80073d4 <_dtoa_r+0xaec>
 8007338:	3301      	adds	r3, #1
 800733a:	e052      	b.n	80073e2 <_dtoa_r+0xafa>
 800733c:	9a07      	ldr	r2, [sp, #28]
 800733e:	2b00      	cmp	r3, #0
 8007340:	f102 0501 	add.w	r5, r2, #1
 8007344:	dd06      	ble.n	8007354 <_dtoa_r+0xa6c>
 8007346:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800734a:	d0eb      	beq.n	8007324 <_dtoa_r+0xa3c>
 800734c:	f108 0801 	add.w	r8, r8, #1
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	e7c4      	b.n	80072de <_dtoa_r+0x9f6>
 8007354:	9b06      	ldr	r3, [sp, #24]
 8007356:	9a04      	ldr	r2, [sp, #16]
 8007358:	1aeb      	subs	r3, r5, r3
 800735a:	4293      	cmp	r3, r2
 800735c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007360:	d021      	beq.n	80073a6 <_dtoa_r+0xabe>
 8007362:	4659      	mov	r1, fp
 8007364:	2300      	movs	r3, #0
 8007366:	220a      	movs	r2, #10
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fb12 	bl	8007992 <__multadd>
 800736e:	45b9      	cmp	r9, r7
 8007370:	4683      	mov	fp, r0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	f04f 020a 	mov.w	r2, #10
 800737a:	4649      	mov	r1, r9
 800737c:	4620      	mov	r0, r4
 800737e:	d105      	bne.n	800738c <_dtoa_r+0xaa4>
 8007380:	f000 fb07 	bl	8007992 <__multadd>
 8007384:	4681      	mov	r9, r0
 8007386:	4607      	mov	r7, r0
 8007388:	9507      	str	r5, [sp, #28]
 800738a:	e778      	b.n	800727e <_dtoa_r+0x996>
 800738c:	f000 fb01 	bl	8007992 <__multadd>
 8007390:	4639      	mov	r1, r7
 8007392:	4681      	mov	r9, r0
 8007394:	2300      	movs	r3, #0
 8007396:	220a      	movs	r2, #10
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fafa 	bl	8007992 <__multadd>
 800739e:	4607      	mov	r7, r0
 80073a0:	e7f2      	b.n	8007388 <_dtoa_r+0xaa0>
 80073a2:	f04f 0900 	mov.w	r9, #0
 80073a6:	4659      	mov	r1, fp
 80073a8:	2201      	movs	r2, #1
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fc66 	bl	8007c7c <__lshift>
 80073b0:	4631      	mov	r1, r6
 80073b2:	4683      	mov	fp, r0
 80073b4:	f000 fcb6 	bl	8007d24 <__mcmp>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	dcb8      	bgt.n	800732e <_dtoa_r+0xa46>
 80073bc:	d102      	bne.n	80073c4 <_dtoa_r+0xadc>
 80073be:	f018 0f01 	tst.w	r8, #1
 80073c2:	d1b4      	bne.n	800732e <_dtoa_r+0xa46>
 80073c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073c8:	1e6a      	subs	r2, r5, #1
 80073ca:	2b30      	cmp	r3, #48	; 0x30
 80073cc:	f47f af0f 	bne.w	80071ee <_dtoa_r+0x906>
 80073d0:	4615      	mov	r5, r2
 80073d2:	e7f7      	b.n	80073c4 <_dtoa_r+0xadc>
 80073d4:	9b06      	ldr	r3, [sp, #24]
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d105      	bne.n	80073e6 <_dtoa_r+0xafe>
 80073da:	2331      	movs	r3, #49	; 0x31
 80073dc:	9a06      	ldr	r2, [sp, #24]
 80073de:	f10a 0a01 	add.w	sl, sl, #1
 80073e2:	7013      	strb	r3, [r2, #0]
 80073e4:	e703      	b.n	80071ee <_dtoa_r+0x906>
 80073e6:	4615      	mov	r5, r2
 80073e8:	e7a1      	b.n	800732e <_dtoa_r+0xa46>
 80073ea:	4b17      	ldr	r3, [pc, #92]	; (8007448 <_dtoa_r+0xb60>)
 80073ec:	f7ff bae1 	b.w	80069b2 <_dtoa_r+0xca>
 80073f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f47f aabb 	bne.w	800696e <_dtoa_r+0x86>
 80073f8:	4b14      	ldr	r3, [pc, #80]	; (800744c <_dtoa_r+0xb64>)
 80073fa:	f7ff bada 	b.w	80069b2 <_dtoa_r+0xca>
 80073fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007400:	2b01      	cmp	r3, #1
 8007402:	f77f ae3f 	ble.w	8007084 <_dtoa_r+0x79c>
 8007406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007408:	9308      	str	r3, [sp, #32]
 800740a:	e653      	b.n	80070b4 <_dtoa_r+0x7cc>
 800740c:	9b04      	ldr	r3, [sp, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	dc03      	bgt.n	800741a <_dtoa_r+0xb32>
 8007412:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007414:	2b02      	cmp	r3, #2
 8007416:	f73f aed5 	bgt.w	80071c4 <_dtoa_r+0x8dc>
 800741a:	9d06      	ldr	r5, [sp, #24]
 800741c:	4631      	mov	r1, r6
 800741e:	4658      	mov	r0, fp
 8007420:	f7ff f9d4 	bl	80067cc <quorem>
 8007424:	9b06      	ldr	r3, [sp, #24]
 8007426:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800742a:	f805 8b01 	strb.w	r8, [r5], #1
 800742e:	9a04      	ldr	r2, [sp, #16]
 8007430:	1aeb      	subs	r3, r5, r3
 8007432:	429a      	cmp	r2, r3
 8007434:	ddb5      	ble.n	80073a2 <_dtoa_r+0xaba>
 8007436:	4659      	mov	r1, fp
 8007438:	2300      	movs	r3, #0
 800743a:	220a      	movs	r2, #10
 800743c:	4620      	mov	r0, r4
 800743e:	f000 faa8 	bl	8007992 <__multadd>
 8007442:	4683      	mov	fp, r0
 8007444:	e7ea      	b.n	800741c <_dtoa_r+0xb34>
 8007446:	bf00      	nop
 8007448:	0800919e 	.word	0x0800919e
 800744c:	080092c3 	.word	0x080092c3

08007450 <__sflush_r>:
 8007450:	898a      	ldrh	r2, [r1, #12]
 8007452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007456:	4605      	mov	r5, r0
 8007458:	0710      	lsls	r0, r2, #28
 800745a:	460c      	mov	r4, r1
 800745c:	d458      	bmi.n	8007510 <__sflush_r+0xc0>
 800745e:	684b      	ldr	r3, [r1, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	dc05      	bgt.n	8007470 <__sflush_r+0x20>
 8007464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	dc02      	bgt.n	8007470 <__sflush_r+0x20>
 800746a:	2000      	movs	r0, #0
 800746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007472:	2e00      	cmp	r6, #0
 8007474:	d0f9      	beq.n	800746a <__sflush_r+0x1a>
 8007476:	2300      	movs	r3, #0
 8007478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800747c:	682f      	ldr	r7, [r5, #0]
 800747e:	6a21      	ldr	r1, [r4, #32]
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	d032      	beq.n	80074ea <__sflush_r+0x9a>
 8007484:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	075a      	lsls	r2, r3, #29
 800748a:	d505      	bpl.n	8007498 <__sflush_r+0x48>
 800748c:	6863      	ldr	r3, [r4, #4]
 800748e:	1ac0      	subs	r0, r0, r3
 8007490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007492:	b10b      	cbz	r3, 8007498 <__sflush_r+0x48>
 8007494:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007496:	1ac0      	subs	r0, r0, r3
 8007498:	2300      	movs	r3, #0
 800749a:	4602      	mov	r2, r0
 800749c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800749e:	6a21      	ldr	r1, [r4, #32]
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b0      	blx	r6
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	d106      	bne.n	80074b8 <__sflush_r+0x68>
 80074aa:	6829      	ldr	r1, [r5, #0]
 80074ac:	291d      	cmp	r1, #29
 80074ae:	d848      	bhi.n	8007542 <__sflush_r+0xf2>
 80074b0:	4a29      	ldr	r2, [pc, #164]	; (8007558 <__sflush_r+0x108>)
 80074b2:	40ca      	lsrs	r2, r1
 80074b4:	07d6      	lsls	r6, r2, #31
 80074b6:	d544      	bpl.n	8007542 <__sflush_r+0xf2>
 80074b8:	2200      	movs	r2, #0
 80074ba:	6062      	str	r2, [r4, #4]
 80074bc:	6922      	ldr	r2, [r4, #16]
 80074be:	04d9      	lsls	r1, r3, #19
 80074c0:	6022      	str	r2, [r4, #0]
 80074c2:	d504      	bpl.n	80074ce <__sflush_r+0x7e>
 80074c4:	1c42      	adds	r2, r0, #1
 80074c6:	d101      	bne.n	80074cc <__sflush_r+0x7c>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b903      	cbnz	r3, 80074ce <__sflush_r+0x7e>
 80074cc:	6560      	str	r0, [r4, #84]	; 0x54
 80074ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d0:	602f      	str	r7, [r5, #0]
 80074d2:	2900      	cmp	r1, #0
 80074d4:	d0c9      	beq.n	800746a <__sflush_r+0x1a>
 80074d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074da:	4299      	cmp	r1, r3
 80074dc:	d002      	beq.n	80074e4 <__sflush_r+0x94>
 80074de:	4628      	mov	r0, r5
 80074e0:	f7fe fb10 	bl	8005b04 <_free_r>
 80074e4:	2000      	movs	r0, #0
 80074e6:	6360      	str	r0, [r4, #52]	; 0x34
 80074e8:	e7c0      	b.n	800746c <__sflush_r+0x1c>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4628      	mov	r0, r5
 80074ee:	47b0      	blx	r6
 80074f0:	1c41      	adds	r1, r0, #1
 80074f2:	d1c8      	bne.n	8007486 <__sflush_r+0x36>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0c5      	beq.n	8007486 <__sflush_r+0x36>
 80074fa:	2b1d      	cmp	r3, #29
 80074fc:	d001      	beq.n	8007502 <__sflush_r+0xb2>
 80074fe:	2b16      	cmp	r3, #22
 8007500:	d101      	bne.n	8007506 <__sflush_r+0xb6>
 8007502:	602f      	str	r7, [r5, #0]
 8007504:	e7b1      	b.n	800746a <__sflush_r+0x1a>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	e7ad      	b.n	800746c <__sflush_r+0x1c>
 8007510:	690f      	ldr	r7, [r1, #16]
 8007512:	2f00      	cmp	r7, #0
 8007514:	d0a9      	beq.n	800746a <__sflush_r+0x1a>
 8007516:	0793      	lsls	r3, r2, #30
 8007518:	bf18      	it	ne
 800751a:	2300      	movne	r3, #0
 800751c:	680e      	ldr	r6, [r1, #0]
 800751e:	bf08      	it	eq
 8007520:	694b      	ldreq	r3, [r1, #20]
 8007522:	eba6 0807 	sub.w	r8, r6, r7
 8007526:	600f      	str	r7, [r1, #0]
 8007528:	608b      	str	r3, [r1, #8]
 800752a:	f1b8 0f00 	cmp.w	r8, #0
 800752e:	dd9c      	ble.n	800746a <__sflush_r+0x1a>
 8007530:	4643      	mov	r3, r8
 8007532:	463a      	mov	r2, r7
 8007534:	6a21      	ldr	r1, [r4, #32]
 8007536:	4628      	mov	r0, r5
 8007538:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800753a:	47b0      	blx	r6
 800753c:	2800      	cmp	r0, #0
 800753e:	dc06      	bgt.n	800754e <__sflush_r+0xfe>
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	e78e      	b.n	800746c <__sflush_r+0x1c>
 800754e:	4407      	add	r7, r0
 8007550:	eba8 0800 	sub.w	r8, r8, r0
 8007554:	e7e9      	b.n	800752a <__sflush_r+0xda>
 8007556:	bf00      	nop
 8007558:	20400001 	.word	0x20400001

0800755c <_fflush_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	690b      	ldr	r3, [r1, #16]
 8007560:	4605      	mov	r5, r0
 8007562:	460c      	mov	r4, r1
 8007564:	b1db      	cbz	r3, 800759e <_fflush_r+0x42>
 8007566:	b118      	cbz	r0, 8007570 <_fflush_r+0x14>
 8007568:	6983      	ldr	r3, [r0, #24]
 800756a:	b90b      	cbnz	r3, 8007570 <_fflush_r+0x14>
 800756c:	f000 f872 	bl	8007654 <__sinit>
 8007570:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <_fflush_r+0x48>)
 8007572:	429c      	cmp	r4, r3
 8007574:	d109      	bne.n	800758a <_fflush_r+0x2e>
 8007576:	686c      	ldr	r4, [r5, #4]
 8007578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800757c:	b17b      	cbz	r3, 800759e <_fflush_r+0x42>
 800757e:	4621      	mov	r1, r4
 8007580:	4628      	mov	r0, r5
 8007582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007586:	f7ff bf63 	b.w	8007450 <__sflush_r>
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <_fflush_r+0x4c>)
 800758c:	429c      	cmp	r4, r3
 800758e:	d101      	bne.n	8007594 <_fflush_r+0x38>
 8007590:	68ac      	ldr	r4, [r5, #8]
 8007592:	e7f1      	b.n	8007578 <_fflush_r+0x1c>
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <_fflush_r+0x50>)
 8007596:	429c      	cmp	r4, r3
 8007598:	bf08      	it	eq
 800759a:	68ec      	ldreq	r4, [r5, #12]
 800759c:	e7ec      	b.n	8007578 <_fflush_r+0x1c>
 800759e:	2000      	movs	r0, #0
 80075a0:	bd38      	pop	{r3, r4, r5, pc}
 80075a2:	bf00      	nop
 80075a4:	080092f0 	.word	0x080092f0
 80075a8:	08009310 	.word	0x08009310
 80075ac:	080092d0 	.word	0x080092d0

080075b0 <fflush>:
 80075b0:	4601      	mov	r1, r0
 80075b2:	b920      	cbnz	r0, 80075be <fflush+0xe>
 80075b4:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <fflush+0x18>)
 80075b6:	4905      	ldr	r1, [pc, #20]	; (80075cc <fflush+0x1c>)
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	f000 b8d3 	b.w	8007764 <_fwalk_reent>
 80075be:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <fflush+0x20>)
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	f7ff bfcb 	b.w	800755c <_fflush_r>
 80075c6:	bf00      	nop
 80075c8:	08009180 	.word	0x08009180
 80075cc:	0800755d 	.word	0x0800755d
 80075d0:	20000438 	.word	0x20000438

080075d4 <std>:
 80075d4:	2300      	movs	r3, #0
 80075d6:	b510      	push	{r4, lr}
 80075d8:	4604      	mov	r4, r0
 80075da:	e9c0 3300 	strd	r3, r3, [r0]
 80075de:	6083      	str	r3, [r0, #8]
 80075e0:	8181      	strh	r1, [r0, #12]
 80075e2:	6643      	str	r3, [r0, #100]	; 0x64
 80075e4:	81c2      	strh	r2, [r0, #14]
 80075e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ea:	6183      	str	r3, [r0, #24]
 80075ec:	4619      	mov	r1, r3
 80075ee:	2208      	movs	r2, #8
 80075f0:	305c      	adds	r0, #92	; 0x5c
 80075f2:	f7fe fa7e 	bl	8005af2 <memset>
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <std+0x38>)
 80075f8:	6224      	str	r4, [r4, #32]
 80075fa:	6263      	str	r3, [r4, #36]	; 0x24
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <std+0x3c>)
 80075fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007600:	4b04      	ldr	r3, [pc, #16]	; (8007614 <std+0x40>)
 8007602:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <std+0x44>)
 8007606:	6323      	str	r3, [r4, #48]	; 0x30
 8007608:	bd10      	pop	{r4, pc}
 800760a:	bf00      	nop
 800760c:	0800820d 	.word	0x0800820d
 8007610:	0800822f 	.word	0x0800822f
 8007614:	08008267 	.word	0x08008267
 8007618:	0800828b 	.word	0x0800828b

0800761c <_cleanup_r>:
 800761c:	4901      	ldr	r1, [pc, #4]	; (8007624 <_cleanup_r+0x8>)
 800761e:	f000 b8a1 	b.w	8007764 <_fwalk_reent>
 8007622:	bf00      	nop
 8007624:	0800755d 	.word	0x0800755d

08007628 <__sfmoreglue>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	2568      	movs	r5, #104	; 0x68
 800762c:	1e4a      	subs	r2, r1, #1
 800762e:	4355      	muls	r5, r2
 8007630:	460e      	mov	r6, r1
 8007632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007636:	f7fe fab1 	bl	8005b9c <_malloc_r>
 800763a:	4604      	mov	r4, r0
 800763c:	b140      	cbz	r0, 8007650 <__sfmoreglue+0x28>
 800763e:	2100      	movs	r1, #0
 8007640:	e9c0 1600 	strd	r1, r6, [r0]
 8007644:	300c      	adds	r0, #12
 8007646:	60a0      	str	r0, [r4, #8]
 8007648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800764c:	f7fe fa51 	bl	8005af2 <memset>
 8007650:	4620      	mov	r0, r4
 8007652:	bd70      	pop	{r4, r5, r6, pc}

08007654 <__sinit>:
 8007654:	6983      	ldr	r3, [r0, #24]
 8007656:	b510      	push	{r4, lr}
 8007658:	4604      	mov	r4, r0
 800765a:	bb33      	cbnz	r3, 80076aa <__sinit+0x56>
 800765c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007660:	6503      	str	r3, [r0, #80]	; 0x50
 8007662:	4b12      	ldr	r3, [pc, #72]	; (80076ac <__sinit+0x58>)
 8007664:	4a12      	ldr	r2, [pc, #72]	; (80076b0 <__sinit+0x5c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6282      	str	r2, [r0, #40]	; 0x28
 800766a:	4298      	cmp	r0, r3
 800766c:	bf04      	itt	eq
 800766e:	2301      	moveq	r3, #1
 8007670:	6183      	streq	r3, [r0, #24]
 8007672:	f000 f81f 	bl	80076b4 <__sfp>
 8007676:	6060      	str	r0, [r4, #4]
 8007678:	4620      	mov	r0, r4
 800767a:	f000 f81b 	bl	80076b4 <__sfp>
 800767e:	60a0      	str	r0, [r4, #8]
 8007680:	4620      	mov	r0, r4
 8007682:	f000 f817 	bl	80076b4 <__sfp>
 8007686:	2200      	movs	r2, #0
 8007688:	60e0      	str	r0, [r4, #12]
 800768a:	2104      	movs	r1, #4
 800768c:	6860      	ldr	r0, [r4, #4]
 800768e:	f7ff ffa1 	bl	80075d4 <std>
 8007692:	2201      	movs	r2, #1
 8007694:	2109      	movs	r1, #9
 8007696:	68a0      	ldr	r0, [r4, #8]
 8007698:	f7ff ff9c 	bl	80075d4 <std>
 800769c:	2202      	movs	r2, #2
 800769e:	2112      	movs	r1, #18
 80076a0:	68e0      	ldr	r0, [r4, #12]
 80076a2:	f7ff ff97 	bl	80075d4 <std>
 80076a6:	2301      	movs	r3, #1
 80076a8:	61a3      	str	r3, [r4, #24]
 80076aa:	bd10      	pop	{r4, pc}
 80076ac:	08009180 	.word	0x08009180
 80076b0:	0800761d 	.word	0x0800761d

080076b4 <__sfp>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <__sfp+0x70>)
 80076b8:	4607      	mov	r7, r0
 80076ba:	681e      	ldr	r6, [r3, #0]
 80076bc:	69b3      	ldr	r3, [r6, #24]
 80076be:	b913      	cbnz	r3, 80076c6 <__sfp+0x12>
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff ffc7 	bl	8007654 <__sinit>
 80076c6:	3648      	adds	r6, #72	; 0x48
 80076c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	d503      	bpl.n	80076d8 <__sfp+0x24>
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	b133      	cbz	r3, 80076e2 <__sfp+0x2e>
 80076d4:	6836      	ldr	r6, [r6, #0]
 80076d6:	e7f7      	b.n	80076c8 <__sfp+0x14>
 80076d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076dc:	b16d      	cbz	r5, 80076fa <__sfp+0x46>
 80076de:	3468      	adds	r4, #104	; 0x68
 80076e0:	e7f4      	b.n	80076cc <__sfp+0x18>
 80076e2:	2104      	movs	r1, #4
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7ff ff9f 	bl	8007628 <__sfmoreglue>
 80076ea:	6030      	str	r0, [r6, #0]
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d1f1      	bne.n	80076d4 <__sfp+0x20>
 80076f0:	230c      	movs	r3, #12
 80076f2:	4604      	mov	r4, r0
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	4620      	mov	r0, r4
 80076f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076fa:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <__sfp+0x74>)
 80076fc:	6665      	str	r5, [r4, #100]	; 0x64
 80076fe:	e9c4 5500 	strd	r5, r5, [r4]
 8007702:	60a5      	str	r5, [r4, #8]
 8007704:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007708:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800770c:	2208      	movs	r2, #8
 800770e:	4629      	mov	r1, r5
 8007710:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007714:	f7fe f9ed 	bl	8005af2 <memset>
 8007718:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800771c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007720:	e7e9      	b.n	80076f6 <__sfp+0x42>
 8007722:	bf00      	nop
 8007724:	08009180 	.word	0x08009180
 8007728:	ffff0001 	.word	0xffff0001

0800772c <_fwalk>:
 800772c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007730:	4688      	mov	r8, r1
 8007732:	2600      	movs	r6, #0
 8007734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007738:	b914      	cbnz	r4, 8007740 <_fwalk+0x14>
 800773a:	4630      	mov	r0, r6
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007740:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007744:	3f01      	subs	r7, #1
 8007746:	d501      	bpl.n	800774c <_fwalk+0x20>
 8007748:	6824      	ldr	r4, [r4, #0]
 800774a:	e7f5      	b.n	8007738 <_fwalk+0xc>
 800774c:	89ab      	ldrh	r3, [r5, #12]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d906      	bls.n	8007760 <_fwalk+0x34>
 8007752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007756:	3301      	adds	r3, #1
 8007758:	d002      	beq.n	8007760 <_fwalk+0x34>
 800775a:	4628      	mov	r0, r5
 800775c:	47c0      	blx	r8
 800775e:	4306      	orrs	r6, r0
 8007760:	3568      	adds	r5, #104	; 0x68
 8007762:	e7ef      	b.n	8007744 <_fwalk+0x18>

08007764 <_fwalk_reent>:
 8007764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007768:	4680      	mov	r8, r0
 800776a:	4689      	mov	r9, r1
 800776c:	2600      	movs	r6, #0
 800776e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007772:	b914      	cbnz	r4, 800777a <_fwalk_reent+0x16>
 8007774:	4630      	mov	r0, r6
 8007776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800777a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800777e:	3f01      	subs	r7, #1
 8007780:	d501      	bpl.n	8007786 <_fwalk_reent+0x22>
 8007782:	6824      	ldr	r4, [r4, #0]
 8007784:	e7f5      	b.n	8007772 <_fwalk_reent+0xe>
 8007786:	89ab      	ldrh	r3, [r5, #12]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d907      	bls.n	800779c <_fwalk_reent+0x38>
 800778c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007790:	3301      	adds	r3, #1
 8007792:	d003      	beq.n	800779c <_fwalk_reent+0x38>
 8007794:	4629      	mov	r1, r5
 8007796:	4640      	mov	r0, r8
 8007798:	47c8      	blx	r9
 800779a:	4306      	orrs	r6, r0
 800779c:	3568      	adds	r5, #104	; 0x68
 800779e:	e7ee      	b.n	800777e <_fwalk_reent+0x1a>

080077a0 <_getc_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	460c      	mov	r4, r1
 80077a4:	4605      	mov	r5, r0
 80077a6:	b118      	cbz	r0, 80077b0 <_getc_r+0x10>
 80077a8:	6983      	ldr	r3, [r0, #24]
 80077aa:	b90b      	cbnz	r3, 80077b0 <_getc_r+0x10>
 80077ac:	f7ff ff52 	bl	8007654 <__sinit>
 80077b0:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <_getc_r+0x4c>)
 80077b2:	429c      	cmp	r4, r3
 80077b4:	d10b      	bne.n	80077ce <_getc_r+0x2e>
 80077b6:	686c      	ldr	r4, [r5, #4]
 80077b8:	6863      	ldr	r3, [r4, #4]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	da0f      	bge.n	80077e2 <_getc_r+0x42>
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ca:	f000 bcf3 	b.w	80081b4 <__srget_r>
 80077ce:	4b08      	ldr	r3, [pc, #32]	; (80077f0 <_getc_r+0x50>)
 80077d0:	429c      	cmp	r4, r3
 80077d2:	d101      	bne.n	80077d8 <_getc_r+0x38>
 80077d4:	68ac      	ldr	r4, [r5, #8]
 80077d6:	e7ef      	b.n	80077b8 <_getc_r+0x18>
 80077d8:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <_getc_r+0x54>)
 80077da:	429c      	cmp	r4, r3
 80077dc:	bf08      	it	eq
 80077de:	68ec      	ldreq	r4, [r5, #12]
 80077e0:	e7ea      	b.n	80077b8 <_getc_r+0x18>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	6022      	str	r2, [r4, #0]
 80077e8:	7818      	ldrb	r0, [r3, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	080092f0 	.word	0x080092f0
 80077f0:	08009310 	.word	0x08009310
 80077f4:	080092d0 	.word	0x080092d0

080077f8 <_localeconv_r>:
 80077f8:	4b04      	ldr	r3, [pc, #16]	; (800780c <_localeconv_r+0x14>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a18      	ldr	r0, [r3, #32]
 80077fe:	4b04      	ldr	r3, [pc, #16]	; (8007810 <_localeconv_r+0x18>)
 8007800:	2800      	cmp	r0, #0
 8007802:	bf08      	it	eq
 8007804:	4618      	moveq	r0, r3
 8007806:	30f0      	adds	r0, #240	; 0xf0
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	20000438 	.word	0x20000438
 8007810:	2000049c 	.word	0x2000049c

08007814 <__swhatbuf_r>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	460e      	mov	r6, r1
 8007818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781c:	b096      	sub	sp, #88	; 0x58
 800781e:	2900      	cmp	r1, #0
 8007820:	4614      	mov	r4, r2
 8007822:	461d      	mov	r5, r3
 8007824:	da07      	bge.n	8007836 <__swhatbuf_r+0x22>
 8007826:	2300      	movs	r3, #0
 8007828:	602b      	str	r3, [r5, #0]
 800782a:	89b3      	ldrh	r3, [r6, #12]
 800782c:	061a      	lsls	r2, r3, #24
 800782e:	d410      	bmi.n	8007852 <__swhatbuf_r+0x3e>
 8007830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007834:	e00e      	b.n	8007854 <__swhatbuf_r+0x40>
 8007836:	466a      	mov	r2, sp
 8007838:	f000 fd4e 	bl	80082d8 <_fstat_r>
 800783c:	2800      	cmp	r0, #0
 800783e:	dbf2      	blt.n	8007826 <__swhatbuf_r+0x12>
 8007840:	9a01      	ldr	r2, [sp, #4]
 8007842:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007846:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800784a:	425a      	negs	r2, r3
 800784c:	415a      	adcs	r2, r3
 800784e:	602a      	str	r2, [r5, #0]
 8007850:	e7ee      	b.n	8007830 <__swhatbuf_r+0x1c>
 8007852:	2340      	movs	r3, #64	; 0x40
 8007854:	2000      	movs	r0, #0
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	b016      	add	sp, #88	; 0x58
 800785a:	bd70      	pop	{r4, r5, r6, pc}

0800785c <__smakebuf_r>:
 800785c:	898b      	ldrh	r3, [r1, #12]
 800785e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007860:	079d      	lsls	r5, r3, #30
 8007862:	4606      	mov	r6, r0
 8007864:	460c      	mov	r4, r1
 8007866:	d507      	bpl.n	8007878 <__smakebuf_r+0x1c>
 8007868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	2301      	movs	r3, #1
 8007872:	6163      	str	r3, [r4, #20]
 8007874:	b002      	add	sp, #8
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	ab01      	add	r3, sp, #4
 800787a:	466a      	mov	r2, sp
 800787c:	f7ff ffca 	bl	8007814 <__swhatbuf_r>
 8007880:	9900      	ldr	r1, [sp, #0]
 8007882:	4605      	mov	r5, r0
 8007884:	4630      	mov	r0, r6
 8007886:	f7fe f989 	bl	8005b9c <_malloc_r>
 800788a:	b948      	cbnz	r0, 80078a0 <__smakebuf_r+0x44>
 800788c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007890:	059a      	lsls	r2, r3, #22
 8007892:	d4ef      	bmi.n	8007874 <__smakebuf_r+0x18>
 8007894:	f023 0303 	bic.w	r3, r3, #3
 8007898:	f043 0302 	orr.w	r3, r3, #2
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	e7e3      	b.n	8007868 <__smakebuf_r+0xc>
 80078a0:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <__smakebuf_r+0x7c>)
 80078a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	6020      	str	r0, [r4, #0]
 80078a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	9b00      	ldr	r3, [sp, #0]
 80078b0:	6120      	str	r0, [r4, #16]
 80078b2:	6163      	str	r3, [r4, #20]
 80078b4:	9b01      	ldr	r3, [sp, #4]
 80078b6:	b15b      	cbz	r3, 80078d0 <__smakebuf_r+0x74>
 80078b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078bc:	4630      	mov	r0, r6
 80078be:	f000 fd1d 	bl	80082fc <_isatty_r>
 80078c2:	b128      	cbz	r0, 80078d0 <__smakebuf_r+0x74>
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	f043 0301 	orr.w	r3, r3, #1
 80078ce:	81a3      	strh	r3, [r4, #12]
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	431d      	orrs	r5, r3
 80078d4:	81a5      	strh	r5, [r4, #12]
 80078d6:	e7cd      	b.n	8007874 <__smakebuf_r+0x18>
 80078d8:	0800761d 	.word	0x0800761d

080078dc <memchr>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	b2c9      	uxtb	r1, r1
 80078e0:	4402      	add	r2, r0
 80078e2:	4290      	cmp	r0, r2
 80078e4:	4603      	mov	r3, r0
 80078e6:	d101      	bne.n	80078ec <memchr+0x10>
 80078e8:	2300      	movs	r3, #0
 80078ea:	e003      	b.n	80078f4 <memchr+0x18>
 80078ec:	781c      	ldrb	r4, [r3, #0]
 80078ee:	3001      	adds	r0, #1
 80078f0:	428c      	cmp	r4, r1
 80078f2:	d1f6      	bne.n	80078e2 <memchr+0x6>
 80078f4:	4618      	mov	r0, r3
 80078f6:	bd10      	pop	{r4, pc}

080078f8 <__malloc_lock>:
 80078f8:	4770      	bx	lr

080078fa <__malloc_unlock>:
 80078fa:	4770      	bx	lr

080078fc <_Balloc>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007900:	4604      	mov	r4, r0
 8007902:	460e      	mov	r6, r1
 8007904:	b93d      	cbnz	r5, 8007916 <_Balloc+0x1a>
 8007906:	2010      	movs	r0, #16
 8007908:	f7fe f8c6 	bl	8005a98 <malloc>
 800790c:	6260      	str	r0, [r4, #36]	; 0x24
 800790e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007912:	6005      	str	r5, [r0, #0]
 8007914:	60c5      	str	r5, [r0, #12]
 8007916:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007918:	68eb      	ldr	r3, [r5, #12]
 800791a:	b183      	cbz	r3, 800793e <_Balloc+0x42>
 800791c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007924:	b9b8      	cbnz	r0, 8007956 <_Balloc+0x5a>
 8007926:	2101      	movs	r1, #1
 8007928:	fa01 f506 	lsl.w	r5, r1, r6
 800792c:	1d6a      	adds	r2, r5, #5
 800792e:	0092      	lsls	r2, r2, #2
 8007930:	4620      	mov	r0, r4
 8007932:	f000 fabe 	bl	8007eb2 <_calloc_r>
 8007936:	b160      	cbz	r0, 8007952 <_Balloc+0x56>
 8007938:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800793c:	e00e      	b.n	800795c <_Balloc+0x60>
 800793e:	2221      	movs	r2, #33	; 0x21
 8007940:	2104      	movs	r1, #4
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fab5 	bl	8007eb2 <_calloc_r>
 8007948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800794a:	60e8      	str	r0, [r5, #12]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e4      	bne.n	800791c <_Balloc+0x20>
 8007952:	2000      	movs	r0, #0
 8007954:	bd70      	pop	{r4, r5, r6, pc}
 8007956:	6802      	ldr	r2, [r0, #0]
 8007958:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800795c:	2300      	movs	r3, #0
 800795e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007962:	e7f7      	b.n	8007954 <_Balloc+0x58>

08007964 <_Bfree>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007968:	4606      	mov	r6, r0
 800796a:	460d      	mov	r5, r1
 800796c:	b93c      	cbnz	r4, 800797e <_Bfree+0x1a>
 800796e:	2010      	movs	r0, #16
 8007970:	f7fe f892 	bl	8005a98 <malloc>
 8007974:	6270      	str	r0, [r6, #36]	; 0x24
 8007976:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800797a:	6004      	str	r4, [r0, #0]
 800797c:	60c4      	str	r4, [r0, #12]
 800797e:	b13d      	cbz	r5, 8007990 <_Bfree+0x2c>
 8007980:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007982:	686a      	ldr	r2, [r5, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800798a:	6029      	str	r1, [r5, #0]
 800798c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007990:	bd70      	pop	{r4, r5, r6, pc}

08007992 <__multadd>:
 8007992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007996:	461f      	mov	r7, r3
 8007998:	4606      	mov	r6, r0
 800799a:	460c      	mov	r4, r1
 800799c:	2300      	movs	r3, #0
 800799e:	690d      	ldr	r5, [r1, #16]
 80079a0:	f101 0c14 	add.w	ip, r1, #20
 80079a4:	f8dc 0000 	ldr.w	r0, [ip]
 80079a8:	3301      	adds	r3, #1
 80079aa:	b281      	uxth	r1, r0
 80079ac:	fb02 7101 	mla	r1, r2, r1, r7
 80079b0:	0c00      	lsrs	r0, r0, #16
 80079b2:	0c0f      	lsrs	r7, r1, #16
 80079b4:	fb02 7000 	mla	r0, r2, r0, r7
 80079b8:	b289      	uxth	r1, r1
 80079ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80079be:	429d      	cmp	r5, r3
 80079c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80079c4:	f84c 1b04 	str.w	r1, [ip], #4
 80079c8:	dcec      	bgt.n	80079a4 <__multadd+0x12>
 80079ca:	b1d7      	cbz	r7, 8007a02 <__multadd+0x70>
 80079cc:	68a3      	ldr	r3, [r4, #8]
 80079ce:	42ab      	cmp	r3, r5
 80079d0:	dc12      	bgt.n	80079f8 <__multadd+0x66>
 80079d2:	6861      	ldr	r1, [r4, #4]
 80079d4:	4630      	mov	r0, r6
 80079d6:	3101      	adds	r1, #1
 80079d8:	f7ff ff90 	bl	80078fc <_Balloc>
 80079dc:	4680      	mov	r8, r0
 80079de:	6922      	ldr	r2, [r4, #16]
 80079e0:	f104 010c 	add.w	r1, r4, #12
 80079e4:	3202      	adds	r2, #2
 80079e6:	0092      	lsls	r2, r2, #2
 80079e8:	300c      	adds	r0, #12
 80079ea:	f7fe f877 	bl	8005adc <memcpy>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4630      	mov	r0, r6
 80079f2:	f7ff ffb7 	bl	8007964 <_Bfree>
 80079f6:	4644      	mov	r4, r8
 80079f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079fc:	3501      	adds	r5, #1
 80079fe:	615f      	str	r7, [r3, #20]
 8007a00:	6125      	str	r5, [r4, #16]
 8007a02:	4620      	mov	r0, r4
 8007a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a08 <__hi0bits>:
 8007a08:	0c02      	lsrs	r2, r0, #16
 8007a0a:	0412      	lsls	r2, r2, #16
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	b9b2      	cbnz	r2, 8007a3e <__hi0bits+0x36>
 8007a10:	0403      	lsls	r3, r0, #16
 8007a12:	2010      	movs	r0, #16
 8007a14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a18:	bf04      	itt	eq
 8007a1a:	021b      	lsleq	r3, r3, #8
 8007a1c:	3008      	addeq	r0, #8
 8007a1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a22:	bf04      	itt	eq
 8007a24:	011b      	lsleq	r3, r3, #4
 8007a26:	3004      	addeq	r0, #4
 8007a28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a2c:	bf04      	itt	eq
 8007a2e:	009b      	lsleq	r3, r3, #2
 8007a30:	3002      	addeq	r0, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	db06      	blt.n	8007a44 <__hi0bits+0x3c>
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	d503      	bpl.n	8007a42 <__hi0bits+0x3a>
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	4770      	bx	lr
 8007a3e:	2000      	movs	r0, #0
 8007a40:	e7e8      	b.n	8007a14 <__hi0bits+0xc>
 8007a42:	2020      	movs	r0, #32
 8007a44:	4770      	bx	lr

08007a46 <__lo0bits>:
 8007a46:	6803      	ldr	r3, [r0, #0]
 8007a48:	4601      	mov	r1, r0
 8007a4a:	f013 0207 	ands.w	r2, r3, #7
 8007a4e:	d00b      	beq.n	8007a68 <__lo0bits+0x22>
 8007a50:	07da      	lsls	r2, r3, #31
 8007a52:	d423      	bmi.n	8007a9c <__lo0bits+0x56>
 8007a54:	0798      	lsls	r0, r3, #30
 8007a56:	bf49      	itett	mi
 8007a58:	085b      	lsrmi	r3, r3, #1
 8007a5a:	089b      	lsrpl	r3, r3, #2
 8007a5c:	2001      	movmi	r0, #1
 8007a5e:	600b      	strmi	r3, [r1, #0]
 8007a60:	bf5c      	itt	pl
 8007a62:	600b      	strpl	r3, [r1, #0]
 8007a64:	2002      	movpl	r0, #2
 8007a66:	4770      	bx	lr
 8007a68:	b298      	uxth	r0, r3
 8007a6a:	b9a8      	cbnz	r0, 8007a98 <__lo0bits+0x52>
 8007a6c:	2010      	movs	r0, #16
 8007a6e:	0c1b      	lsrs	r3, r3, #16
 8007a70:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a74:	bf04      	itt	eq
 8007a76:	0a1b      	lsreq	r3, r3, #8
 8007a78:	3008      	addeq	r0, #8
 8007a7a:	071a      	lsls	r2, r3, #28
 8007a7c:	bf04      	itt	eq
 8007a7e:	091b      	lsreq	r3, r3, #4
 8007a80:	3004      	addeq	r0, #4
 8007a82:	079a      	lsls	r2, r3, #30
 8007a84:	bf04      	itt	eq
 8007a86:	089b      	lsreq	r3, r3, #2
 8007a88:	3002      	addeq	r0, #2
 8007a8a:	07da      	lsls	r2, r3, #31
 8007a8c:	d402      	bmi.n	8007a94 <__lo0bits+0x4e>
 8007a8e:	085b      	lsrs	r3, r3, #1
 8007a90:	d006      	beq.n	8007aa0 <__lo0bits+0x5a>
 8007a92:	3001      	adds	r0, #1
 8007a94:	600b      	str	r3, [r1, #0]
 8007a96:	4770      	bx	lr
 8007a98:	4610      	mov	r0, r2
 8007a9a:	e7e9      	b.n	8007a70 <__lo0bits+0x2a>
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	4770      	bx	lr
 8007aa0:	2020      	movs	r0, #32
 8007aa2:	4770      	bx	lr

08007aa4 <__i2b>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	f7ff ff27 	bl	80078fc <_Balloc>
 8007aae:	2201      	movs	r2, #1
 8007ab0:	6144      	str	r4, [r0, #20]
 8007ab2:	6102      	str	r2, [r0, #16]
 8007ab4:	bd10      	pop	{r4, pc}

08007ab6 <__multiply>:
 8007ab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	4614      	mov	r4, r2
 8007abc:	690a      	ldr	r2, [r1, #16]
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	4688      	mov	r8, r1
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	bfbe      	ittt	lt
 8007ac6:	460b      	movlt	r3, r1
 8007ac8:	46a0      	movlt	r8, r4
 8007aca:	461c      	movlt	r4, r3
 8007acc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ad0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007ad4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ad8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007adc:	eb07 0609 	add.w	r6, r7, r9
 8007ae0:	42b3      	cmp	r3, r6
 8007ae2:	bfb8      	it	lt
 8007ae4:	3101      	addlt	r1, #1
 8007ae6:	f7ff ff09 	bl	80078fc <_Balloc>
 8007aea:	f100 0514 	add.w	r5, r0, #20
 8007aee:	462b      	mov	r3, r5
 8007af0:	2200      	movs	r2, #0
 8007af2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007af6:	4573      	cmp	r3, lr
 8007af8:	d316      	bcc.n	8007b28 <__multiply+0x72>
 8007afa:	f104 0214 	add.w	r2, r4, #20
 8007afe:	f108 0114 	add.w	r1, r8, #20
 8007b02:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007b06:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	9201      	str	r2, [sp, #4]
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d80c      	bhi.n	8007b2e <__multiply+0x78>
 8007b14:	2e00      	cmp	r6, #0
 8007b16:	dd03      	ble.n	8007b20 <__multiply+0x6a>
 8007b18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d05d      	beq.n	8007bdc <__multiply+0x126>
 8007b20:	6106      	str	r6, [r0, #16]
 8007b22:	b003      	add	sp, #12
 8007b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b28:	f843 2b04 	str.w	r2, [r3], #4
 8007b2c:	e7e3      	b.n	8007af6 <__multiply+0x40>
 8007b2e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007b32:	f1bb 0f00 	cmp.w	fp, #0
 8007b36:	d023      	beq.n	8007b80 <__multiply+0xca>
 8007b38:	4689      	mov	r9, r1
 8007b3a:	46ac      	mov	ip, r5
 8007b3c:	f04f 0800 	mov.w	r8, #0
 8007b40:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b44:	f8dc a000 	ldr.w	sl, [ip]
 8007b48:	b2a3      	uxth	r3, r4
 8007b4a:	fa1f fa8a 	uxth.w	sl, sl
 8007b4e:	fb0b a303 	mla	r3, fp, r3, sl
 8007b52:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007b56:	f8dc 4000 	ldr.w	r4, [ip]
 8007b5a:	4443      	add	r3, r8
 8007b5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b60:	fb0b 840a 	mla	r4, fp, sl, r8
 8007b64:	46e2      	mov	sl, ip
 8007b66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b70:	454f      	cmp	r7, r9
 8007b72:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b76:	f84a 3b04 	str.w	r3, [sl], #4
 8007b7a:	d82b      	bhi.n	8007bd4 <__multiply+0x11e>
 8007b7c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	3204      	adds	r2, #4
 8007b84:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007b88:	f1ba 0f00 	cmp.w	sl, #0
 8007b8c:	d020      	beq.n	8007bd0 <__multiply+0x11a>
 8007b8e:	4689      	mov	r9, r1
 8007b90:	46a8      	mov	r8, r5
 8007b92:	f04f 0b00 	mov.w	fp, #0
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	f8b9 c000 	ldrh.w	ip, [r9]
 8007b9c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	fb0a 440c 	mla	r4, sl, ip, r4
 8007ba6:	46c4      	mov	ip, r8
 8007ba8:	445c      	add	r4, fp
 8007baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007bae:	f84c 3b04 	str.w	r3, [ip], #4
 8007bb2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bb6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007bba:	0c1b      	lsrs	r3, r3, #16
 8007bbc:	fb0a b303 	mla	r3, sl, r3, fp
 8007bc0:	454f      	cmp	r7, r9
 8007bc2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007bc6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007bca:	d805      	bhi.n	8007bd8 <__multiply+0x122>
 8007bcc:	f8c8 3004 	str.w	r3, [r8, #4]
 8007bd0:	3504      	adds	r5, #4
 8007bd2:	e79b      	b.n	8007b0c <__multiply+0x56>
 8007bd4:	46d4      	mov	ip, sl
 8007bd6:	e7b3      	b.n	8007b40 <__multiply+0x8a>
 8007bd8:	46e0      	mov	r8, ip
 8007bda:	e7dd      	b.n	8007b98 <__multiply+0xe2>
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	e799      	b.n	8007b14 <__multiply+0x5e>

08007be0 <__pow5mult>:
 8007be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be4:	4615      	mov	r5, r2
 8007be6:	f012 0203 	ands.w	r2, r2, #3
 8007bea:	4606      	mov	r6, r0
 8007bec:	460f      	mov	r7, r1
 8007bee:	d007      	beq.n	8007c00 <__pow5mult+0x20>
 8007bf0:	4c21      	ldr	r4, [pc, #132]	; (8007c78 <__pow5mult+0x98>)
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bfa:	f7ff feca 	bl	8007992 <__multadd>
 8007bfe:	4607      	mov	r7, r0
 8007c00:	10ad      	asrs	r5, r5, #2
 8007c02:	d035      	beq.n	8007c70 <__pow5mult+0x90>
 8007c04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c06:	b93c      	cbnz	r4, 8007c18 <__pow5mult+0x38>
 8007c08:	2010      	movs	r0, #16
 8007c0a:	f7fd ff45 	bl	8005a98 <malloc>
 8007c0e:	6270      	str	r0, [r6, #36]	; 0x24
 8007c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c14:	6004      	str	r4, [r0, #0]
 8007c16:	60c4      	str	r4, [r0, #12]
 8007c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c20:	b94c      	cbnz	r4, 8007c36 <__pow5mult+0x56>
 8007c22:	f240 2171 	movw	r1, #625	; 0x271
 8007c26:	4630      	mov	r0, r6
 8007c28:	f7ff ff3c 	bl	8007aa4 <__i2b>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c34:	6003      	str	r3, [r0, #0]
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	07eb      	lsls	r3, r5, #31
 8007c3c:	d50a      	bpl.n	8007c54 <__pow5mult+0x74>
 8007c3e:	4639      	mov	r1, r7
 8007c40:	4622      	mov	r2, r4
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7ff ff37 	bl	8007ab6 <__multiply>
 8007c48:	4681      	mov	r9, r0
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7ff fe89 	bl	8007964 <_Bfree>
 8007c52:	464f      	mov	r7, r9
 8007c54:	106d      	asrs	r5, r5, #1
 8007c56:	d00b      	beq.n	8007c70 <__pow5mult+0x90>
 8007c58:	6820      	ldr	r0, [r4, #0]
 8007c5a:	b938      	cbnz	r0, 8007c6c <__pow5mult+0x8c>
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7ff ff28 	bl	8007ab6 <__multiply>
 8007c66:	6020      	str	r0, [r4, #0]
 8007c68:	f8c0 8000 	str.w	r8, [r0]
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	e7e4      	b.n	8007c3a <__pow5mult+0x5a>
 8007c70:	4638      	mov	r0, r7
 8007c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c76:	bf00      	nop
 8007c78:	08009420 	.word	0x08009420

08007c7c <__lshift>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	460c      	mov	r4, r1
 8007c82:	4607      	mov	r7, r0
 8007c84:	4616      	mov	r6, r2
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c8c:	eb0a 0903 	add.w	r9, sl, r3
 8007c90:	6849      	ldr	r1, [r1, #4]
 8007c92:	68a3      	ldr	r3, [r4, #8]
 8007c94:	f109 0501 	add.w	r5, r9, #1
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	db32      	blt.n	8007d02 <__lshift+0x86>
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	f7ff fe2d 	bl	80078fc <_Balloc>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f100 0114 	add.w	r1, r0, #20
 8007cac:	4553      	cmp	r3, sl
 8007cae:	db2b      	blt.n	8007d08 <__lshift+0x8c>
 8007cb0:	6920      	ldr	r0, [r4, #16]
 8007cb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cb6:	f104 0314 	add.w	r3, r4, #20
 8007cba:	f016 021f 	ands.w	r2, r6, #31
 8007cbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cc6:	d025      	beq.n	8007d14 <__lshift+0x98>
 8007cc8:	2000      	movs	r0, #0
 8007cca:	f1c2 0e20 	rsb	lr, r2, #32
 8007cce:	468a      	mov	sl, r1
 8007cd0:	681e      	ldr	r6, [r3, #0]
 8007cd2:	4096      	lsls	r6, r2
 8007cd4:	4330      	orrs	r0, r6
 8007cd6:	f84a 0b04 	str.w	r0, [sl], #4
 8007cda:	f853 0b04 	ldr.w	r0, [r3], #4
 8007cde:	459c      	cmp	ip, r3
 8007ce0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007ce4:	d814      	bhi.n	8007d10 <__lshift+0x94>
 8007ce6:	6048      	str	r0, [r1, #4]
 8007ce8:	b108      	cbz	r0, 8007cee <__lshift+0x72>
 8007cea:	f109 0502 	add.w	r5, r9, #2
 8007cee:	3d01      	subs	r5, #1
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f8c8 5010 	str.w	r5, [r8, #16]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	f7ff fe34 	bl	8007964 <_Bfree>
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d02:	3101      	adds	r1, #1
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	e7c7      	b.n	8007c98 <__lshift+0x1c>
 8007d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	e7cd      	b.n	8007cac <__lshift+0x30>
 8007d10:	4651      	mov	r1, sl
 8007d12:	e7dc      	b.n	8007cce <__lshift+0x52>
 8007d14:	3904      	subs	r1, #4
 8007d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1a:	459c      	cmp	ip, r3
 8007d1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d20:	d8f9      	bhi.n	8007d16 <__lshift+0x9a>
 8007d22:	e7e4      	b.n	8007cee <__lshift+0x72>

08007d24 <__mcmp>:
 8007d24:	6903      	ldr	r3, [r0, #16]
 8007d26:	690a      	ldr	r2, [r1, #16]
 8007d28:	b530      	push	{r4, r5, lr}
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	d10c      	bne.n	8007d48 <__mcmp+0x24>
 8007d2e:	0092      	lsls	r2, r2, #2
 8007d30:	3014      	adds	r0, #20
 8007d32:	3114      	adds	r1, #20
 8007d34:	1884      	adds	r4, r0, r2
 8007d36:	4411      	add	r1, r2
 8007d38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d40:	4295      	cmp	r5, r2
 8007d42:	d003      	beq.n	8007d4c <__mcmp+0x28>
 8007d44:	d305      	bcc.n	8007d52 <__mcmp+0x2e>
 8007d46:	2301      	movs	r3, #1
 8007d48:	4618      	mov	r0, r3
 8007d4a:	bd30      	pop	{r4, r5, pc}
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d3f3      	bcc.n	8007d38 <__mcmp+0x14>
 8007d50:	e7fa      	b.n	8007d48 <__mcmp+0x24>
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295
 8007d56:	e7f7      	b.n	8007d48 <__mcmp+0x24>

08007d58 <__mdiff>:
 8007d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	4607      	mov	r7, r0
 8007d60:	4611      	mov	r1, r2
 8007d62:	4628      	mov	r0, r5
 8007d64:	4614      	mov	r4, r2
 8007d66:	f7ff ffdd 	bl	8007d24 <__mcmp>
 8007d6a:	1e06      	subs	r6, r0, #0
 8007d6c:	d108      	bne.n	8007d80 <__mdiff+0x28>
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7ff fdc3 	bl	80078fc <_Balloc>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	bfa4      	itt	ge
 8007d82:	4623      	movge	r3, r4
 8007d84:	462c      	movge	r4, r5
 8007d86:	4638      	mov	r0, r7
 8007d88:	6861      	ldr	r1, [r4, #4]
 8007d8a:	bfa6      	itte	ge
 8007d8c:	461d      	movge	r5, r3
 8007d8e:	2600      	movge	r6, #0
 8007d90:	2601      	movlt	r6, #1
 8007d92:	f7ff fdb3 	bl	80078fc <_Balloc>
 8007d96:	f04f 0e00 	mov.w	lr, #0
 8007d9a:	60c6      	str	r6, [r0, #12]
 8007d9c:	692b      	ldr	r3, [r5, #16]
 8007d9e:	6926      	ldr	r6, [r4, #16]
 8007da0:	f104 0214 	add.w	r2, r4, #20
 8007da4:	f105 0914 	add.w	r9, r5, #20
 8007da8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007dac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007db0:	f100 0114 	add.w	r1, r0, #20
 8007db4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007db8:	f859 5b04 	ldr.w	r5, [r9], #4
 8007dbc:	fa1f f38a 	uxth.w	r3, sl
 8007dc0:	4473      	add	r3, lr
 8007dc2:	b2ac      	uxth	r4, r5
 8007dc4:	1b1b      	subs	r3, r3, r4
 8007dc6:	0c2c      	lsrs	r4, r5, #16
 8007dc8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007dcc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007dd6:	45c8      	cmp	r8, r9
 8007dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007ddc:	4694      	mov	ip, r2
 8007dde:	f841 4b04 	str.w	r4, [r1], #4
 8007de2:	d8e7      	bhi.n	8007db4 <__mdiff+0x5c>
 8007de4:	45bc      	cmp	ip, r7
 8007de6:	d304      	bcc.n	8007df2 <__mdiff+0x9a>
 8007de8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007dec:	b183      	cbz	r3, 8007e10 <__mdiff+0xb8>
 8007dee:	6106      	str	r6, [r0, #16]
 8007df0:	e7c4      	b.n	8007d7c <__mdiff+0x24>
 8007df2:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007df6:	b2a2      	uxth	r2, r4
 8007df8:	4472      	add	r2, lr
 8007dfa:	1413      	asrs	r3, r2, #16
 8007dfc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007e00:	b292      	uxth	r2, r2
 8007e02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e06:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007e0a:	f841 2b04 	str.w	r2, [r1], #4
 8007e0e:	e7e9      	b.n	8007de4 <__mdiff+0x8c>
 8007e10:	3e01      	subs	r6, #1
 8007e12:	e7e9      	b.n	8007de8 <__mdiff+0x90>

08007e14 <__d2b>:
 8007e14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e18:	461c      	mov	r4, r3
 8007e1a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007e1e:	2101      	movs	r1, #1
 8007e20:	4690      	mov	r8, r2
 8007e22:	f7ff fd6b 	bl	80078fc <_Balloc>
 8007e26:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007e2a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007e2e:	4607      	mov	r7, r0
 8007e30:	bb34      	cbnz	r4, 8007e80 <__d2b+0x6c>
 8007e32:	9201      	str	r2, [sp, #4]
 8007e34:	f1b8 0200 	subs.w	r2, r8, #0
 8007e38:	d027      	beq.n	8007e8a <__d2b+0x76>
 8007e3a:	a802      	add	r0, sp, #8
 8007e3c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007e40:	f7ff fe01 	bl	8007a46 <__lo0bits>
 8007e44:	9900      	ldr	r1, [sp, #0]
 8007e46:	b1f0      	cbz	r0, 8007e86 <__d2b+0x72>
 8007e48:	9a01      	ldr	r2, [sp, #4]
 8007e4a:	f1c0 0320 	rsb	r3, r0, #32
 8007e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e52:	430b      	orrs	r3, r1
 8007e54:	40c2      	lsrs	r2, r0
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	9201      	str	r2, [sp, #4]
 8007e5a:	9b01      	ldr	r3, [sp, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bf14      	ite	ne
 8007e60:	2102      	movne	r1, #2
 8007e62:	2101      	moveq	r1, #1
 8007e64:	61bb      	str	r3, [r7, #24]
 8007e66:	6139      	str	r1, [r7, #16]
 8007e68:	b1c4      	cbz	r4, 8007e9c <__d2b+0x88>
 8007e6a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e6e:	4404      	add	r4, r0
 8007e70:	6034      	str	r4, [r6, #0]
 8007e72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e76:	6028      	str	r0, [r5, #0]
 8007e78:	4638      	mov	r0, r7
 8007e7a:	b002      	add	sp, #8
 8007e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e80:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007e84:	e7d5      	b.n	8007e32 <__d2b+0x1e>
 8007e86:	6179      	str	r1, [r7, #20]
 8007e88:	e7e7      	b.n	8007e5a <__d2b+0x46>
 8007e8a:	a801      	add	r0, sp, #4
 8007e8c:	f7ff fddb 	bl	8007a46 <__lo0bits>
 8007e90:	2101      	movs	r1, #1
 8007e92:	9b01      	ldr	r3, [sp, #4]
 8007e94:	6139      	str	r1, [r7, #16]
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	3020      	adds	r0, #32
 8007e9a:	e7e5      	b.n	8007e68 <__d2b+0x54>
 8007e9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ea0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007ea4:	6030      	str	r0, [r6, #0]
 8007ea6:	6918      	ldr	r0, [r3, #16]
 8007ea8:	f7ff fdae 	bl	8007a08 <__hi0bits>
 8007eac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007eb0:	e7e1      	b.n	8007e76 <__d2b+0x62>

08007eb2 <_calloc_r>:
 8007eb2:	b538      	push	{r3, r4, r5, lr}
 8007eb4:	fb02 f401 	mul.w	r4, r2, r1
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f7fd fe6f 	bl	8005b9c <_malloc_r>
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	b118      	cbz	r0, 8007eca <_calloc_r+0x18>
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	f7fd fe14 	bl	8005af2 <memset>
 8007eca:	4628      	mov	r0, r5
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}

08007ece <__sfputc_r>:
 8007ece:	6893      	ldr	r3, [r2, #8]
 8007ed0:	b410      	push	{r4}
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	6093      	str	r3, [r2, #8]
 8007ed8:	da07      	bge.n	8007eea <__sfputc_r+0x1c>
 8007eda:	6994      	ldr	r4, [r2, #24]
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	db01      	blt.n	8007ee4 <__sfputc_r+0x16>
 8007ee0:	290a      	cmp	r1, #10
 8007ee2:	d102      	bne.n	8007eea <__sfputc_r+0x1c>
 8007ee4:	bc10      	pop	{r4}
 8007ee6:	f7fe bba3 	b.w	8006630 <__swbuf_r>
 8007eea:	6813      	ldr	r3, [r2, #0]
 8007eec:	1c58      	adds	r0, r3, #1
 8007eee:	6010      	str	r0, [r2, #0]
 8007ef0:	7019      	strb	r1, [r3, #0]
 8007ef2:	4608      	mov	r0, r1
 8007ef4:	bc10      	pop	{r4}
 8007ef6:	4770      	bx	lr

08007ef8 <__sfputs_r>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	4606      	mov	r6, r0
 8007efc:	460f      	mov	r7, r1
 8007efe:	4614      	mov	r4, r2
 8007f00:	18d5      	adds	r5, r2, r3
 8007f02:	42ac      	cmp	r4, r5
 8007f04:	d101      	bne.n	8007f0a <__sfputs_r+0x12>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e007      	b.n	8007f1a <__sfputs_r+0x22>
 8007f0a:	463a      	mov	r2, r7
 8007f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff ffdc 	bl	8007ece <__sfputc_r>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d1f3      	bne.n	8007f02 <__sfputs_r+0xa>
 8007f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f1c <_vfiprintf_r>:
 8007f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f20:	460c      	mov	r4, r1
 8007f22:	b09d      	sub	sp, #116	; 0x74
 8007f24:	4617      	mov	r7, r2
 8007f26:	461d      	mov	r5, r3
 8007f28:	4606      	mov	r6, r0
 8007f2a:	b118      	cbz	r0, 8007f34 <_vfiprintf_r+0x18>
 8007f2c:	6983      	ldr	r3, [r0, #24]
 8007f2e:	b90b      	cbnz	r3, 8007f34 <_vfiprintf_r+0x18>
 8007f30:	f7ff fb90 	bl	8007654 <__sinit>
 8007f34:	4b7c      	ldr	r3, [pc, #496]	; (8008128 <_vfiprintf_r+0x20c>)
 8007f36:	429c      	cmp	r4, r3
 8007f38:	d158      	bne.n	8007fec <_vfiprintf_r+0xd0>
 8007f3a:	6874      	ldr	r4, [r6, #4]
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	0718      	lsls	r0, r3, #28
 8007f40:	d55e      	bpl.n	8008000 <_vfiprintf_r+0xe4>
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d05b      	beq.n	8008000 <_vfiprintf_r+0xe4>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4c:	2320      	movs	r3, #32
 8007f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f52:	2330      	movs	r3, #48	; 0x30
 8007f54:	f04f 0b01 	mov.w	fp, #1
 8007f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f5c:	9503      	str	r5, [sp, #12]
 8007f5e:	46b8      	mov	r8, r7
 8007f60:	4645      	mov	r5, r8
 8007f62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f66:	b10b      	cbz	r3, 8007f6c <_vfiprintf_r+0x50>
 8007f68:	2b25      	cmp	r3, #37	; 0x25
 8007f6a:	d154      	bne.n	8008016 <_vfiprintf_r+0xfa>
 8007f6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007f70:	d00b      	beq.n	8007f8a <_vfiprintf_r+0x6e>
 8007f72:	4653      	mov	r3, sl
 8007f74:	463a      	mov	r2, r7
 8007f76:	4621      	mov	r1, r4
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff ffbd 	bl	8007ef8 <__sfputs_r>
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f000 80c2 	beq.w	8008108 <_vfiprintf_r+0x1ec>
 8007f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f86:	4453      	add	r3, sl
 8007f88:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8a:	f898 3000 	ldrb.w	r3, [r8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80ba 	beq.w	8008108 <_vfiprintf_r+0x1ec>
 8007f94:	2300      	movs	r3, #0
 8007f96:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f9e:	9304      	str	r3, [sp, #16]
 8007fa0:	9307      	str	r3, [sp, #28]
 8007fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8007fa8:	46a8      	mov	r8, r5
 8007faa:	2205      	movs	r2, #5
 8007fac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007fb0:	485e      	ldr	r0, [pc, #376]	; (800812c <_vfiprintf_r+0x210>)
 8007fb2:	f7ff fc93 	bl	80078dc <memchr>
 8007fb6:	9b04      	ldr	r3, [sp, #16]
 8007fb8:	bb78      	cbnz	r0, 800801a <_vfiprintf_r+0xfe>
 8007fba:	06d9      	lsls	r1, r3, #27
 8007fbc:	bf44      	itt	mi
 8007fbe:	2220      	movmi	r2, #32
 8007fc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007fc4:	071a      	lsls	r2, r3, #28
 8007fc6:	bf44      	itt	mi
 8007fc8:	222b      	movmi	r2, #43	; 0x2b
 8007fca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007fce:	782a      	ldrb	r2, [r5, #0]
 8007fd0:	2a2a      	cmp	r2, #42	; 0x2a
 8007fd2:	d02a      	beq.n	800802a <_vfiprintf_r+0x10e>
 8007fd4:	46a8      	mov	r8, r5
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	250a      	movs	r5, #10
 8007fda:	9a07      	ldr	r2, [sp, #28]
 8007fdc:	4641      	mov	r1, r8
 8007fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fe2:	3b30      	subs	r3, #48	; 0x30
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	d969      	bls.n	80080bc <_vfiprintf_r+0x1a0>
 8007fe8:	b360      	cbz	r0, 8008044 <_vfiprintf_r+0x128>
 8007fea:	e024      	b.n	8008036 <_vfiprintf_r+0x11a>
 8007fec:	4b50      	ldr	r3, [pc, #320]	; (8008130 <_vfiprintf_r+0x214>)
 8007fee:	429c      	cmp	r4, r3
 8007ff0:	d101      	bne.n	8007ff6 <_vfiprintf_r+0xda>
 8007ff2:	68b4      	ldr	r4, [r6, #8]
 8007ff4:	e7a2      	b.n	8007f3c <_vfiprintf_r+0x20>
 8007ff6:	4b4f      	ldr	r3, [pc, #316]	; (8008134 <_vfiprintf_r+0x218>)
 8007ff8:	429c      	cmp	r4, r3
 8007ffa:	bf08      	it	eq
 8007ffc:	68f4      	ldreq	r4, [r6, #12]
 8007ffe:	e79d      	b.n	8007f3c <_vfiprintf_r+0x20>
 8008000:	4621      	mov	r1, r4
 8008002:	4630      	mov	r0, r6
 8008004:	f7fe fb74 	bl	80066f0 <__swsetup_r>
 8008008:	2800      	cmp	r0, #0
 800800a:	d09d      	beq.n	8007f48 <_vfiprintf_r+0x2c>
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	b01d      	add	sp, #116	; 0x74
 8008012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	46a8      	mov	r8, r5
 8008018:	e7a2      	b.n	8007f60 <_vfiprintf_r+0x44>
 800801a:	4a44      	ldr	r2, [pc, #272]	; (800812c <_vfiprintf_r+0x210>)
 800801c:	4645      	mov	r5, r8
 800801e:	1a80      	subs	r0, r0, r2
 8008020:	fa0b f000 	lsl.w	r0, fp, r0
 8008024:	4318      	orrs	r0, r3
 8008026:	9004      	str	r0, [sp, #16]
 8008028:	e7be      	b.n	8007fa8 <_vfiprintf_r+0x8c>
 800802a:	9a03      	ldr	r2, [sp, #12]
 800802c:	1d11      	adds	r1, r2, #4
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	9103      	str	r1, [sp, #12]
 8008032:	2a00      	cmp	r2, #0
 8008034:	db01      	blt.n	800803a <_vfiprintf_r+0x11e>
 8008036:	9207      	str	r2, [sp, #28]
 8008038:	e004      	b.n	8008044 <_vfiprintf_r+0x128>
 800803a:	4252      	negs	r2, r2
 800803c:	f043 0302 	orr.w	r3, r3, #2
 8008040:	9207      	str	r2, [sp, #28]
 8008042:	9304      	str	r3, [sp, #16]
 8008044:	f898 3000 	ldrb.w	r3, [r8]
 8008048:	2b2e      	cmp	r3, #46	; 0x2e
 800804a:	d10e      	bne.n	800806a <_vfiprintf_r+0x14e>
 800804c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008050:	2b2a      	cmp	r3, #42	; 0x2a
 8008052:	d138      	bne.n	80080c6 <_vfiprintf_r+0x1aa>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	f108 0802 	add.w	r8, r8, #2
 800805a:	1d1a      	adds	r2, r3, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	9203      	str	r2, [sp, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	bfb8      	it	lt
 8008064:	f04f 33ff 	movlt.w	r3, #4294967295
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	4d33      	ldr	r5, [pc, #204]	; (8008138 <_vfiprintf_r+0x21c>)
 800806c:	2203      	movs	r2, #3
 800806e:	f898 1000 	ldrb.w	r1, [r8]
 8008072:	4628      	mov	r0, r5
 8008074:	f7ff fc32 	bl	80078dc <memchr>
 8008078:	b140      	cbz	r0, 800808c <_vfiprintf_r+0x170>
 800807a:	2340      	movs	r3, #64	; 0x40
 800807c:	1b40      	subs	r0, r0, r5
 800807e:	fa03 f000 	lsl.w	r0, r3, r0
 8008082:	9b04      	ldr	r3, [sp, #16]
 8008084:	f108 0801 	add.w	r8, r8, #1
 8008088:	4303      	orrs	r3, r0
 800808a:	9304      	str	r3, [sp, #16]
 800808c:	f898 1000 	ldrb.w	r1, [r8]
 8008090:	2206      	movs	r2, #6
 8008092:	482a      	ldr	r0, [pc, #168]	; (800813c <_vfiprintf_r+0x220>)
 8008094:	f108 0701 	add.w	r7, r8, #1
 8008098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800809c:	f7ff fc1e 	bl	80078dc <memchr>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d037      	beq.n	8008114 <_vfiprintf_r+0x1f8>
 80080a4:	4b26      	ldr	r3, [pc, #152]	; (8008140 <_vfiprintf_r+0x224>)
 80080a6:	bb1b      	cbnz	r3, 80080f0 <_vfiprintf_r+0x1d4>
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	3307      	adds	r3, #7
 80080ac:	f023 0307 	bic.w	r3, r3, #7
 80080b0:	3308      	adds	r3, #8
 80080b2:	9303      	str	r3, [sp, #12]
 80080b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b6:	444b      	add	r3, r9
 80080b8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ba:	e750      	b.n	8007f5e <_vfiprintf_r+0x42>
 80080bc:	fb05 3202 	mla	r2, r5, r2, r3
 80080c0:	2001      	movs	r0, #1
 80080c2:	4688      	mov	r8, r1
 80080c4:	e78a      	b.n	8007fdc <_vfiprintf_r+0xc0>
 80080c6:	2300      	movs	r3, #0
 80080c8:	250a      	movs	r5, #10
 80080ca:	4619      	mov	r1, r3
 80080cc:	f108 0801 	add.w	r8, r8, #1
 80080d0:	9305      	str	r3, [sp, #20]
 80080d2:	4640      	mov	r0, r8
 80080d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d8:	3a30      	subs	r2, #48	; 0x30
 80080da:	2a09      	cmp	r2, #9
 80080dc:	d903      	bls.n	80080e6 <_vfiprintf_r+0x1ca>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0c3      	beq.n	800806a <_vfiprintf_r+0x14e>
 80080e2:	9105      	str	r1, [sp, #20]
 80080e4:	e7c1      	b.n	800806a <_vfiprintf_r+0x14e>
 80080e6:	fb05 2101 	mla	r1, r5, r1, r2
 80080ea:	2301      	movs	r3, #1
 80080ec:	4680      	mov	r8, r0
 80080ee:	e7f0      	b.n	80080d2 <_vfiprintf_r+0x1b6>
 80080f0:	ab03      	add	r3, sp, #12
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	4622      	mov	r2, r4
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <_vfiprintf_r+0x228>)
 80080f8:	a904      	add	r1, sp, #16
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7fd fe3a 	bl	8005d74 <_printf_float>
 8008100:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008104:	4681      	mov	r9, r0
 8008106:	d1d5      	bne.n	80080b4 <_vfiprintf_r+0x198>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	065b      	lsls	r3, r3, #25
 800810c:	f53f af7e 	bmi.w	800800c <_vfiprintf_r+0xf0>
 8008110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008112:	e77d      	b.n	8008010 <_vfiprintf_r+0xf4>
 8008114:	ab03      	add	r3, sp, #12
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	4622      	mov	r2, r4
 800811a:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <_vfiprintf_r+0x228>)
 800811c:	a904      	add	r1, sp, #16
 800811e:	4630      	mov	r0, r6
 8008120:	f7fe f8d4 	bl	80062cc <_printf_i>
 8008124:	e7ec      	b.n	8008100 <_vfiprintf_r+0x1e4>
 8008126:	bf00      	nop
 8008128:	080092f0 	.word	0x080092f0
 800812c:	0800942c 	.word	0x0800942c
 8008130:	08009310 	.word	0x08009310
 8008134:	080092d0 	.word	0x080092d0
 8008138:	08009432 	.word	0x08009432
 800813c:	08009436 	.word	0x08009436
 8008140:	08005d75 	.word	0x08005d75
 8008144:	08007ef9 	.word	0x08007ef9

08008148 <_putc_r>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	460d      	mov	r5, r1
 800814c:	4614      	mov	r4, r2
 800814e:	4606      	mov	r6, r0
 8008150:	b118      	cbz	r0, 800815a <_putc_r+0x12>
 8008152:	6983      	ldr	r3, [r0, #24]
 8008154:	b90b      	cbnz	r3, 800815a <_putc_r+0x12>
 8008156:	f7ff fa7d 	bl	8007654 <__sinit>
 800815a:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <_putc_r+0x60>)
 800815c:	429c      	cmp	r4, r3
 800815e:	d112      	bne.n	8008186 <_putc_r+0x3e>
 8008160:	6874      	ldr	r4, [r6, #4]
 8008162:	68a3      	ldr	r3, [r4, #8]
 8008164:	3b01      	subs	r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	60a3      	str	r3, [r4, #8]
 800816a:	da16      	bge.n	800819a <_putc_r+0x52>
 800816c:	69a2      	ldr	r2, [r4, #24]
 800816e:	4293      	cmp	r3, r2
 8008170:	db02      	blt.n	8008178 <_putc_r+0x30>
 8008172:	b2eb      	uxtb	r3, r5
 8008174:	2b0a      	cmp	r3, #10
 8008176:	d110      	bne.n	800819a <_putc_r+0x52>
 8008178:	4622      	mov	r2, r4
 800817a:	4629      	mov	r1, r5
 800817c:	4630      	mov	r0, r6
 800817e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008182:	f7fe ba55 	b.w	8006630 <__swbuf_r>
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <_putc_r+0x64>)
 8008188:	429c      	cmp	r4, r3
 800818a:	d101      	bne.n	8008190 <_putc_r+0x48>
 800818c:	68b4      	ldr	r4, [r6, #8]
 800818e:	e7e8      	b.n	8008162 <_putc_r+0x1a>
 8008190:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <_putc_r+0x68>)
 8008192:	429c      	cmp	r4, r3
 8008194:	bf08      	it	eq
 8008196:	68f4      	ldreq	r4, [r6, #12]
 8008198:	e7e3      	b.n	8008162 <_putc_r+0x1a>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	b2e8      	uxtb	r0, r5
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	6022      	str	r2, [r4, #0]
 80081a2:	701d      	strb	r5, [r3, #0]
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
 80081a6:	bf00      	nop
 80081a8:	080092f0 	.word	0x080092f0
 80081ac:	08009310 	.word	0x08009310
 80081b0:	080092d0 	.word	0x080092d0

080081b4 <__srget_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	460c      	mov	r4, r1
 80081b8:	4605      	mov	r5, r0
 80081ba:	b118      	cbz	r0, 80081c4 <__srget_r+0x10>
 80081bc:	6983      	ldr	r3, [r0, #24]
 80081be:	b90b      	cbnz	r3, 80081c4 <__srget_r+0x10>
 80081c0:	f7ff fa48 	bl	8007654 <__sinit>
 80081c4:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <__srget_r+0x4c>)
 80081c6:	429c      	cmp	r4, r3
 80081c8:	d10d      	bne.n	80081e6 <__srget_r+0x32>
 80081ca:	686c      	ldr	r4, [r5, #4]
 80081cc:	4621      	mov	r1, r4
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 f8d2 	bl	8008378 <__srefill_r>
 80081d4:	b988      	cbnz	r0, 80081fa <__srget_r+0x46>
 80081d6:	6863      	ldr	r3, [r4, #4]
 80081d8:	3b01      	subs	r3, #1
 80081da:	6063      	str	r3, [r4, #4]
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	6022      	str	r2, [r4, #0]
 80081e2:	7818      	ldrb	r0, [r3, #0]
 80081e4:	bd38      	pop	{r3, r4, r5, pc}
 80081e6:	4b07      	ldr	r3, [pc, #28]	; (8008204 <__srget_r+0x50>)
 80081e8:	429c      	cmp	r4, r3
 80081ea:	d101      	bne.n	80081f0 <__srget_r+0x3c>
 80081ec:	68ac      	ldr	r4, [r5, #8]
 80081ee:	e7ed      	b.n	80081cc <__srget_r+0x18>
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <__srget_r+0x54>)
 80081f2:	429c      	cmp	r4, r3
 80081f4:	bf08      	it	eq
 80081f6:	68ec      	ldreq	r4, [r5, #12]
 80081f8:	e7e8      	b.n	80081cc <__srget_r+0x18>
 80081fa:	f04f 30ff 	mov.w	r0, #4294967295
 80081fe:	e7f1      	b.n	80081e4 <__srget_r+0x30>
 8008200:	080092f0 	.word	0x080092f0
 8008204:	08009310 	.word	0x08009310
 8008208:	080092d0 	.word	0x080092d0

0800820c <__sread>:
 800820c:	b510      	push	{r4, lr}
 800820e:	460c      	mov	r4, r1
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	f000 f894 	bl	8008340 <_read_r>
 8008218:	2800      	cmp	r0, #0
 800821a:	bfab      	itete	ge
 800821c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800821e:	89a3      	ldrhlt	r3, [r4, #12]
 8008220:	181b      	addge	r3, r3, r0
 8008222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008226:	bfac      	ite	ge
 8008228:	6563      	strge	r3, [r4, #84]	; 0x54
 800822a:	81a3      	strhlt	r3, [r4, #12]
 800822c:	bd10      	pop	{r4, pc}

0800822e <__swrite>:
 800822e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	461f      	mov	r7, r3
 8008234:	898b      	ldrh	r3, [r1, #12]
 8008236:	4605      	mov	r5, r0
 8008238:	05db      	lsls	r3, r3, #23
 800823a:	460c      	mov	r4, r1
 800823c:	4616      	mov	r6, r2
 800823e:	d505      	bpl.n	800824c <__swrite+0x1e>
 8008240:	2302      	movs	r3, #2
 8008242:	2200      	movs	r2, #0
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	f000 f868 	bl	800831c <_lseek_r>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	4632      	mov	r2, r6
 8008250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800825a:	463b      	mov	r3, r7
 800825c:	4628      	mov	r0, r5
 800825e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008262:	f000 b817 	b.w	8008294 <_write_r>

08008266 <__sseek>:
 8008266:	b510      	push	{r4, lr}
 8008268:	460c      	mov	r4, r1
 800826a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826e:	f000 f855 	bl	800831c <_lseek_r>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	bf15      	itete	ne
 8008278:	6560      	strne	r0, [r4, #84]	; 0x54
 800827a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800827e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008282:	81a3      	strheq	r3, [r4, #12]
 8008284:	bf18      	it	ne
 8008286:	81a3      	strhne	r3, [r4, #12]
 8008288:	bd10      	pop	{r4, pc}

0800828a <__sclose>:
 800828a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828e:	f000 b813 	b.w	80082b8 <_close_r>
	...

08008294 <_write_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4605      	mov	r5, r0
 8008298:	4608      	mov	r0, r1
 800829a:	4611      	mov	r1, r2
 800829c:	2200      	movs	r2, #0
 800829e:	4c05      	ldr	r4, [pc, #20]	; (80082b4 <_write_r+0x20>)
 80082a0:	6022      	str	r2, [r4, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	f7fa fc8f 	bl	8002bc6 <_write>
 80082a8:	1c43      	adds	r3, r0, #1
 80082aa:	d102      	bne.n	80082b2 <_write_r+0x1e>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	b103      	cbz	r3, 80082b2 <_write_r+0x1e>
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	20000c34 	.word	0x20000c34

080082b8 <_close_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	2300      	movs	r3, #0
 80082bc:	4c05      	ldr	r4, [pc, #20]	; (80082d4 <_close_r+0x1c>)
 80082be:	4605      	mov	r5, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	f7fa fc9b 	bl	8002bfe <_close>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_close_r+0x1a>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_close_r+0x1a>
 80082d0:	602b      	str	r3, [r5, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	20000c34 	.word	0x20000c34

080082d8 <_fstat_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	2300      	movs	r3, #0
 80082dc:	4c06      	ldr	r4, [pc, #24]	; (80082f8 <_fstat_r+0x20>)
 80082de:	4605      	mov	r5, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	4611      	mov	r1, r2
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	f7fa fc95 	bl	8002c14 <_fstat>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d102      	bne.n	80082f4 <_fstat_r+0x1c>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	b103      	cbz	r3, 80082f4 <_fstat_r+0x1c>
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	bd38      	pop	{r3, r4, r5, pc}
 80082f6:	bf00      	nop
 80082f8:	20000c34 	.word	0x20000c34

080082fc <_isatty_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	2300      	movs	r3, #0
 8008300:	4c05      	ldr	r4, [pc, #20]	; (8008318 <_isatty_r+0x1c>)
 8008302:	4605      	mov	r5, r0
 8008304:	4608      	mov	r0, r1
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	f7fa fc93 	bl	8002c32 <_isatty>
 800830c:	1c43      	adds	r3, r0, #1
 800830e:	d102      	bne.n	8008316 <_isatty_r+0x1a>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	b103      	cbz	r3, 8008316 <_isatty_r+0x1a>
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	20000c34 	.word	0x20000c34

0800831c <_lseek_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4605      	mov	r5, r0
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	2200      	movs	r2, #0
 8008326:	4c05      	ldr	r4, [pc, #20]	; (800833c <_lseek_r+0x20>)
 8008328:	6022      	str	r2, [r4, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	f7fa fc8b 	bl	8002c46 <_lseek>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_lseek_r+0x1e>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	b103      	cbz	r3, 800833a <_lseek_r+0x1e>
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20000c34 	.word	0x20000c34

08008340 <_read_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4605      	mov	r5, r0
 8008344:	4608      	mov	r0, r1
 8008346:	4611      	mov	r1, r2
 8008348:	2200      	movs	r2, #0
 800834a:	4c05      	ldr	r4, [pc, #20]	; (8008360 <_read_r+0x20>)
 800834c:	6022      	str	r2, [r4, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	f7fa fc1c 	bl	8002b8c <_read>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_read_r+0x1e>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	b103      	cbz	r3, 800835e <_read_r+0x1e>
 800835c:	602b      	str	r3, [r5, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000c34 	.word	0x20000c34

08008364 <lflush>:
 8008364:	8983      	ldrh	r3, [r0, #12]
 8008366:	f003 0309 	and.w	r3, r3, #9
 800836a:	2b09      	cmp	r3, #9
 800836c:	d101      	bne.n	8008372 <lflush+0xe>
 800836e:	f7ff b91f 	b.w	80075b0 <fflush>
 8008372:	2000      	movs	r0, #0
 8008374:	4770      	bx	lr
	...

08008378 <__srefill_r>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	460c      	mov	r4, r1
 800837c:	4605      	mov	r5, r0
 800837e:	b118      	cbz	r0, 8008388 <__srefill_r+0x10>
 8008380:	6983      	ldr	r3, [r0, #24]
 8008382:	b90b      	cbnz	r3, 8008388 <__srefill_r+0x10>
 8008384:	f7ff f966 	bl	8007654 <__sinit>
 8008388:	4b3c      	ldr	r3, [pc, #240]	; (800847c <__srefill_r+0x104>)
 800838a:	429c      	cmp	r4, r3
 800838c:	d10a      	bne.n	80083a4 <__srefill_r+0x2c>
 800838e:	686c      	ldr	r4, [r5, #4]
 8008390:	2300      	movs	r3, #0
 8008392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008396:	6063      	str	r3, [r4, #4]
 8008398:	b293      	uxth	r3, r2
 800839a:	069e      	lsls	r6, r3, #26
 800839c:	d50c      	bpl.n	80083b8 <__srefill_r+0x40>
 800839e:	f04f 30ff 	mov.w	r0, #4294967295
 80083a2:	e068      	b.n	8008476 <__srefill_r+0xfe>
 80083a4:	4b36      	ldr	r3, [pc, #216]	; (8008480 <__srefill_r+0x108>)
 80083a6:	429c      	cmp	r4, r3
 80083a8:	d101      	bne.n	80083ae <__srefill_r+0x36>
 80083aa:	68ac      	ldr	r4, [r5, #8]
 80083ac:	e7f0      	b.n	8008390 <__srefill_r+0x18>
 80083ae:	4b35      	ldr	r3, [pc, #212]	; (8008484 <__srefill_r+0x10c>)
 80083b0:	429c      	cmp	r4, r3
 80083b2:	bf08      	it	eq
 80083b4:	68ec      	ldreq	r4, [r5, #12]
 80083b6:	e7eb      	b.n	8008390 <__srefill_r+0x18>
 80083b8:	0758      	lsls	r0, r3, #29
 80083ba:	d44a      	bmi.n	8008452 <__srefill_r+0xda>
 80083bc:	06d9      	lsls	r1, r3, #27
 80083be:	d405      	bmi.n	80083cc <__srefill_r+0x54>
 80083c0:	2309      	movs	r3, #9
 80083c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083c6:	602b      	str	r3, [r5, #0]
 80083c8:	81a2      	strh	r2, [r4, #12]
 80083ca:	e7e8      	b.n	800839e <__srefill_r+0x26>
 80083cc:	071a      	lsls	r2, r3, #28
 80083ce:	d50b      	bpl.n	80083e8 <__srefill_r+0x70>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4628      	mov	r0, r5
 80083d4:	f7ff f8c2 	bl	800755c <_fflush_r>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d1e0      	bne.n	800839e <__srefill_r+0x26>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	60a0      	str	r0, [r4, #8]
 80083e0:	f023 0308 	bic.w	r3, r3, #8
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	61a0      	str	r0, [r4, #24]
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	f043 0304 	orr.w	r3, r3, #4
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	b91b      	cbnz	r3, 80083fc <__srefill_r+0x84>
 80083f4:	4621      	mov	r1, r4
 80083f6:	4628      	mov	r0, r5
 80083f8:	f7ff fa30 	bl	800785c <__smakebuf_r>
 80083fc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008400:	b2be      	uxth	r6, r7
 8008402:	07b3      	lsls	r3, r6, #30
 8008404:	d00f      	beq.n	8008426 <__srefill_r+0xae>
 8008406:	2301      	movs	r3, #1
 8008408:	81a3      	strh	r3, [r4, #12]
 800840a:	4b1f      	ldr	r3, [pc, #124]	; (8008488 <__srefill_r+0x110>)
 800840c:	491f      	ldr	r1, [pc, #124]	; (800848c <__srefill_r+0x114>)
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	f006 0609 	and.w	r6, r6, #9
 8008414:	f7ff f98a 	bl	800772c <_fwalk>
 8008418:	2e09      	cmp	r6, #9
 800841a:	81a7      	strh	r7, [r4, #12]
 800841c:	d103      	bne.n	8008426 <__srefill_r+0xae>
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f7ff f815 	bl	8007450 <__sflush_r>
 8008426:	6922      	ldr	r2, [r4, #16]
 8008428:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800842a:	6022      	str	r2, [r4, #0]
 800842c:	6963      	ldr	r3, [r4, #20]
 800842e:	6a21      	ldr	r1, [r4, #32]
 8008430:	4628      	mov	r0, r5
 8008432:	47b0      	blx	r6
 8008434:	2800      	cmp	r0, #0
 8008436:	6060      	str	r0, [r4, #4]
 8008438:	dc1e      	bgt.n	8008478 <__srefill_r+0x100>
 800843a:	bf18      	it	ne
 800843c:	2200      	movne	r2, #0
 800843e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008442:	bf16      	itet	ne
 8008444:	6062      	strne	r2, [r4, #4]
 8008446:	f043 0320 	orreq.w	r3, r3, #32
 800844a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	e7a5      	b.n	800839e <__srefill_r+0x26>
 8008452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008454:	2900      	cmp	r1, #0
 8008456:	d0cb      	beq.n	80083f0 <__srefill_r+0x78>
 8008458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800845c:	4299      	cmp	r1, r3
 800845e:	d002      	beq.n	8008466 <__srefill_r+0xee>
 8008460:	4628      	mov	r0, r5
 8008462:	f7fd fb4f 	bl	8005b04 <_free_r>
 8008466:	2000      	movs	r0, #0
 8008468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800846a:	6360      	str	r0, [r4, #52]	; 0x34
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0be      	beq.n	80083f0 <__srefill_r+0x78>
 8008472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008478:	2000      	movs	r0, #0
 800847a:	e7fc      	b.n	8008476 <__srefill_r+0xfe>
 800847c:	080092f0 	.word	0x080092f0
 8008480:	08009310 	.word	0x08009310
 8008484:	080092d0 	.word	0x080092d0
 8008488:	08009180 	.word	0x08009180
 800848c:	08008365 	.word	0x08008365

08008490 <_init>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	bf00      	nop
 8008494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008496:	bc08      	pop	{r3}
 8008498:	469e      	mov	lr, r3
 800849a:	4770      	bx	lr

0800849c <_fini>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	bf00      	nop
 80084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a2:	bc08      	pop	{r3}
 80084a4:	469e      	mov	lr, r3
 80084a6:	4770      	bx	lr
